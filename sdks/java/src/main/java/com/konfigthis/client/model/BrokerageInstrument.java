/*
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * BrokerageInstrument
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class BrokerageInstrument {
  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_EXCHANGE_MIC = "exchange_mic";
  @SerializedName(SERIALIZED_NAME_EXCHANGE_MIC)
  private String exchangeMic;

  public static final String SERIALIZED_NAME_TRADEABLE = "tradeable";
  @SerializedName(SERIALIZED_NAME_TRADEABLE)
  private Boolean tradeable;

  public static final String SERIALIZED_NAME_FRACTIONABLE = "fractionable";
  @SerializedName(SERIALIZED_NAME_FRACTIONABLE)
  private Boolean fractionable;

  public static final String SERIALIZED_NAME_UNIVERSAL_SYMBOL_ID = "universal_symbol_id";
  @SerializedName(SERIALIZED_NAME_UNIVERSAL_SYMBOL_ID)
  private UUID universalSymbolId;

  public BrokerageInstrument() {
  }

  public BrokerageInstrument symbol(String symbol) {
    
    
    
    
    this.symbol = symbol;
    return this;
  }

   /**
   * The instrument&#39;s trading symbol / ticker.
   * @return symbol
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "AAPL", required = true, value = "The instrument's trading symbol / ticker.")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    
    
    
    this.symbol = symbol;
  }


  public BrokerageInstrument exchangeMic(String exchangeMic) {
    
    
    
    
    this.exchangeMic = exchangeMic;
    return this;
  }

   /**
   * The MIC code of the exchange where the instrument is traded.
   * @return exchangeMic
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "XNAS", value = "The MIC code of the exchange where the instrument is traded.")

  public String getExchangeMic() {
    return exchangeMic;
  }


  public void setExchangeMic(String exchangeMic) {
    
    
    
    this.exchangeMic = exchangeMic;
  }


  public BrokerageInstrument tradeable(Boolean tradeable) {
    
    
    
    
    this.tradeable = tradeable;
    return this;
  }

   /**
   * Whether the instrument is tradeable through the brokerage. &#x60;null&#x60; if the tradeability is unknown.
   * @return tradeable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the instrument is tradeable through the brokerage. `null` if the tradeability is unknown.")

  public Boolean getTradeable() {
    return tradeable;
  }


  public void setTradeable(Boolean tradeable) {
    
    
    
    this.tradeable = tradeable;
  }


  public BrokerageInstrument fractionable(Boolean fractionable) {
    
    
    
    
    this.fractionable = fractionable;
    return this;
  }

   /**
   * Whether the instrument allows fractional units. &#x60;null&#x60; if the fractionability is unknown.
   * @return fractionable
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the instrument allows fractional units. `null` if the fractionability is unknown.")

  public Boolean getFractionable() {
    return fractionable;
  }


  public void setFractionable(Boolean fractionable) {
    
    
    
    this.fractionable = fractionable;
  }


  public BrokerageInstrument universalSymbolId(UUID universalSymbolId) {
    
    
    
    
    this.universalSymbolId = universalSymbolId;
    return this;
  }

   /**
   * The universal symbol ID of the instrument. This is the ID used to reference the instrument in SnapTrade API calls.
   * @return universalSymbolId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2bcd7cc3-e922-4976-bce1-9858296801c3", value = "The universal symbol ID of the instrument. This is the ID used to reference the instrument in SnapTrade API calls.")

  public UUID getUniversalSymbolId() {
    return universalSymbolId;
  }


  public void setUniversalSymbolId(UUID universalSymbolId) {
    
    
    
    this.universalSymbolId = universalSymbolId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the BrokerageInstrument instance itself
   */
  public BrokerageInstrument putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BrokerageInstrument brokerageInstrument = (BrokerageInstrument) o;
    return Objects.equals(this.symbol, brokerageInstrument.symbol) &&
        Objects.equals(this.exchangeMic, brokerageInstrument.exchangeMic) &&
        Objects.equals(this.tradeable, brokerageInstrument.tradeable) &&
        Objects.equals(this.fractionable, brokerageInstrument.fractionable) &&
        Objects.equals(this.universalSymbolId, brokerageInstrument.universalSymbolId)&&
        Objects.equals(this.additionalProperties, brokerageInstrument.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(symbol, exchangeMic, tradeable, fractionable, universalSymbolId, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BrokerageInstrument {\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    exchangeMic: ").append(toIndentedString(exchangeMic)).append("\n");
    sb.append("    tradeable: ").append(toIndentedString(tradeable)).append("\n");
    sb.append("    fractionable: ").append(toIndentedString(fractionable)).append("\n");
    sb.append("    universalSymbolId: ").append(toIndentedString(universalSymbolId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("symbol");
    openapiFields.add("exchange_mic");
    openapiFields.add("tradeable");
    openapiFields.add("fractionable");
    openapiFields.add("universal_symbol_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("symbol");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BrokerageInstrument
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BrokerageInstrument.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BrokerageInstrument is not found in the empty JSON string", BrokerageInstrument.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BrokerageInstrument.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
      if (!jsonObj.get("exchange_mic").isJsonNull() && (jsonObj.get("exchange_mic") != null && !jsonObj.get("exchange_mic").isJsonNull()) && !jsonObj.get("exchange_mic").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `exchange_mic` to be a primitive type in the JSON string but got `%s`", jsonObj.get("exchange_mic").toString()));
      }
      if (!jsonObj.get("universal_symbol_id").isJsonNull() && (jsonObj.get("universal_symbol_id") != null && !jsonObj.get("universal_symbol_id").isJsonNull()) && !jsonObj.get("universal_symbol_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `universal_symbol_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("universal_symbol_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BrokerageInstrument.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BrokerageInstrument' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BrokerageInstrument> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BrokerageInstrument.class));

       return (TypeAdapter<T>) new TypeAdapter<BrokerageInstrument>() {
           @Override
           public void write(JsonWriter out, BrokerageInstrument value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else if (entry.getValue() == null) {
                   obj.addProperty(entry.getKey(), (String) null);
                 } else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public BrokerageInstrument read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             BrokerageInstrument instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BrokerageInstrument given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BrokerageInstrument
  * @throws IOException if the JSON string is invalid with respect to BrokerageInstrument
  */
  public static BrokerageInstrument fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BrokerageInstrument.class);
  }

 /**
  * Convert an instance of BrokerageInstrument to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

