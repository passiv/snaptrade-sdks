/*
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ActionStrict;
import com.konfigthis.client.model.OrderTypeStrict;
import com.konfigthis.client.model.TimeInForceStrict;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Inputs for replacing an order with the brokerage.
 */
@ApiModel(description = "Inputs for replacing an order with the brokerage.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ManualTradeReplaceForm {
  public static final String SERIALIZED_NAME_BROKERAGE_ORDER_ID = "brokerage_order_id";
  @SerializedName(SERIALIZED_NAME_BROKERAGE_ORDER_ID)
  private String brokerageOrderId;

  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private ActionStrict action;

  public static final String SERIALIZED_NAME_ORDER_TYPE = "order_type";
  @SerializedName(SERIALIZED_NAME_ORDER_TYPE)
  private OrderTypeStrict orderType;

  public static final String SERIALIZED_NAME_TIME_IN_FORCE = "time_in_force";
  @SerializedName(SERIALIZED_NAME_TIME_IN_FORCE)
  private TimeInForceStrict timeInForce;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private Double price;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_STOP = "stop";
  @SerializedName(SERIALIZED_NAME_STOP)
  private Double stop;

  public static final String SERIALIZED_NAME_UNITS = "units";
  @SerializedName(SERIALIZED_NAME_UNITS)
  private Double units;

  public ManualTradeReplaceForm() {
  }

  public ManualTradeReplaceForm brokerageOrderId(String brokerageOrderId) {
    
    
    
    
    this.brokerageOrderId = brokerageOrderId;
    return this;
  }

   /**
   * Order ID returned by brokerage. This is the unique identifier for the order in the brokerage system.
   * @return brokerageOrderId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "66a033fa-da74-4fcf-b527-feefdec9257e", required = true, value = "Order ID returned by brokerage. This is the unique identifier for the order in the brokerage system.")

  public String getBrokerageOrderId() {
    return brokerageOrderId;
  }


  public void setBrokerageOrderId(String brokerageOrderId) {
    
    
    
    this.brokerageOrderId = brokerageOrderId;
  }


  public ManualTradeReplaceForm action(ActionStrict action) {
    
    
    
    
    this.action = action;
    return this;
  }

   /**
   * Get action
   * @return action
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ActionStrict getAction() {
    return action;
  }


  public void setAction(ActionStrict action) {
    
    
    
    this.action = action;
  }


  public ManualTradeReplaceForm orderType(OrderTypeStrict orderType) {
    
    
    
    
    this.orderType = orderType;
    return this;
  }

   /**
   * Get orderType
   * @return orderType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OrderTypeStrict getOrderType() {
    return orderType;
  }


  public void setOrderType(OrderTypeStrict orderType) {
    
    
    
    this.orderType = orderType;
  }


  public ManualTradeReplaceForm timeInForce(TimeInForceStrict timeInForce) {
    
    
    
    
    this.timeInForce = timeInForce;
    return this;
  }

   /**
   * Get timeInForce
   * @return timeInForce
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public TimeInForceStrict getTimeInForce() {
    return timeInForce;
  }


  public void setTimeInForce(TimeInForceStrict timeInForce) {
    
    
    
    this.timeInForce = timeInForce;
  }


  public ManualTradeReplaceForm price(Double price) {
    
    
    
    
    this.price = price;
    return this;
  }

  public ManualTradeReplaceForm price(Integer price) {
    
    
    
    
    this.price = price.doubleValue();
    return this;
  }

   /**
   * The limit price for &#x60;Limit&#x60; and &#x60;StopLimit&#x60; orders.
   * @return price
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "31.33", value = "The limit price for `Limit` and `StopLimit` orders.")

  public Double getPrice() {
    return price;
  }


  public void setPrice(Double price) {
    
    
    
    this.price = price;
  }


  public ManualTradeReplaceForm symbol(String symbol) {
    
    
    
    
    this.symbol = symbol;
    return this;
  }

   /**
   * The security&#39;s trading ticker symbol
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "AAPL", value = "The security's trading ticker symbol")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    
    
    
    this.symbol = symbol;
  }


  public ManualTradeReplaceForm stop(Double stop) {
    
    
    
    
    this.stop = stop;
    return this;
  }

  public ManualTradeReplaceForm stop(Integer stop) {
    
    
    
    
    this.stop = stop.doubleValue();
    return this;
  }

   /**
   * The price at which a stop order is triggered for &#x60;Stop&#x60; and &#x60;StopLimit&#x60; orders.
   * @return stop
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "31.33", value = "The price at which a stop order is triggered for `Stop` and `StopLimit` orders.")

  public Double getStop() {
    return stop;
  }


  public void setStop(Double stop) {
    
    
    
    this.stop = stop;
  }


  public ManualTradeReplaceForm units(Double units) {
    
    
    
    
    this.units = units;
    return this;
  }

  public ManualTradeReplaceForm units(Integer units) {
    
    
    
    
    this.units = units.doubleValue();
    return this;
  }

   /**
   * Number of shares for the order. This can be a decimal for fractional orders. Must be &#x60;null&#x60; if &#x60;notional_value&#x60; is provided.
   * @return units
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "10.5", value = "Number of shares for the order. This can be a decimal for fractional orders. Must be `null` if `notional_value` is provided.")

  public Double getUnits() {
    return units;
  }


  public void setUnits(Double units) {
    
    
    
    this.units = units;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ManualTradeReplaceForm instance itself
   */
  public ManualTradeReplaceForm putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ManualTradeReplaceForm manualTradeReplaceForm = (ManualTradeReplaceForm) o;
    return Objects.equals(this.brokerageOrderId, manualTradeReplaceForm.brokerageOrderId) &&
        Objects.equals(this.action, manualTradeReplaceForm.action) &&
        Objects.equals(this.orderType, manualTradeReplaceForm.orderType) &&
        Objects.equals(this.timeInForce, manualTradeReplaceForm.timeInForce) &&
        Objects.equals(this.price, manualTradeReplaceForm.price) &&
        Objects.equals(this.symbol, manualTradeReplaceForm.symbol) &&
        Objects.equals(this.stop, manualTradeReplaceForm.stop) &&
        Objects.equals(this.units, manualTradeReplaceForm.units)&&
        Objects.equals(this.additionalProperties, manualTradeReplaceForm.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(brokerageOrderId, action, orderType, timeInForce, price, symbol, stop, units, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ManualTradeReplaceForm {\n");
    sb.append("    brokerageOrderId: ").append(toIndentedString(brokerageOrderId)).append("\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    orderType: ").append(toIndentedString(orderType)).append("\n");
    sb.append("    timeInForce: ").append(toIndentedString(timeInForce)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    stop: ").append(toIndentedString(stop)).append("\n");
    sb.append("    units: ").append(toIndentedString(units)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("brokerage_order_id");
    openapiFields.add("action");
    openapiFields.add("order_type");
    openapiFields.add("time_in_force");
    openapiFields.add("price");
    openapiFields.add("symbol");
    openapiFields.add("stop");
    openapiFields.add("units");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("brokerage_order_id");
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("order_type");
    openapiRequiredFields.add("time_in_force");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ManualTradeReplaceForm
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ManualTradeReplaceForm.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ManualTradeReplaceForm is not found in the empty JSON string", ManualTradeReplaceForm.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ManualTradeReplaceForm.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("brokerage_order_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brokerage_order_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brokerage_order_id").toString()));
      }
      if ((jsonObj.get("symbol") != null && !jsonObj.get("symbol").isJsonNull()) && !jsonObj.get("symbol").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `symbol` to be a primitive type in the JSON string but got `%s`", jsonObj.get("symbol").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ManualTradeReplaceForm.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ManualTradeReplaceForm' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ManualTradeReplaceForm> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ManualTradeReplaceForm.class));

       return (TypeAdapter<T>) new TypeAdapter<ManualTradeReplaceForm>() {
           @Override
           public void write(JsonWriter out, ManualTradeReplaceForm value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else if (entry.getValue() == null) {
                   obj.addProperty(entry.getKey(), (String) null);
                 } else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ManualTradeReplaceForm read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ManualTradeReplaceForm instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ManualTradeReplaceForm given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ManualTradeReplaceForm
  * @throws IOException if the JSON string is invalid with respect to ManualTradeReplaceForm
  */
  public static ManualTradeReplaceForm fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ManualTradeReplaceForm.class);
  }

 /**
  * Convert an instance of ManualTradeReplaceForm to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

