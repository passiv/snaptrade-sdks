/*
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.AccountOrderRecord;
import com.konfigthis.client.model.ActionStrict;
import java.math.BigDecimal;
import com.konfigthis.client.model.CryptoSpotOrderPreview;
import com.konfigthis.client.model.CryptoSpotQuote;
import com.konfigthis.client.model.CryptocurrencyMarket;
import com.konfigthis.client.model.CryptocurrencyPair;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.TradingCryptoSpotPlaceOrderRequest;
import com.konfigthis.client.model.TradingCryptoSpotQuoteRequest;
import com.konfigthis.client.model.TradingCryptoSpotSearchMarketsRequest;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CryptoSpotTradingApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CryptoSpotTradingApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CryptoSpotTradingApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cryptoSpotPlaceOrderCall(String userId, String userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tradingCryptoSpotPlaceOrderRequest;

        // create path and map variables
        String localVarPath = "/trading/crypto/spot/placeOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userSecret", userSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cryptoSpotPlaceOrderValidateBeforeCall(String userId, String userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling cryptoSpotPlaceOrder(Async)");
        }

        // verify the required parameter 'userSecret' is set
        if (userSecret == null) {
            throw new ApiException("Missing the required parameter 'userSecret' when calling cryptoSpotPlaceOrder(Async)");
        }

        // verify the required parameter 'tradingCryptoSpotPlaceOrderRequest' is set
        if (tradingCryptoSpotPlaceOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'tradingCryptoSpotPlaceOrderRequest' when calling cryptoSpotPlaceOrder(Async)");
        }

        return cryptoSpotPlaceOrderCall(userId, userSecret, tradingCryptoSpotPlaceOrderRequest, _callback);

    }


    private ApiResponse<AccountOrderRecord> cryptoSpotPlaceOrderWithHttpInfo(String userId, String userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = cryptoSpotPlaceOrderValidateBeforeCall(userId, userSecret, tradingCryptoSpotPlaceOrderRequest, null);
        Type localVarReturnType = new TypeToken<AccountOrderRecord>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cryptoSpotPlaceOrderAsync(String userId, String userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, final ApiCallback<AccountOrderRecord> _callback) throws ApiException {

        okhttp3.Call localVarCall = cryptoSpotPlaceOrderValidateBeforeCall(userId, userSecret, tradingCryptoSpotPlaceOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<AccountOrderRecord>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class CryptoSpotPlaceOrderRequestBuilderGenerated {
        final UUID accountId;
        final CryptocurrencyPair symbol;
        final ActionStrict side;
        final String type;
        final String timeInForce;
        final BigDecimal amount;
        final String userId;
        final String userSecret;
        BigDecimal limitPrice;
        BigDecimal stopPrice;
        Boolean postOnly;
        OffsetDateTime expirationDate;

        public CryptoSpotPlaceOrderRequestBuilderGenerated(UUID accountId, CryptocurrencyPair symbol, ActionStrict side, String type, String timeInForce, BigDecimal amount, String userId, String userSecret) {
            this.accountId = accountId;
            this.symbol = symbol;
            this.side = side;
            this.type = type;
            this.timeInForce = timeInForce;
            this.amount = amount;
            this.userId = userId;
            this.userSecret = userSecret;
        }

        /**
         * Set limitPrice
         * @param limitPrice The limit price. Required if the order type is LIMIT, STOP_LOSS_LIMIT or TAKE_PROFIT_LIMIT. (optional)
         * @return CryptoSpotTradingApi.CryptoSpotPlaceOrderRequestBuilder
         */
        public CryptoSpotTradingApi.CryptoSpotPlaceOrderRequestBuilder limitPrice(BigDecimal limitPrice) {
            this.limitPrice = limitPrice;
            return (CryptoSpotTradingApi.CryptoSpotPlaceOrderRequestBuilder) this;
        }
        
        /**
         * Set stopPrice
         * @param stopPrice The stop price. Required if the order type is STOP_LOSS_MARKET, STOP_LOSS_LIMIT, TAKE_PROFIT_MARKET or TAKE_PROFIT_LIMIT. (optional)
         * @return CryptoSpotTradingApi.CryptoSpotPlaceOrderRequestBuilder
         */
        public CryptoSpotTradingApi.CryptoSpotPlaceOrderRequestBuilder stopPrice(BigDecimal stopPrice) {
            this.stopPrice = stopPrice;
            return (CryptoSpotTradingApi.CryptoSpotPlaceOrderRequestBuilder) this;
        }
        
        /**
         * Set postOnly
         * @param postOnly Required for order type LIMIT. If true orders that would be filled immediately are rejected to avoid incurring TAKER fees. (optional)
         * @return CryptoSpotTradingApi.CryptoSpotPlaceOrderRequestBuilder
         */
        public CryptoSpotTradingApi.CryptoSpotPlaceOrderRequestBuilder postOnly(Boolean postOnly) {
            this.postOnly = postOnly;
            return (CryptoSpotTradingApi.CryptoSpotPlaceOrderRequestBuilder) this;
        }
        
        /**
         * Set expirationDate
         * @param expirationDate The expiration date of the order. Required if the time_in_force is GTD. (optional)
         * @return CryptoSpotTradingApi.CryptoSpotPlaceOrderRequestBuilder
         */
        public CryptoSpotTradingApi.CryptoSpotPlaceOrderRequestBuilder expirationDate(OffsetDateTime expirationDate) {
            this.expirationDate = expirationDate;
            return (CryptoSpotTradingApi.CryptoSpotPlaceOrderRequestBuilder) this;
        }
        
        /**
         * Build call for cryptoSpotPlaceOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest = buildBodyParams();
            return cryptoSpotPlaceOrderCall(userId, userSecret, tradingCryptoSpotPlaceOrderRequest, _callback);
        }

        private TradingCryptoSpotPlaceOrderRequest buildBodyParams() {
            TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest = new TradingCryptoSpotPlaceOrderRequest();
            tradingCryptoSpotPlaceOrderRequest.accountId(this.accountId);
            tradingCryptoSpotPlaceOrderRequest.symbol(this.symbol);
            tradingCryptoSpotPlaceOrderRequest.side(this.side);
            if (this.type != null)
            tradingCryptoSpotPlaceOrderRequest.type(TradingCryptoSpotPlaceOrderRequest.TypeEnum.fromValue(this.type));
            if (this.timeInForce != null)
            tradingCryptoSpotPlaceOrderRequest.timeInForce(TradingCryptoSpotPlaceOrderRequest.TimeInForceEnum.fromValue(this.timeInForce));
            tradingCryptoSpotPlaceOrderRequest.amount(this.amount);
            tradingCryptoSpotPlaceOrderRequest.limitPrice(this.limitPrice);
            tradingCryptoSpotPlaceOrderRequest.stopPrice(this.stopPrice);
            tradingCryptoSpotPlaceOrderRequest.postOnly(this.postOnly);
            tradingCryptoSpotPlaceOrderRequest.expirationDate(this.expirationDate);
            return tradingCryptoSpotPlaceOrderRequest;
        }

        /**
         * Execute cryptoSpotPlaceOrder request
         * @return AccountOrderRecord
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public AccountOrderRecord execute() throws ApiException {
            TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest = buildBodyParams();
            ApiResponse<AccountOrderRecord> localVarResp = cryptoSpotPlaceOrderWithHttpInfo(userId, userSecret, tradingCryptoSpotPlaceOrderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cryptoSpotPlaceOrder request with HTTP info returned
         * @return ApiResponse&lt;AccountOrderRecord&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AccountOrderRecord> executeWithHttpInfo() throws ApiException {
            TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest = buildBodyParams();
            return cryptoSpotPlaceOrderWithHttpInfo(userId, userSecret, tradingCryptoSpotPlaceOrderRequest);
        }

        /**
         * Execute cryptoSpotPlaceOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AccountOrderRecord> _callback) throws ApiException {
            TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest = buildBodyParams();
            return cryptoSpotPlaceOrderAsync(userId, userSecret, tradingCryptoSpotPlaceOrderRequest, _callback);
        }
    }

    /**
     * Place a spot order on a crypto exchange
     * Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange. 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param tradingCryptoSpotPlaceOrderRequest  (required)
     * @return CryptoSpotPlaceOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public CryptoSpotTradingApi.CryptoSpotPlaceOrderRequestBuilder cryptoSpotPlaceOrder(UUID accountId, CryptocurrencyPair symbol, ActionStrict side, String type, String timeInForce, BigDecimal amount, String userId, String userSecret) throws IllegalArgumentException {
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        if (symbol == null) throw new IllegalArgumentException("\"symbol\" is required but got null");
        if (side == null) throw new IllegalArgumentException("\"side\" is required but got null");
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (timeInForce == null) throw new IllegalArgumentException("\"timeInForce\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (userSecret == null) throw new IllegalArgumentException("\"userSecret\" is required but got null");
            

        return ((CryptoSpotTradingApi) this).new CryptoSpotPlaceOrderRequestBuilder(accountId, symbol, side, type, timeInForce, amount, userId, userSecret);
    }
    private okhttp3.Call cryptoSpotPreviewOrderCall(String userId, String userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tradingCryptoSpotPlaceOrderRequest;

        // create path and map variables
        String localVarPath = "/trading/crypto/spot/previewOrder";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userSecret", userSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cryptoSpotPreviewOrderValidateBeforeCall(String userId, String userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling cryptoSpotPreviewOrder(Async)");
        }

        // verify the required parameter 'userSecret' is set
        if (userSecret == null) {
            throw new ApiException("Missing the required parameter 'userSecret' when calling cryptoSpotPreviewOrder(Async)");
        }

        // verify the required parameter 'tradingCryptoSpotPlaceOrderRequest' is set
        if (tradingCryptoSpotPlaceOrderRequest == null) {
            throw new ApiException("Missing the required parameter 'tradingCryptoSpotPlaceOrderRequest' when calling cryptoSpotPreviewOrder(Async)");
        }

        return cryptoSpotPreviewOrderCall(userId, userSecret, tradingCryptoSpotPlaceOrderRequest, _callback);

    }


    private ApiResponse<CryptoSpotOrderPreview> cryptoSpotPreviewOrderWithHttpInfo(String userId, String userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest) throws ApiException {
        okhttp3.Call localVarCall = cryptoSpotPreviewOrderValidateBeforeCall(userId, userSecret, tradingCryptoSpotPlaceOrderRequest, null);
        Type localVarReturnType = new TypeToken<CryptoSpotOrderPreview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cryptoSpotPreviewOrderAsync(String userId, String userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, final ApiCallback<CryptoSpotOrderPreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = cryptoSpotPreviewOrderValidateBeforeCall(userId, userSecret, tradingCryptoSpotPlaceOrderRequest, _callback);
        Type localVarReturnType = new TypeToken<CryptoSpotOrderPreview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class CryptoSpotPreviewOrderRequestBuilderGenerated {
        final UUID accountId;
        final CryptocurrencyPair symbol;
        final ActionStrict side;
        final String type;
        final String timeInForce;
        final BigDecimal amount;
        final String userId;
        final String userSecret;
        BigDecimal limitPrice;
        BigDecimal stopPrice;
        Boolean postOnly;
        OffsetDateTime expirationDate;

        public CryptoSpotPreviewOrderRequestBuilderGenerated(UUID accountId, CryptocurrencyPair symbol, ActionStrict side, String type, String timeInForce, BigDecimal amount, String userId, String userSecret) {
            this.accountId = accountId;
            this.symbol = symbol;
            this.side = side;
            this.type = type;
            this.timeInForce = timeInForce;
            this.amount = amount;
            this.userId = userId;
            this.userSecret = userSecret;
        }

        /**
         * Set limitPrice
         * @param limitPrice The limit price. Required if the order type is LIMIT, STOP_LOSS_LIMIT or TAKE_PROFIT_LIMIT. (optional)
         * @return CryptoSpotTradingApi.CryptoSpotPreviewOrderRequestBuilder
         */
        public CryptoSpotTradingApi.CryptoSpotPreviewOrderRequestBuilder limitPrice(BigDecimal limitPrice) {
            this.limitPrice = limitPrice;
            return (CryptoSpotTradingApi.CryptoSpotPreviewOrderRequestBuilder) this;
        }
        
        /**
         * Set stopPrice
         * @param stopPrice The stop price. Required if the order type is STOP_LOSS_MARKET, STOP_LOSS_LIMIT, TAKE_PROFIT_MARKET or TAKE_PROFIT_LIMIT. (optional)
         * @return CryptoSpotTradingApi.CryptoSpotPreviewOrderRequestBuilder
         */
        public CryptoSpotTradingApi.CryptoSpotPreviewOrderRequestBuilder stopPrice(BigDecimal stopPrice) {
            this.stopPrice = stopPrice;
            return (CryptoSpotTradingApi.CryptoSpotPreviewOrderRequestBuilder) this;
        }
        
        /**
         * Set postOnly
         * @param postOnly Required for order type LIMIT. If true orders that would be filled immediately are rejected to avoid incurring TAKER fees. (optional)
         * @return CryptoSpotTradingApi.CryptoSpotPreviewOrderRequestBuilder
         */
        public CryptoSpotTradingApi.CryptoSpotPreviewOrderRequestBuilder postOnly(Boolean postOnly) {
            this.postOnly = postOnly;
            return (CryptoSpotTradingApi.CryptoSpotPreviewOrderRequestBuilder) this;
        }
        
        /**
         * Set expirationDate
         * @param expirationDate The expiration date of the order. Required if the time_in_force is GTD. (optional)
         * @return CryptoSpotTradingApi.CryptoSpotPreviewOrderRequestBuilder
         */
        public CryptoSpotTradingApi.CryptoSpotPreviewOrderRequestBuilder expirationDate(OffsetDateTime expirationDate) {
            this.expirationDate = expirationDate;
            return (CryptoSpotTradingApi.CryptoSpotPreviewOrderRequestBuilder) this;
        }
        
        /**
         * Build call for cryptoSpotPreviewOrder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest = buildBodyParams();
            return cryptoSpotPreviewOrderCall(userId, userSecret, tradingCryptoSpotPlaceOrderRequest, _callback);
        }

        private TradingCryptoSpotPlaceOrderRequest buildBodyParams() {
            TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest = new TradingCryptoSpotPlaceOrderRequest();
            tradingCryptoSpotPlaceOrderRequest.accountId(this.accountId);
            tradingCryptoSpotPlaceOrderRequest.symbol(this.symbol);
            tradingCryptoSpotPlaceOrderRequest.side(this.side);
            if (this.type != null)
            tradingCryptoSpotPlaceOrderRequest.type(TradingCryptoSpotPlaceOrderRequest.TypeEnum.fromValue(this.type));
            if (this.timeInForce != null)
            tradingCryptoSpotPlaceOrderRequest.timeInForce(TradingCryptoSpotPlaceOrderRequest.TimeInForceEnum.fromValue(this.timeInForce));
            tradingCryptoSpotPlaceOrderRequest.amount(this.amount);
            tradingCryptoSpotPlaceOrderRequest.limitPrice(this.limitPrice);
            tradingCryptoSpotPlaceOrderRequest.stopPrice(this.stopPrice);
            tradingCryptoSpotPlaceOrderRequest.postOnly(this.postOnly);
            tradingCryptoSpotPlaceOrderRequest.expirationDate(this.expirationDate);
            return tradingCryptoSpotPlaceOrderRequest;
        }

        /**
         * Execute cryptoSpotPreviewOrder request
         * @return CryptoSpotOrderPreview
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public CryptoSpotOrderPreview execute() throws ApiException {
            TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest = buildBodyParams();
            ApiResponse<CryptoSpotOrderPreview> localVarResp = cryptoSpotPreviewOrderWithHttpInfo(userId, userSecret, tradingCryptoSpotPlaceOrderRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cryptoSpotPreviewOrder request with HTTP info returned
         * @return ApiResponse&lt;CryptoSpotOrderPreview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CryptoSpotOrderPreview> executeWithHttpInfo() throws ApiException {
            TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest = buildBodyParams();
            return cryptoSpotPreviewOrderWithHttpInfo(userId, userSecret, tradingCryptoSpotPlaceOrderRequest);
        }

        /**
         * Execute cryptoSpotPreviewOrder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CryptoSpotOrderPreview> _callback) throws ApiException {
            TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest = buildBodyParams();
            return cryptoSpotPreviewOrderAsync(userId, userSecret, tradingCryptoSpotPlaceOrderRequest, _callback);
        }
    }

    /**
     * Place a spot order on a crypto exchange
     * Previews a cryptocurrency spot order using the specified account. 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param tradingCryptoSpotPlaceOrderRequest  (required)
     * @return CryptoSpotPreviewOrderRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public CryptoSpotTradingApi.CryptoSpotPreviewOrderRequestBuilder cryptoSpotPreviewOrder(UUID accountId, CryptocurrencyPair symbol, ActionStrict side, String type, String timeInForce, BigDecimal amount, String userId, String userSecret) throws IllegalArgumentException {
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        if (symbol == null) throw new IllegalArgumentException("\"symbol\" is required but got null");
        if (side == null) throw new IllegalArgumentException("\"side\" is required but got null");
        if (type == null) throw new IllegalArgumentException("\"type\" is required but got null");
            

        if (timeInForce == null) throw new IllegalArgumentException("\"timeInForce\" is required but got null");
            

        if (amount == null) throw new IllegalArgumentException("\"amount\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (userSecret == null) throw new IllegalArgumentException("\"userSecret\" is required but got null");
            

        return ((CryptoSpotTradingApi) this).new CryptoSpotPreviewOrderRequestBuilder(accountId, symbol, side, type, timeInForce, amount, userId, userSecret);
    }
    private okhttp3.Call cryptoSpotQuoteCall(String userId, String userSecret, TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tradingCryptoSpotQuoteRequest;

        // create path and map variables
        String localVarPath = "/trading/crypto/spot/quote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userSecret", userSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cryptoSpotQuoteValidateBeforeCall(String userId, String userSecret, TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling cryptoSpotQuote(Async)");
        }

        // verify the required parameter 'userSecret' is set
        if (userSecret == null) {
            throw new ApiException("Missing the required parameter 'userSecret' when calling cryptoSpotQuote(Async)");
        }

        // verify the required parameter 'tradingCryptoSpotQuoteRequest' is set
        if (tradingCryptoSpotQuoteRequest == null) {
            throw new ApiException("Missing the required parameter 'tradingCryptoSpotQuoteRequest' when calling cryptoSpotQuote(Async)");
        }

        return cryptoSpotQuoteCall(userId, userSecret, tradingCryptoSpotQuoteRequest, _callback);

    }


    private ApiResponse<CryptoSpotQuote> cryptoSpotQuoteWithHttpInfo(String userId, String userSecret, TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest) throws ApiException {
        okhttp3.Call localVarCall = cryptoSpotQuoteValidateBeforeCall(userId, userSecret, tradingCryptoSpotQuoteRequest, null);
        Type localVarReturnType = new TypeToken<CryptoSpotQuote>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cryptoSpotQuoteAsync(String userId, String userSecret, TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest, final ApiCallback<CryptoSpotQuote> _callback) throws ApiException {

        okhttp3.Call localVarCall = cryptoSpotQuoteValidateBeforeCall(userId, userSecret, tradingCryptoSpotQuoteRequest, _callback);
        Type localVarReturnType = new TypeToken<CryptoSpotQuote>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class CryptoSpotQuoteRequestBuilderGenerated {
        final UUID accountId;
        final CryptocurrencyPair symbol;
        final String userId;
        final String userSecret;

        public CryptoSpotQuoteRequestBuilderGenerated(UUID accountId, CryptocurrencyPair symbol, String userId, String userSecret) {
            this.accountId = accountId;
            this.symbol = symbol;
            this.userId = userId;
            this.userSecret = userSecret;
        }

        /**
         * Build call for cryptoSpotQuote
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest = buildBodyParams();
            return cryptoSpotQuoteCall(userId, userSecret, tradingCryptoSpotQuoteRequest, _callback);
        }

        private TradingCryptoSpotQuoteRequest buildBodyParams() {
            TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest = new TradingCryptoSpotQuoteRequest();
            tradingCryptoSpotQuoteRequest.accountId(this.accountId);
            tradingCryptoSpotQuoteRequest.symbol(this.symbol);
            return tradingCryptoSpotQuoteRequest;
        }

        /**
         * Execute cryptoSpotQuote request
         * @return CryptoSpotQuote
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public CryptoSpotQuote execute() throws ApiException {
            TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest = buildBodyParams();
            ApiResponse<CryptoSpotQuote> localVarResp = cryptoSpotQuoteWithHttpInfo(userId, userSecret, tradingCryptoSpotQuoteRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cryptoSpotQuote request with HTTP info returned
         * @return ApiResponse&lt;CryptoSpotQuote&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CryptoSpotQuote> executeWithHttpInfo() throws ApiException {
            TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest = buildBodyParams();
            return cryptoSpotQuoteWithHttpInfo(userId, userSecret, tradingCryptoSpotQuoteRequest);
        }

        /**
         * Execute cryptoSpotQuote request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CryptoSpotQuote> _callback) throws ApiException {
            TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest = buildBodyParams();
            return cryptoSpotQuoteAsync(userId, userSecret, tradingCryptoSpotQuoteRequest, _callback);
        }
    }

    /**
     * Get a quote for a cyrptocurrency market
     * Gets a quote for the specified account. 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param tradingCryptoSpotQuoteRequest  (required)
     * @return CryptoSpotQuoteRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public CryptoSpotTradingApi.CryptoSpotQuoteRequestBuilder cryptoSpotQuote(UUID accountId, CryptocurrencyPair symbol, String userId, String userSecret) throws IllegalArgumentException {
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        if (symbol == null) throw new IllegalArgumentException("\"symbol\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (userSecret == null) throw new IllegalArgumentException("\"userSecret\" is required but got null");
            

        return ((CryptoSpotTradingApi) this).new CryptoSpotQuoteRequestBuilder(accountId, symbol, userId, userSecret);
    }
    private okhttp3.Call cryptoSpotSearchMarketsCall(String userId, String userSecret, TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tradingCryptoSpotSearchMarketsRequest;

        // create path and map variables
        String localVarPath = "/trading/crypto/spot/searchMarkets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (userId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userId", userId));
        }

        if (userSecret != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("userSecret", userSecret));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "PartnerClientId", "PartnerSignature", "PartnerTimestamp" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cryptoSpotSearchMarketsValidateBeforeCall(String userId, String userSecret, TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling cryptoSpotSearchMarkets(Async)");
        }

        // verify the required parameter 'userSecret' is set
        if (userSecret == null) {
            throw new ApiException("Missing the required parameter 'userSecret' when calling cryptoSpotSearchMarkets(Async)");
        }

        // verify the required parameter 'tradingCryptoSpotSearchMarketsRequest' is set
        if (tradingCryptoSpotSearchMarketsRequest == null) {
            throw new ApiException("Missing the required parameter 'tradingCryptoSpotSearchMarketsRequest' when calling cryptoSpotSearchMarkets(Async)");
        }

        return cryptoSpotSearchMarketsCall(userId, userSecret, tradingCryptoSpotSearchMarketsRequest, _callback);

    }


    private ApiResponse<List<CryptocurrencyMarket>> cryptoSpotSearchMarketsWithHttpInfo(String userId, String userSecret, TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest) throws ApiException {
        okhttp3.Call localVarCall = cryptoSpotSearchMarketsValidateBeforeCall(userId, userSecret, tradingCryptoSpotSearchMarketsRequest, null);
        Type localVarReturnType = new TypeToken<List<CryptocurrencyMarket>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cryptoSpotSearchMarketsAsync(String userId, String userSecret, TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest, final ApiCallback<List<CryptocurrencyMarket>> _callback) throws ApiException {

        okhttp3.Call localVarCall = cryptoSpotSearchMarketsValidateBeforeCall(userId, userSecret, tradingCryptoSpotSearchMarketsRequest, _callback);
        Type localVarReturnType = new TypeToken<List<CryptocurrencyMarket>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public abstract class CryptoSpotSearchMarketsRequestBuilderGenerated {
        final UUID accountId;
        final String base;
        final String userId;
        final String userSecret;
        String quote;

        public CryptoSpotSearchMarketsRequestBuilderGenerated(UUID accountId, String base, String userId, String userSecret) {
            this.accountId = accountId;
            this.base = base;
            this.userId = userId;
            this.userSecret = userSecret;
        }

        /**
         * Set quote
         * @param quote The quote currency (e.g., \\\&quot;USD\\\&quot; in BTC/USD). Can be a fiat or crypto code. (optional)
         * @return CryptoSpotTradingApi.CryptoSpotSearchMarketsRequestBuilder
         */
        public CryptoSpotTradingApi.CryptoSpotSearchMarketsRequestBuilder quote(String quote) {
            this.quote = quote;
            return (CryptoSpotTradingApi.CryptoSpotSearchMarketsRequestBuilder) this;
        }
        
        /**
         * Build call for cryptoSpotSearchMarkets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest = buildBodyParams();
            return cryptoSpotSearchMarketsCall(userId, userSecret, tradingCryptoSpotSearchMarketsRequest, _callback);
        }

        private TradingCryptoSpotSearchMarketsRequest buildBodyParams() {
            TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest = new TradingCryptoSpotSearchMarketsRequest();
            tradingCryptoSpotSearchMarketsRequest.accountId(this.accountId);
            tradingCryptoSpotSearchMarketsRequest.base(this.base);
            tradingCryptoSpotSearchMarketsRequest.quote(this.quote);
            return tradingCryptoSpotSearchMarketsRequest;
        }

        /**
         * Execute cryptoSpotSearchMarkets request
         * @return List&lt;CryptocurrencyMarket&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public List<CryptocurrencyMarket> execute() throws ApiException {
            TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest = buildBodyParams();
            ApiResponse<List<CryptocurrencyMarket>> localVarResp = cryptoSpotSearchMarketsWithHttpInfo(userId, userSecret, tradingCryptoSpotSearchMarketsRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute cryptoSpotSearchMarkets request with HTTP info returned
         * @return ApiResponse&lt;List&lt;CryptocurrencyMarket&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<CryptocurrencyMarket>> executeWithHttpInfo() throws ApiException {
            TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest = buildBodyParams();
            return cryptoSpotSearchMarketsWithHttpInfo(userId, userSecret, tradingCryptoSpotSearchMarketsRequest);
        }

        /**
         * Execute cryptoSpotSearchMarkets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<CryptocurrencyMarket>> _callback) throws ApiException {
            TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest = buildBodyParams();
            return cryptoSpotSearchMarketsAsync(userId, userSecret, tradingCryptoSpotSearchMarketsRequest, _callback);
        }
    }

    /**
     * Search crypto spot markets
     * Searches cryptocurrency spot markets accessible to the specified account. 
     * @param userId  (required)
     * @param userSecret  (required)
     * @param tradingCryptoSpotSearchMarketsRequest  (required)
     * @return CryptoSpotSearchMarketsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unexpected Error </td><td>  -  </td></tr>
     </table>
     */
    public CryptoSpotTradingApi.CryptoSpotSearchMarketsRequestBuilder cryptoSpotSearchMarkets(UUID accountId, String base, String userId, String userSecret) throws IllegalArgumentException {
        if (accountId == null) throw new IllegalArgumentException("\"accountId\" is required but got null");
            

        if (base == null) throw new IllegalArgumentException("\"base\" is required but got null");
        if (userId == null) throw new IllegalArgumentException("\"userId\" is required but got null");
            

        if (userSecret == null) throw new IllegalArgumentException("\"userSecret\" is required but got null");
            

        return ((CryptoSpotTradingApi) this).new CryptoSpotSearchMarketsRequestBuilder(accountId, base, userId, userSecret);
    }
}
