/*
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Account;
import com.konfigthis.client.model.AccountOrderRecord;
import com.konfigthis.client.model.Balance;
import com.konfigthis.client.model.OptionsPosition;
import com.konfigthis.client.model.Position;
import com.konfigthis.client.model.SnapTradeHoldingsTotalValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * A wrapper object containing holdings information for a single account.
 */
@ApiModel(description = "A wrapper object containing holdings information for a single account.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class AccountHoldingsAccount {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private Account account;

  public static final String SERIALIZED_NAME_BALANCES = "balances";
  @SerializedName(SERIALIZED_NAME_BALANCES)
  private List<Balance> balances = null;

  public static final String SERIALIZED_NAME_POSITIONS = "positions";
  @SerializedName(SERIALIZED_NAME_POSITIONS)
  private List<Position> positions = null;

  public static final String SERIALIZED_NAME_OPTION_POSITIONS = "option_positions";
  @SerializedName(SERIALIZED_NAME_OPTION_POSITIONS)
  private List<OptionsPosition> optionPositions = null;

  public static final String SERIALIZED_NAME_ORDERS = "orders";
  @SerializedName(SERIALIZED_NAME_ORDERS)
  private List<AccountOrderRecord> orders = null;

  public static final String SERIALIZED_NAME_TOTAL_VALUE = "total_value";
  @SerializedName(SERIALIZED_NAME_TOTAL_VALUE)
  private SnapTradeHoldingsTotalValue totalValue;

  public AccountHoldingsAccount() {
  }

  public AccountHoldingsAccount account(Account account) {
    
    
    
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Account getAccount() {
    return account;
  }


  public void setAccount(Account account) {
    
    
    
    this.account = account;
  }


  public AccountHoldingsAccount balances(List<Balance> balances) {
    
    
    
    
    this.balances = balances;
    return this;
  }

  public AccountHoldingsAccount addBalancesItem(Balance balancesItem) {
    if (this.balances == null) {
      this.balances = new ArrayList<>();
    }
    this.balances.add(balancesItem);
    return this;
  }

   /**
   * List of balances for the account. Each element of the list has a distinct currency. Some brokerages like Questrade [allows holding multiple currencies in the same account](https://www.questrade.com/learning/questrade-basics/balances-and-reports/understanding-your-account-balances).
   * @return balances
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of balances for the account. Each element of the list has a distinct currency. Some brokerages like Questrade [allows holding multiple currencies in the same account](https://www.questrade.com/learning/questrade-basics/balances-and-reports/understanding-your-account-balances).")

  public List<Balance> getBalances() {
    return balances;
  }


  public void setBalances(List<Balance> balances) {
    
    
    
    this.balances = balances;
  }


  public AccountHoldingsAccount positions(List<Position> positions) {
    
    
    
    
    this.positions = positions;
    return this;
  }

  public AccountHoldingsAccount addPositionsItem(Position positionsItem) {
    if (this.positions == null) {
      this.positions = new ArrayList<>();
    }
    this.positions.add(positionsItem);
    return this;
  }

   /**
   * List of stock/ETF/crypto/mutual fund positions in the account.
   * @return positions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of stock/ETF/crypto/mutual fund positions in the account.")

  public List<Position> getPositions() {
    return positions;
  }


  public void setPositions(List<Position> positions) {
    
    
    
    this.positions = positions;
  }


  public AccountHoldingsAccount optionPositions(List<OptionsPosition> optionPositions) {
    
    
    
    
    this.optionPositions = optionPositions;
    return this;
  }

  public AccountHoldingsAccount addOptionPositionsItem(OptionsPosition optionPositionsItem) {
    if (this.optionPositions == null) {
      this.optionPositions = new ArrayList<>();
    }
    this.optionPositions.add(optionPositionsItem);
    return this;
  }

   /**
   * List of option positions in the account.
   * @return optionPositions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of option positions in the account.")

  public List<OptionsPosition> getOptionPositions() {
    return optionPositions;
  }


  public void setOptionPositions(List<OptionsPosition> optionPositions) {
    
    
    
    this.optionPositions = optionPositions;
  }


  public AccountHoldingsAccount orders(List<AccountOrderRecord> orders) {
    
    
    
    
    this.orders = orders;
    return this;
  }

  public AccountHoldingsAccount addOrdersItem(AccountOrderRecord ordersItem) {
    if (this.orders == null) {
      this.orders = new ArrayList<>();
    }
    this.orders.add(ordersItem);
    return this;
  }

   /**
   * List of recent orders in the account, including both pending and executed orders. Note that option orders are included in this list. Option orders will have a null &#x60;universal_symbol&#x60; field and a non-null &#x60;option_symbol&#x60; field.
   * @return orders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "List of recent orders in the account, including both pending and executed orders. Note that option orders are included in this list. Option orders will have a null `universal_symbol` field and a non-null `option_symbol` field.")

  public List<AccountOrderRecord> getOrders() {
    return orders;
  }


  public void setOrders(List<AccountOrderRecord> orders) {
    
    
    
    this.orders = orders;
  }


  public AccountHoldingsAccount totalValue(SnapTradeHoldingsTotalValue totalValue) {
    
    
    
    
    this.totalValue = totalValue;
    return this;
  }

   /**
   * Get totalValue
   * @return totalValue
   * @deprecated
  **/
  @Deprecated
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public SnapTradeHoldingsTotalValue getTotalValue() {
    return totalValue;
  }


  public void setTotalValue(SnapTradeHoldingsTotalValue totalValue) {
    
    
    
    this.totalValue = totalValue;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the AccountHoldingsAccount instance itself
   */
  public AccountHoldingsAccount putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountHoldingsAccount accountHoldingsAccount = (AccountHoldingsAccount) o;
    return Objects.equals(this.account, accountHoldingsAccount.account) &&
        Objects.equals(this.balances, accountHoldingsAccount.balances) &&
        Objects.equals(this.positions, accountHoldingsAccount.positions) &&
        Objects.equals(this.optionPositions, accountHoldingsAccount.optionPositions) &&
        Objects.equals(this.orders, accountHoldingsAccount.orders) &&
        Objects.equals(this.totalValue, accountHoldingsAccount.totalValue)&&
        Objects.equals(this.additionalProperties, accountHoldingsAccount.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, balances, positions, optionPositions, orders, totalValue, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountHoldingsAccount {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    balances: ").append(toIndentedString(balances)).append("\n");
    sb.append("    positions: ").append(toIndentedString(positions)).append("\n");
    sb.append("    optionPositions: ").append(toIndentedString(optionPositions)).append("\n");
    sb.append("    orders: ").append(toIndentedString(orders)).append("\n");
    sb.append("    totalValue: ").append(toIndentedString(totalValue)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("balances");
    openapiFields.add("positions");
    openapiFields.add("option_positions");
    openapiFields.add("orders");
    openapiFields.add("total_value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to AccountHoldingsAccount
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!AccountHoldingsAccount.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountHoldingsAccount is not found in the empty JSON string", AccountHoldingsAccount.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `account`
      if (jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) {
        Account.validateJsonObject(jsonObj.getAsJsonObject("account"));
      }
      if (jsonObj.get("balances") != null && !jsonObj.get("balances").isJsonNull()) {
        JsonArray jsonArraybalances = jsonObj.getAsJsonArray("balances");
        if (jsonArraybalances != null) {
          // ensure the json data is an array
          if (!jsonObj.get("balances").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `balances` to be an array in the JSON string but got `%s`", jsonObj.get("balances").toString()));
          }

          // validate the optional field `balances` (array)
          for (int i = 0; i < jsonArraybalances.size(); i++) {
            Balance.validateJsonObject(jsonArraybalances.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("positions") != null && !jsonObj.get("positions").isJsonNull()) {
        JsonArray jsonArraypositions = jsonObj.getAsJsonArray("positions");
        if (jsonArraypositions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("positions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `positions` to be an array in the JSON string but got `%s`", jsonObj.get("positions").toString()));
          }

          // validate the optional field `positions` (array)
          for (int i = 0; i < jsonArraypositions.size(); i++) {
            Position.validateJsonObject(jsonArraypositions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("option_positions") != null && !jsonObj.get("option_positions").isJsonNull()) {
        JsonArray jsonArrayoptionPositions = jsonObj.getAsJsonArray("option_positions");
        if (jsonArrayoptionPositions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("option_positions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `option_positions` to be an array in the JSON string but got `%s`", jsonObj.get("option_positions").toString()));
          }

          // validate the optional field `option_positions` (array)
          for (int i = 0; i < jsonArrayoptionPositions.size(); i++) {
            OptionsPosition.validateJsonObject(jsonArrayoptionPositions.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("orders") != null && !jsonObj.get("orders").isJsonNull()) {
        JsonArray jsonArrayorders = jsonObj.getAsJsonArray("orders");
        if (jsonArrayorders != null) {
          // ensure the json data is an array
          if (!jsonObj.get("orders").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `orders` to be an array in the JSON string but got `%s`", jsonObj.get("orders").toString()));
          }

          // validate the optional field `orders` (array)
          for (int i = 0; i < jsonArrayorders.size(); i++) {
            AccountOrderRecord.validateJsonObject(jsonArrayorders.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `total_value`
      if (jsonObj.get("total_value") != null && !jsonObj.get("total_value").isJsonNull()) {
        SnapTradeHoldingsTotalValue.validateJsonObject(jsonObj.getAsJsonObject("total_value"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountHoldingsAccount.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountHoldingsAccount' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountHoldingsAccount> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountHoldingsAccount.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountHoldingsAccount>() {
           @Override
           public void write(JsonWriter out, AccountHoldingsAccount value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else if (entry.getValue() == null) {
                   obj.addProperty(entry.getKey(), (String) null);
                 } else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountHoldingsAccount read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             AccountHoldingsAccount instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of AccountHoldingsAccount given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of AccountHoldingsAccount
  * @throws IOException if the JSON string is invalid with respect to AccountHoldingsAccount
  */
  public static AccountHoldingsAccount fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountHoldingsAccount.class);
  }

 /**
  * Convert an instance of AccountHoldingsAccount to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

