/*
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Account;
import com.konfigthis.client.model.AccountHoldings;
import com.konfigthis.client.model.AccountHoldingsAccount;
import com.konfigthis.client.model.AccountInformationGetUserAccountOrderDetailRequest;
import com.konfigthis.client.model.AccountOrderRecord;
import com.konfigthis.client.model.Balance;
import java.time.LocalDate;
import com.konfigthis.client.model.PaginatedUniversalActivity;
import com.konfigthis.client.model.Position;
import com.konfigthis.client.model.RateOfReturnResponse;
import com.konfigthis.client.model.RecentOrdersResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AccountInformationApi
 */
@Disabled
public class AccountInformationApiTest {

    private static AccountInformationApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AccountInformationApi(apiClient);
    }

    /**
     * List account activities
     *
     * Returns all historical transactions for the specified account.  This endpoint is paginated with a default page size of 1000. The endpoint will return a maximum of 1000 transactions per request. See the query parameters for pagination options.  Transaction are returned in reverse chronological order, using the &#x60;trade_date&#x60; field.  The data returned here is always cached and refreshed once a day.  If the connection has become disabled, it can no longer access the latest data from the brokerage, but will continue to return the last available cached state. Please see [this guide](/docs/fix-broken-connections) on how to fix a disabled connection. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAccountActivitiesTest() throws ApiException {
        UUID accountId = null;
        String userId = null;
        String userSecret = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        Integer offset = null;
        Integer limit = null;
        String type = null;
        PaginatedUniversalActivity response = api.getAccountActivities(accountId, userId, userSecret)
                .startDate(startDate)
                .endDate(endDate)
                .offset(offset)
                .limit(limit)
                .type(type)
                .execute();
        // TODO: test validations
    }

    /**
     * List all accounts for the user, plus balances, positions, and orders for each account.
     *
     * **Deprecated, please use the account-specific holdings endpoint instead.**  List all accounts for the user, plus balances, positions, and orders for each account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllUserHoldingsTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UUID brokerageAuthorizations = null;
        List<AccountHoldings> response = api.getAllUserHoldings(userId, userSecret)
                .brokerageAuthorizations(brokerageAuthorizations)
                .execute();
        // TODO: test validations
    }

    /**
     * List account balances
     *
     * Returns a list of balances for the account. Each element of the list has a distinct currency. Some brokerages like Questrade [allows holding multiple currencies in the same account](https://www.questrade.com/learning/questrade-basics/balances-and-reports/understanding-your-account-balances).  The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v&#x3D;d16c4c97b8d5438bbb2d8581ac53b11e) and look for \&quot;Cache Expiry Time\&quot; to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.  If the connection has become disabled, it can no longer access the latest data from the brokerage, but will continue to return the last available cached state. Please see [this guide](/docs/fix-broken-connections) on how to fix a disabled connection. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAccountBalanceTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UUID accountId = null;
        List<Balance> response = api.getUserAccountBalance(userId, userSecret, accountId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get account detail
     *
     * Returns account detail known to SnapTrade for the specified account.  The data returned here is always cached and refreshed once a day. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.  If the connection has become disabled, it can no longer access the latest data from the brokerage, but will continue to return the last available cached state. Please see [this guide](/docs/fix-broken-connections) on how to fix a disabled connection. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAccountDetailsTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UUID accountId = null;
        Account response = api.getUserAccountDetails(userId, userSecret, accountId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get account order detail
     *
     * Returns the detail of a single order using the external order ID provided in the request body.  This endpoint only works for single-leg orders at this time. Support for multi-leg orders will be added in the future.  This endpoint is always realtime and does not rely on cached data.  This endpoint only returns orders placed through SnapTrade. In other words, orders placed outside of the SnapTrade network are not returned by this endpoint. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAccountOrderDetailTest() throws ApiException {
        String brokerageOrderId = null;
        UUID accountId = null;
        String userId = null;
        String userSecret = null;
        AccountOrderRecord response = api.getUserAccountOrderDetail(brokerageOrderId, accountId, userId, userSecret)
                .execute();
        // TODO: test validations
    }

    /**
     * List account orders
     *
     * Returns a list of recent orders in the specified account.  The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v&#x3D;d16c4c97b8d5438bbb2d8581ac53b11e) and look for \&quot;Cache Expiry Time\&quot; to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.  If the connection has become disabled, it can no longer access the latest data from the brokerage, but will continue to return the last available cached state. Please see [this guide](/docs/fix-broken-connections) on how to fix a disabled connection. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAccountOrdersTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UUID accountId = null;
        String state = null;
        Integer days = null;
        List<AccountOrderRecord> response = api.getUserAccountOrders(userId, userSecret, accountId)
                .state(state)
                .days(days)
                .execute();
        // TODO: test validations
    }

    /**
     * List account positions
     *
     * Returns a list of stock/ETF/crypto/mutual fund positions in the specified account. For option positions, please use the [options endpoint](/reference/Options/Options_listOptionHoldings).  The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v&#x3D;d16c4c97b8d5438bbb2d8581ac53b11e) and look for \&quot;Cache Expiry Time\&quot; to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.  If the connection has become disabled, it can no longer access the latest data from the brokerage, but will continue to return the last available cached state. Please see [this guide](/docs/fix-broken-connections) on how to fix a disabled connection. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAccountPositionsTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UUID accountId = null;
        List<Position> response = api.getUserAccountPositions(userId, userSecret, accountId)
                .execute();
        // TODO: test validations
    }

    /**
     * List account recent orders (last 24 hours only)
     *
     * A lightweight endpoint that returns a list of orders executed in the last 24 hours in the specified account. This endpoint is realtime and can be used to quickly check if account state has recently changed due to an execution, or check status of recently placed orders Differs from /orders in that it is realtime, and only checks the last 24 hours as opposed to the last 30 days By default only returns executed orders, but that can be changed by setting *only_executed* to false **Because of the cost of realtime requests, each call to this endpoint incurs an additional charge. You can find the exact cost for your API key on the [Customer Dashboard billing page](https://dashboard.snaptrade.com/settings/billing)** 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAccountRecentOrdersTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UUID accountId = null;
        Boolean onlyExecuted = null;
        RecentOrdersResponse response = api.getUserAccountRecentOrders(userId, userSecret, accountId)
                .onlyExecuted(onlyExecuted)
                .execute();
        // TODO: test validations
    }

    /**
     * List account rate of returns
     *
     * Returns a list of rate of return percents for a given account. Will include timeframes available from the brokerage, for example \&quot;ALL\&quot;, \&quot;1Y\&quot;, \&quot;6M\&quot;, \&quot;3M\&quot;, \&quot;1M\&quot; 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserAccountReturnRatesTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UUID accountId = null;
        RateOfReturnResponse response = api.getUserAccountReturnRates(userId, userSecret, accountId)
                .execute();
        // TODO: test validations
    }

    /**
     * List account holdings
     *
     * Returns a list of balances, positions, and recent orders for the specified account. The data returned is similar to the data returned over the more fine-grained [balances](/reference/Account%20Information/AccountInformation_getUserAccountBalance), [positions](/reference/Account%20Information/AccountInformation_getUserAccountPositions) and [orders](/reference/Account%20Information/AccountInformation_getUserAccountOrders) endpoints. __The finer-grained APIs are preferred. They are easier to work with, faster, and have better error handling than this coarse-grained API.__  The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v&#x3D;d16c4c97b8d5438bbb2d8581ac53b11e) and look for \&quot;Cache Expiry Time\&quot; to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.  If the connection has become disabled, it can no longer access the latest data from the brokerage, but will continue to return the last available cached state. Please see [this guide](/docs/fix-broken-connections) on how to fix a disabled connection. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserHoldingsTest() throws ApiException {
        UUID accountId = null;
        String userId = null;
        String userSecret = null;
        AccountHoldingsAccount response = api.getUserHoldings(accountId, userId, userSecret)
                .execute();
        // TODO: test validations
    }

    /**
     * List accounts
     *
     * Returns all brokerage accounts across all connections known to SnapTrade for the authenticated user.  The data returned here is always cached and refreshed once a day. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listUserAccountsTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        List<Account> response = api.listUserAccounts(userId, userSecret)
                .execute();
        // TODO: test validations
    }

    /**
     * Update details of an investment account
     *
     * Updates various properties of a specified account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateUserAccountTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UUID accountId = null;
        List<Account> response = api.updateUserAccount(userId, userSecret, accountId)
                .execute();
        // TODO: test validations
    }

}
