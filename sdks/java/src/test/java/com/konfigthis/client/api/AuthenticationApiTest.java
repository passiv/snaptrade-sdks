/*
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.DeleteUserResponse;
import com.konfigthis.client.model.SnapTradeLoginUserRequestBody;
import com.konfigthis.client.model.SnapTradeRegisterUserRequestBody;
import com.konfigthis.client.model.UserIDandSecret;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AuthenticationApi
 */
@Disabled
public class AuthenticationApiTest {

    private static AuthenticationApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new AuthenticationApi(apiClient);
    }

    /**
     * Delete user
     *
     * Deletes a registered user and all associated data. This action is irreversible. This API is asynchronous and will return a 200 status code if the request is accepted. The user and all associated data will be queued for deletion. Once deleted, a &#x60;USER_DELETED&#x60; webhook will be sent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSnapTradeUserTest() throws ApiException {
        String userId = null;
        DeleteUserResponse response = api.deleteSnapTradeUser(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * List all users
     *
     * Returns a list of all registered user IDs. Please note that the response is not currently paginated.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSnapTradeUsersTest() throws ApiException {
        List<String> response = api.listSnapTradeUsers()
                .execute();
        // TODO: test validations
    }

    /**
     * Generate Connection Portal URL
     *
     * Authenticates a SnapTrade user and returns the Connection Portal URL used for connecting brokerage accounts. Please check [this guide](/docs/implement-connection-portal) for how to integrate the Connection Portal into your app.  Please note that the returned URL expires in 5 minutes. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void loginSnapTradeUserTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        String broker = null;
        Boolean immediateRedirect = null;
        String customRedirect = null;
        String reconnect = null;
        String connectionType = null;
        String connectionPortalVersion = null;
        Object response = api.loginSnapTradeUser(userId, userSecret)
                .broker(broker)
                .immediateRedirect(immediateRedirect)
                .customRedirect(customRedirect)
                .reconnect(reconnect)
                .connectionType(connectionType)
                .connectionPortalVersion(connectionPortalVersion)
                .execute();
        // TODO: test validations
    }

    /**
     * Register user
     *
     * Registers a new SnapTrade user under your Client ID. A user secret will be automatically generated for you and must be properly stored in your system. Most SnapTrade operations require a user ID and user secret to be passed in as parameters. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void registerSnapTradeUserTest() throws ApiException {
        String userId = null;
        UserIDandSecret response = api.registerSnapTradeUser(userId)
                .execute();
        // TODO: test validations
    }

    /**
     * Rotate user secret
     *
     * Rotates the secret for a SnapTrade user. You might use this if &#x60;userSecret&#x60; is compromised. Please note that if you call this endpoint and fail to save the new secret, you&#39;ll no longer be able to access any data for this user, and your only option will be to delete and recreate the user, then ask them to reconnect. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void resetSnapTradeUserSecretTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UserIDandSecret response = api.resetSnapTradeUserSecret()
                .userId(userId)
                .userSecret(userSecret)
                .execute();
        // TODO: test validations
    }

}
