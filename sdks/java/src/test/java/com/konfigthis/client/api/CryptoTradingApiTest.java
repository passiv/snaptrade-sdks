/*
 * SnapTrade
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.ActionStrict;
import java.math.BigDecimal;
import com.konfigthis.client.model.CryptocurrencyPairQuote;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.OrderUpdatedResponse;
import com.konfigthis.client.model.SimpleOrderForm;
import com.konfigthis.client.model.TradingInstrument;
import com.konfigthis.client.model.TradingSearchCryptocurrencyPairInstruments200Response;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CryptoTradingApi
 */
@Disabled
public class CryptoTradingApiTest {

    private static CryptoTradingApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new CryptoTradingApi(apiClient);
    }

    /**
     * Get cryptocurrency pair quote
     *
     * Gets a quote for the specified account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCryptocurrencyPairQuoteTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UUID accountId = null;
        String instrumentSymbol = null;
        CryptocurrencyPairQuote response = api.getCryptocurrencyPairQuote(userId, userSecret, accountId, instrumentSymbol)
                .execute();
        // TODO: test validations
    }

    /**
     * Place order
     *
     * Places an order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void placeSimpleOrderTest() throws ApiException {
        TradingInstrument instrument = null;
        ActionStrict side = null;
        String type = null;
        String timeInForce = null;
        BigDecimal amount = null;
        String userId = null;
        String userSecret = null;
        UUID accountId = null;
        BigDecimal limitPrice = null;
        BigDecimal stopPrice = null;
        Boolean postOnly = null;
        OffsetDateTime expirationDate = null;
        OrderUpdatedResponse response = api.placeSimpleOrder(instrument, side, type, timeInForce, amount, userId, userSecret, accountId)
                .limitPrice(limitPrice)
                .stopPrice(stopPrice)
                .postOnly(postOnly)
                .expirationDate(expirationDate)
                .execute();
        // TODO: test validations
    }

    /**
     * Search cryptocurrency pairs instruments
     *
     * Searches cryptocurrency pairs instruments accessible to the specified account. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchCryptocurrencyPairInstrumentsTest() throws ApiException {
        String userId = null;
        String userSecret = null;
        UUID accountId = null;
        String base = null;
        String quote = null;
        TradingSearchCryptocurrencyPairInstruments200Response response = api.searchCryptocurrencyPairInstruments(userId, userSecret, accountId)
                .base(base)
                .quote(quote)
                .execute();
        // TODO: test validations
    }

}
