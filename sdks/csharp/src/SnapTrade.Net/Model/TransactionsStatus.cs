/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// Status of account transaction sync. SnapTrade syncs transactions from the brokerage under the following conditions: 1. Initial connection - SnapTrade syncs all transactions from the brokerage account as far back as the brokerage allows. Check [our integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v&#x3D;6fab8012ade6441fa0c6d9af9c55ce3a) for details on how far back we sync for each brokerage. 2. Daily sync - Once a day SnapTrade syncs new transactions from the brokerage. 3. Manual sync - You can retrigger an incremental sync of transactions with the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint. 
    /// </summary>
    [DataContract(Name = "TransactionsStatus")]
    public partial class TransactionsStatus : IEquatable<TransactionsStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TransactionsStatus" /> class.
        /// </summary>
        /// <param name="initialSyncCompleted">Indicates if the initial sync of transactions has been completed. For accounts with a large number of transactions, the initial sync may take a while to complete..</param>
        /// <param name="lastSuccessfulSync">Date in YYYY-MM-DD format or null.</param>
        /// <param name="firstTransactionDate">The date of the first transaction in the account known to SnapTrade. It&#39;s possible that the account has transactions before this date, but they are not known to SnapTrade..</param>
        public TransactionsStatus(bool initialSyncCompleted = default(bool), DateTime? lastSuccessfulSync = default(DateTime?), DateTime? firstTransactionDate = default(DateTime?))
        {
            this.InitialSyncCompleted = initialSyncCompleted;
            this.LastSuccessfulSync = lastSuccessfulSync;
            this.FirstTransactionDate = firstTransactionDate;
        }

        /// <summary>
        /// Indicates if the initial sync of transactions has been completed. For accounts with a large number of transactions, the initial sync may take a while to complete.
        /// </summary>
        /// <value>Indicates if the initial sync of transactions has been completed. For accounts with a large number of transactions, the initial sync may take a while to complete.</value>
        [DataMember(Name = "initial_sync_completed", EmitDefaultValue = true)]
        public bool InitialSyncCompleted { get; set; }

        /// <summary>
        /// Date in YYYY-MM-DD format or null
        /// </summary>
        /// <value>Date in YYYY-MM-DD format or null</value>
        [DataMember(Name = "last_successful_sync", EmitDefaultValue = true)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime? LastSuccessfulSync { get; set; }

        /// <summary>
        /// The date of the first transaction in the account known to SnapTrade. It&#39;s possible that the account has transactions before this date, but they are not known to SnapTrade.
        /// </summary>
        /// <value>The date of the first transaction in the account known to SnapTrade. It&#39;s possible that the account has transactions before this date, but they are not known to SnapTrade.</value>
        [DataMember(Name = "first_transaction_date", EmitDefaultValue = true)]
        public DateTime? FirstTransactionDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TransactionsStatus {\n");
            sb.Append("  InitialSyncCompleted: ").Append(InitialSyncCompleted).Append("\n");
            sb.Append("  LastSuccessfulSync: ").Append(LastSuccessfulSync).Append("\n");
            sb.Append("  FirstTransactionDate: ").Append(FirstTransactionDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TransactionsStatus);
        }

        /// <summary>
        /// Returns true if TransactionsStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of TransactionsStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TransactionsStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InitialSyncCompleted == input.InitialSyncCompleted ||
                    this.InitialSyncCompleted.Equals(input.InitialSyncCompleted)
                ) && 
                (
                    this.LastSuccessfulSync == input.LastSuccessfulSync ||
                    (this.LastSuccessfulSync != null &&
                    this.LastSuccessfulSync.Equals(input.LastSuccessfulSync))
                ) && 
                (
                    this.FirstTransactionDate == input.FirstTransactionDate ||
                    (this.FirstTransactionDate != null &&
                    this.FirstTransactionDate.Equals(input.FirstTransactionDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.InitialSyncCompleted.GetHashCode();
                if (this.LastSuccessfulSync != null)
                {
                    hashCode = (hashCode * 59) + this.LastSuccessfulSync.GetHashCode();
                }
                if (this.FirstTransactionDate != null)
                {
                    hashCode = (hashCode * 59) + this.FirstTransactionDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
