/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// Status of account holdings sync. SnapTrade syncs holdings from the brokerage under the following conditions: 1. Initial connection - SnapTrade syncs all holdings (positions, balances, recent orders, and transactions) immediately after the connection is established. 2. Daily sync - Once a day SnapTrade refreshes all holdings from the brokerage. 3. Manual sync - You can trigger a refresh of holdings with the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint. 
    /// </summary>
    [DataContract(Name = "HoldingsStatus")]
    public partial class HoldingsStatus : IEquatable<HoldingsStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="HoldingsStatus" /> class.
        /// </summary>
        /// <param name="initialSyncCompleted">Indicates if the initial sync of holdings has been completed. For accounts with a large number of positions/orders/transactions, the initial sync may take a while to complete..</param>
        /// <param name="lastSuccessfulSync">Date in ISO 8601 format or null (YYYY-MM-DD HH:MM:SS.mmmmmmTZ).</param>
        public HoldingsStatus(bool initialSyncCompleted = default(bool), DateTime? lastSuccessfulSync = default(DateTime?))
        {
            this.InitialSyncCompleted = initialSyncCompleted;
            this.LastSuccessfulSync = lastSuccessfulSync;
        }

        /// <summary>
        /// Indicates if the initial sync of holdings has been completed. For accounts with a large number of positions/orders/transactions, the initial sync may take a while to complete.
        /// </summary>
        /// <value>Indicates if the initial sync of holdings has been completed. For accounts with a large number of positions/orders/transactions, the initial sync may take a while to complete.</value>
        [DataMember(Name = "initial_sync_completed", EmitDefaultValue = true)]
        public bool InitialSyncCompleted { get; set; }

        /// <summary>
        /// Date in ISO 8601 format or null (YYYY-MM-DD HH:MM:SS.mmmmmmTZ)
        /// </summary>
        /// <value>Date in ISO 8601 format or null (YYYY-MM-DD HH:MM:SS.mmmmmmTZ)</value>
        [DataMember(Name = "last_successful_sync", EmitDefaultValue = true)]
        public DateTime? LastSuccessfulSync { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class HoldingsStatus {\n");
            sb.Append("  InitialSyncCompleted: ").Append(InitialSyncCompleted).Append("\n");
            sb.Append("  LastSuccessfulSync: ").Append(LastSuccessfulSync).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as HoldingsStatus);
        }

        /// <summary>
        /// Returns true if HoldingsStatus instances are equal
        /// </summary>
        /// <param name="input">Instance of HoldingsStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HoldingsStatus input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InitialSyncCompleted == input.InitialSyncCompleted ||
                    this.InitialSyncCompleted.Equals(input.InitialSyncCompleted)
                ) && 
                (
                    this.LastSuccessfulSync == input.LastSuccessfulSync ||
                    (this.LastSuccessfulSync != null &&
                    this.LastSuccessfulSync.Equals(input.LastSuccessfulSync))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.InitialSyncCompleted.GetHashCode();
                if (this.LastSuccessfulSync != null)
                {
                    hashCode = (hashCode * 59) + this.LastSuccessfulSync.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
