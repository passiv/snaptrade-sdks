/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// CryptoSpotQuote
    /// </summary>
    [DataContract(Name = "CryptoSpotQuote")]
    public partial class CryptoSpotQuote : IEquatable<CryptoSpotQuote>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoSpotQuote" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CryptoSpotQuote()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoSpotQuote" /> class.
        /// </summary>
        /// <param name="bid">The highest price a buyer is willing to pay. (required).</param>
        /// <param name="ask">The lowest price a seller is willing to accept. (required).</param>
        /// <param name="mid">The market mid price..</param>
        /// <param name="timestamp">The timestamp of the quote..</param>
        public CryptoSpotQuote(decimal bid = default(decimal), decimal ask = default(decimal), decimal mid = default(decimal), DateTime timestamp = default(DateTime)) : base()
        {
            this.Bid = bid;
            this.Ask = ask;
            this.Mid = mid;
            this.Timestamp = timestamp;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The highest price a buyer is willing to pay.
        /// </summary>
        /// <value>The highest price a buyer is willing to pay.</value>
        [DataMember(Name = "bid", IsRequired = true, EmitDefaultValue = true)]
        public decimal Bid { get; set; }

        /// <summary>
        /// The lowest price a seller is willing to accept.
        /// </summary>
        /// <value>The lowest price a seller is willing to accept.</value>
        [DataMember(Name = "ask", IsRequired = true, EmitDefaultValue = true)]
        public decimal Ask { get; set; }

        /// <summary>
        /// The market mid price.
        /// </summary>
        /// <value>The market mid price.</value>
        [DataMember(Name = "mid", EmitDefaultValue = false)]
        public decimal Mid { get; set; }

        /// <summary>
        /// The timestamp of the quote.
        /// </summary>
        /// <value>The timestamp of the quote.</value>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CryptoSpotQuote {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Bid: ").Append(Bid).Append("\n");
            sb.Append("  Ask: ").Append(Ask).Append("\n");
            sb.Append("  Mid: ").Append(Mid).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CryptoSpotQuote);
        }

        /// <summary>
        /// Returns true if CryptoSpotQuote instances are equal
        /// </summary>
        /// <param name="input">Instance of CryptoSpotQuote to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CryptoSpotQuote input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Bid == input.Bid ||
                    this.Bid.Equals(input.Bid)
                ) && base.Equals(input) && 
                (
                    this.Ask == input.Ask ||
                    this.Ask.Equals(input.Ask)
                ) && base.Equals(input) && 
                (
                    this.Mid == input.Mid ||
                    this.Mid.Equals(input.Mid)
                ) && base.Equals(input) && 
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.Bid.GetHashCode();
                hashCode = (hashCode * 59) + this.Ask.GetHashCode();
                hashCode = (hashCode * 59) + this.Mid.GetHashCode();
                if (this.Timestamp != null)
                {
                    hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
