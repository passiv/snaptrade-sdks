/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// Inputs for replacing an order with the brokerage.
    /// </summary>
    [DataContract(Name = "ManualTradeReplaceForm")]
    public partial class ManualTradeReplaceForm : IEquatable<ManualTradeReplaceForm>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets _Action
        /// </summary>
        [DataMember(Name = "action", IsRequired = true, EmitDefaultValue = true)]
        public ActionStrict _Action { get; set; }

        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        [DataMember(Name = "order_type", IsRequired = true, EmitDefaultValue = true)]
        public OrderTypeStrict OrderType { get; set; }

        /// <summary>
        /// Gets or Sets TimeInForce
        /// </summary>
        [DataMember(Name = "time_in_force", IsRequired = true, EmitDefaultValue = true)]
        public TimeInForceStrict TimeInForce { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualTradeReplaceForm" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ManualTradeReplaceForm() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualTradeReplaceForm" /> class.
        /// </summary>
        /// <param name="brokerageOrderId">Order ID returned by brokerage. This is the unique identifier for the order in the brokerage system. (required).</param>
        /// <param name="action">action (required).</param>
        /// <param name="orderType">orderType (required).</param>
        /// <param name="timeInForce">timeInForce (required).</param>
        /// <param name="price">The limit price for &#x60;Limit&#x60; and &#x60;StopLimit&#x60; orders..</param>
        /// <param name="symbol">The security&#39;s trading ticker symbol.</param>
        /// <param name="stop">The price at which a stop order is triggered for &#x60;Stop&#x60; and &#x60;StopLimit&#x60; orders..</param>
        /// <param name="units">Number of shares for the order. This can be a decimal for fractional orders. Must be &#x60;null&#x60; if &#x60;notional_value&#x60; is provided..</param>
        public ManualTradeReplaceForm(string brokerageOrderId = default(string), ActionStrict action = default(ActionStrict), OrderTypeStrict orderType = default(OrderTypeStrict), TimeInForceStrict timeInForce = default(TimeInForceStrict), double? price = default(double?), string symbol = default(string), double? stop = default(double?), double? units = default(double?))
        {
            // to ensure "brokerageOrderId" is required (not null)
            if (brokerageOrderId == null)
            {
                throw new ArgumentNullException("brokerageOrderId is a required property for ManualTradeReplaceForm and cannot be null");
            }
            this.BrokerageOrderId = brokerageOrderId;
            this._Action = action;
            this.OrderType = orderType;
            this.TimeInForce = timeInForce;
            this.Price = price;
            this.Symbol = symbol;
            this.Stop = stop;
            this.Units = units;
        }

        /// <summary>
        /// Order ID returned by brokerage. This is the unique identifier for the order in the brokerage system.
        /// </summary>
        /// <value>Order ID returned by brokerage. This is the unique identifier for the order in the brokerage system.</value>
        [DataMember(Name = "brokerage_order_id", IsRequired = true, EmitDefaultValue = true)]
        public string BrokerageOrderId { get; set; }

        /// <summary>
        /// The limit price for &#x60;Limit&#x60; and &#x60;StopLimit&#x60; orders.
        /// </summary>
        /// <value>The limit price for &#x60;Limit&#x60; and &#x60;StopLimit&#x60; orders.</value>
        [DataMember(Name = "price", EmitDefaultValue = true)]
        public double? Price { get; set; }

        /// <summary>
        /// The security&#39;s trading ticker symbol
        /// </summary>
        /// <value>The security&#39;s trading ticker symbol</value>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        public string Symbol { get; set; }

        /// <summary>
        /// The price at which a stop order is triggered for &#x60;Stop&#x60; and &#x60;StopLimit&#x60; orders.
        /// </summary>
        /// <value>The price at which a stop order is triggered for &#x60;Stop&#x60; and &#x60;StopLimit&#x60; orders.</value>
        [DataMember(Name = "stop", EmitDefaultValue = true)]
        public double? Stop { get; set; }

        /// <summary>
        /// Number of shares for the order. This can be a decimal for fractional orders. Must be &#x60;null&#x60; if &#x60;notional_value&#x60; is provided.
        /// </summary>
        /// <value>Number of shares for the order. This can be a decimal for fractional orders. Must be &#x60;null&#x60; if &#x60;notional_value&#x60; is provided.</value>
        [DataMember(Name = "units", EmitDefaultValue = true)]
        public double? Units { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManualTradeReplaceForm {\n");
            sb.Append("  BrokerageOrderId: ").Append(BrokerageOrderId).Append("\n");
            sb.Append("  _Action: ").Append(_Action).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  TimeInForce: ").Append(TimeInForce).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  Stop: ").Append(Stop).Append("\n");
            sb.Append("  Units: ").Append(Units).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManualTradeReplaceForm);
        }

        /// <summary>
        /// Returns true if ManualTradeReplaceForm instances are equal
        /// </summary>
        /// <param name="input">Instance of ManualTradeReplaceForm to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManualTradeReplaceForm input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.BrokerageOrderId == input.BrokerageOrderId ||
                    (this.BrokerageOrderId != null &&
                    this.BrokerageOrderId.Equals(input.BrokerageOrderId))
                ) && 
                (
                    this._Action == input._Action ||
                    this._Action.Equals(input._Action)
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    this.OrderType.Equals(input.OrderType)
                ) && 
                (
                    this.TimeInForce == input.TimeInForce ||
                    this.TimeInForce.Equals(input.TimeInForce)
                ) && 
                (
                    this.Price == input.Price ||
                    (this.Price != null &&
                    this.Price.Equals(input.Price))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.Stop == input.Stop ||
                    (this.Stop != null &&
                    this.Stop.Equals(input.Stop))
                ) && 
                (
                    this.Units == input.Units ||
                    (this.Units != null &&
                    this.Units.Equals(input.Units))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BrokerageOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerageOrderId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this._Action.GetHashCode();
                hashCode = (hashCode * 59) + this.OrderType.GetHashCode();
                hashCode = (hashCode * 59) + this.TimeInForce.GetHashCode();
                if (this.Price != null)
                {
                    hashCode = (hashCode * 59) + this.Price.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.Stop != null)
                {
                    hashCode = (hashCode * 59) + this.Stop.GetHashCode();
                }
                if (this.Units != null)
                {
                    hashCode = (hashCode * 59) + this.Units.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
