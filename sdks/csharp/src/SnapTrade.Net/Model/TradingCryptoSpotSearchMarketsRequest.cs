/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// TradingCryptoSpotSearchMarketsRequest
    /// </summary>
    [DataContract(Name = "Trading_crypto_spot_searchMarkets_request")]
    public partial class TradingCryptoSpotSearchMarketsRequest : IEquatable<TradingCryptoSpotSearchMarketsRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TradingCryptoSpotSearchMarketsRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TradingCryptoSpotSearchMarketsRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradingCryptoSpotSearchMarketsRequest" /> class.
        /// </summary>
        /// <param name="accountId">Unique identifier for the connected brokerage account. This is the UUID used to reference the account in SnapTrade. (required).</param>
        /// <param name="_base">The base currency (e.g., \&quot;BTC\&quot; in BTC/USD). Can be a fiat or crypto code. (required).</param>
        /// <param name="quote">The quote currency (e.g., \&quot;USD\&quot; in BTC/USD). Can be a fiat or crypto code..</param>
        public TradingCryptoSpotSearchMarketsRequest(string accountId = default(string), string _base = default(string), string quote = default(string))
        {
            // to ensure "accountId" is required (not null)
            if (accountId == null)
            {
                throw new ArgumentNullException("accountId is a required property for TradingCryptoSpotSearchMarketsRequest and cannot be null");
            }
            this.AccountId = accountId;
            // to ensure "_base" is required (not null)
            if (_base == null)
            {
                throw new ArgumentNullException("_base is a required property for TradingCryptoSpotSearchMarketsRequest and cannot be null");
            }
            this.Base = _base;
            this.Quote = quote;
        }

        /// <summary>
        /// Unique identifier for the connected brokerage account. This is the UUID used to reference the account in SnapTrade.
        /// </summary>
        /// <value>Unique identifier for the connected brokerage account. This is the UUID used to reference the account in SnapTrade.</value>
        [DataMember(Name = "account_id", IsRequired = true, EmitDefaultValue = true)]
        public string AccountId { get; set; }

        /// <summary>
        /// The base currency (e.g., \&quot;BTC\&quot; in BTC/USD). Can be a fiat or crypto code.
        /// </summary>
        /// <value>The base currency (e.g., \&quot;BTC\&quot; in BTC/USD). Can be a fiat or crypto code.</value>
        [DataMember(Name = "base", IsRequired = true, EmitDefaultValue = true)]
        public string Base { get; set; }

        /// <summary>
        /// The quote currency (e.g., \&quot;USD\&quot; in BTC/USD). Can be a fiat or crypto code.
        /// </summary>
        /// <value>The quote currency (e.g., \&quot;USD\&quot; in BTC/USD). Can be a fiat or crypto code.</value>
        [DataMember(Name = "quote", EmitDefaultValue = false)]
        public string Quote { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TradingCryptoSpotSearchMarketsRequest {\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  Base: ").Append(Base).Append("\n");
            sb.Append("  Quote: ").Append(Quote).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradingCryptoSpotSearchMarketsRequest);
        }

        /// <summary>
        /// Returns true if TradingCryptoSpotSearchMarketsRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TradingCryptoSpotSearchMarketsRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradingCryptoSpotSearchMarketsRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AccountId == input.AccountId ||
                    (this.AccountId != null &&
                    this.AccountId.Equals(input.AccountId))
                ) && 
                (
                    this.Base == input.Base ||
                    (this.Base != null &&
                    this.Base.Equals(input.Base))
                ) && 
                (
                    this.Quote == input.Quote ||
                    (this.Quote != null &&
                    this.Quote.Equals(input.Quote))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.AccountId != null)
                {
                    hashCode = (hashCode * 59) + this.AccountId.GetHashCode();
                }
                if (this.Base != null)
                {
                    hashCode = (hashCode * 59) + this.Base.GetHashCode();
                }
                if (this.Quote != null)
                {
                    hashCode = (hashCode * 59) + this.Quote.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
