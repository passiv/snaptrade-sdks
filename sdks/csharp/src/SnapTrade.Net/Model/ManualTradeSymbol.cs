/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// Information about the security for the order.
    /// </summary>
    [DataContract(Name = "ManualTradeSymbol")]
    public partial class ManualTradeSymbol : IEquatable<ManualTradeSymbol>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ManualTradeSymbol" /> class.
        /// </summary>
        /// <param name="universalSymbolId">Unique identifier for the symbol within SnapTrade. This is the ID used to reference the symbol in SnapTrade API calls..</param>
        /// <param name="currency">currency.</param>
        /// <param name="localId">This field is deprecated and should not be used..</param>
        /// <param name="description">This field is deprecated and should not be used..</param>
        /// <param name="symbol">This field is deprecated and should not be used..</param>
        /// <param name="brokerageSymbolId">A unique ID for the security within SnapTrade, scoped to the brokerage account that the security belongs to. This is a legacy field and should not be used. Do not rely on this being a stable ID as it can change..</param>
        public ManualTradeSymbol(string universalSymbolId = default(string), Currency currency = default(Currency), string localId = default(string), string description = default(string), string symbol = default(string), string brokerageSymbolId = default(string)) : base()
        {
            this.UniversalSymbolId = universalSymbolId;
            this.Currency = currency;
            this.LocalId = localId;
            this.Description = description;
            this.Symbol = symbol;
            this.BrokerageSymbolId = brokerageSymbolId;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Unique identifier for the symbol within SnapTrade. This is the ID used to reference the symbol in SnapTrade API calls.
        /// </summary>
        /// <value>Unique identifier for the symbol within SnapTrade. This is the ID used to reference the symbol in SnapTrade API calls.</value>
        [DataMember(Name = "universal_symbol_id", EmitDefaultValue = false)]
        public string UniversalSymbolId { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public Currency Currency { get; set; }

        /// <summary>
        /// This field is deprecated and should not be used.
        /// </summary>
        /// <value>This field is deprecated and should not be used.</value>
        [DataMember(Name = "local_id", EmitDefaultValue = false)]
        [Obsolete]
        public string LocalId { get; set; }

        /// <summary>
        /// This field is deprecated and should not be used.
        /// </summary>
        /// <value>This field is deprecated and should not be used.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        [Obsolete]
        public string Description { get; set; }

        /// <summary>
        /// This field is deprecated and should not be used.
        /// </summary>
        /// <value>This field is deprecated and should not be used.</value>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        [Obsolete]
        public string Symbol { get; set; }

        /// <summary>
        /// A unique ID for the security within SnapTrade, scoped to the brokerage account that the security belongs to. This is a legacy field and should not be used. Do not rely on this being a stable ID as it can change.
        /// </summary>
        /// <value>A unique ID for the security within SnapTrade, scoped to the brokerage account that the security belongs to. This is a legacy field and should not be used. Do not rely on this being a stable ID as it can change.</value>
        [DataMember(Name = "brokerage_symbol_id", EmitDefaultValue = false)]
        [Obsolete]
        public string BrokerageSymbolId { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManualTradeSymbol {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  UniversalSymbolId: ").Append(UniversalSymbolId).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  LocalId: ").Append(LocalId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  BrokerageSymbolId: ").Append(BrokerageSymbolId).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ManualTradeSymbol);
        }

        /// <summary>
        /// Returns true if ManualTradeSymbol instances are equal
        /// </summary>
        /// <param name="input">Instance of ManualTradeSymbol to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ManualTradeSymbol input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.UniversalSymbolId == input.UniversalSymbolId ||
                    (this.UniversalSymbolId != null &&
                    this.UniversalSymbolId.Equals(input.UniversalSymbolId))
                ) && base.Equals(input) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && base.Equals(input) && 
                (
                    this.LocalId == input.LocalId ||
                    (this.LocalId != null &&
                    this.LocalId.Equals(input.LocalId))
                ) && base.Equals(input) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && base.Equals(input) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && base.Equals(input) && 
                (
                    this.BrokerageSymbolId == input.BrokerageSymbolId ||
                    (this.BrokerageSymbolId != null &&
                    this.BrokerageSymbolId.Equals(input.BrokerageSymbolId))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.UniversalSymbolId != null)
                {
                    hashCode = (hashCode * 59) + this.UniversalSymbolId.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.LocalId != null)
                {
                    hashCode = (hashCode * 59) + this.LocalId.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.BrokerageSymbolId != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerageSymbolId.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
