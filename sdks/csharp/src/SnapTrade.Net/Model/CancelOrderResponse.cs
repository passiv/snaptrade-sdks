/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// CancelOrderResponse
    /// </summary>
    [DataContract(Name = "CancelOrderResponse")]
    public partial class CancelOrderResponse : IEquatable<CancelOrderResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelOrderResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected CancelOrderResponse()
        {
            this.AdditionalProperties = new Dictionary<string, object>();
        }
        /// <summary>
        /// Initializes a new instance of the <see cref="CancelOrderResponse" /> class.
        /// </summary>
        /// <param name="brokerageOrderId">Order ID returned by brokerage. This is the unique identifier for the order in the brokerage system. (required).</param>
        /// <param name="rawResponse">The raw response from the brokerage..</param>
        public CancelOrderResponse(string brokerageOrderId = default(string), Dictionary<string, Object> rawResponse = default(Dictionary<string, Object>)) : base()
        {
            // to ensure "brokerageOrderId" is required (not null)
            if (brokerageOrderId == null)
            {
                throw new ArgumentNullException("brokerageOrderId is a required property for CancelOrderResponse and cannot be null");
            }
            this.BrokerageOrderId = brokerageOrderId;
            this.RawResponse = rawResponse;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Order ID returned by brokerage. This is the unique identifier for the order in the brokerage system.
        /// </summary>
        /// <value>Order ID returned by brokerage. This is the unique identifier for the order in the brokerage system.</value>
        [DataMember(Name = "brokerage_order_id", IsRequired = true, EmitDefaultValue = true)]
        public string BrokerageOrderId { get; set; }

        /// <summary>
        /// The raw response from the brokerage.
        /// </summary>
        /// <value>The raw response from the brokerage.</value>
        [DataMember(Name = "raw_response", EmitDefaultValue = true)]
        public Dictionary<string, Object> RawResponse { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CancelOrderResponse {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BrokerageOrderId: ").Append(BrokerageOrderId).Append("\n");
            sb.Append("  RawResponse: ").Append(RawResponse).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CancelOrderResponse);
        }

        /// <summary>
        /// Returns true if CancelOrderResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CancelOrderResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CancelOrderResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.BrokerageOrderId == input.BrokerageOrderId ||
                    (this.BrokerageOrderId != null &&
                    this.BrokerageOrderId.Equals(input.BrokerageOrderId))
                ) && base.Equals(input) && 
                (
                    this.RawResponse == input.RawResponse ||
                    this.RawResponse != null &&
                    input.RawResponse != null &&
                    this.RawResponse.SequenceEqual(input.RawResponse)
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BrokerageOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerageOrderId.GetHashCode();
                }
                if (this.RawResponse != null)
                {
                    hashCode = (hashCode * 59) + this.RawResponse.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
