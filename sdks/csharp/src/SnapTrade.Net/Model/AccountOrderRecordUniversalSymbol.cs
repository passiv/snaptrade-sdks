/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// Contains information about the security that the order is for. This field is only present for stock/ETF/crypto/mutual fund orders. For option orders, this field will be null and the &#x60;option_symbol&#x60; field will be populated.
    /// </summary>
    [DataContract(Name = "AccountOrderRecord_universal_symbol")]
    public partial class AccountOrderRecordUniversalSymbol : IEquatable<AccountOrderRecordUniversalSymbol>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountOrderRecordUniversalSymbol" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected AccountOrderRecordUniversalSymbol() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountOrderRecordUniversalSymbol" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the symbol within SnapTrade. This is the ID used to reference the symbol in SnapTrade API calls. (required).</param>
        /// <param name="symbol">The security&#39;s trading ticker symbol. For example \&quot;AAPL\&quot; for Apple Inc. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on \&quot;Yahoo Finance Market Coverage and Data Delays\&quot;). For example, for securities traded on the Toronto Stock Exchange, the symbol has a &#39;.TO&#39; suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix. (required).</param>
        /// <param name="rawSymbol">The raw symbol is &#x60;symbol&#x60; with the exchange suffix removed. For example, if &#x60;symbol&#x60; is \&quot;VAB.TO\&quot;, then &#x60;raw_symbol&#x60; is \&quot;VAB\&quot;. (required).</param>
        /// <param name="description">A human-readable description of the security. This is usually the company name or ETF name..</param>
        /// <param name="currency">currency (required).</param>
        /// <param name="exchange">exchange.</param>
        /// <param name="type">type (required).</param>
        /// <param name="figiCode">This identifier is unique per security per trading venue. See section 1.4.1 of the [FIGI Standard](https://www.openfigi.com/assets/local/figi-allocation-rules.pdf) for more information. This value should be the same as the &#x60;figi_code&#x60; in the &#x60;figi_instrument&#x60; child property..</param>
        /// <param name="figiInstrument">figiInstrument.</param>
        /// <param name="currencies">This field is deprecated and should not be used. Please reach out to SnapTrade support if you have a valid usecase for this. (required).</param>
        public AccountOrderRecordUniversalSymbol(string id = default(string), string symbol = default(string), string rawSymbol = default(string), string description = default(string), SymbolCurrency currency = default(SymbolCurrency), SymbolExchange exchange = default(SymbolExchange), SecurityType type = default(SecurityType), string figiCode = default(string), FigiInstrumentNullable figiInstrument = default(FigiInstrumentNullable), List<Currency> currencies = default(List<Currency>))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new ArgumentNullException("id is a required property for AccountOrderRecordUniversalSymbol and cannot be null");
            }
            this.Id = id;
            // to ensure "symbol" is required (not null)
            if (symbol == null)
            {
                throw new ArgumentNullException("symbol is a required property for AccountOrderRecordUniversalSymbol and cannot be null");
            }
            this.Symbol = symbol;
            // to ensure "rawSymbol" is required (not null)
            if (rawSymbol == null)
            {
                throw new ArgumentNullException("rawSymbol is a required property for AccountOrderRecordUniversalSymbol and cannot be null");
            }
            this.RawSymbol = rawSymbol;
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for AccountOrderRecordUniversalSymbol and cannot be null");
            }
            this.Currency = currency;
            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new ArgumentNullException("type is a required property for AccountOrderRecordUniversalSymbol and cannot be null");
            }
            this.Type = type;
            // to ensure "currencies" is required (not null)
            if (currencies == null)
            {
                throw new ArgumentNullException("currencies is a required property for AccountOrderRecordUniversalSymbol and cannot be null");
            }
            this.Currencies = currencies;
            this.Description = description;
            this.Exchange = exchange;
            this.FigiCode = figiCode;
            this.FigiInstrument = figiInstrument;
        }

        /// <summary>
        /// Unique identifier for the symbol within SnapTrade. This is the ID used to reference the symbol in SnapTrade API calls.
        /// </summary>
        /// <value>Unique identifier for the symbol within SnapTrade. This is the ID used to reference the symbol in SnapTrade API calls.</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public string Id { get; set; }

        /// <summary>
        /// The security&#39;s trading ticker symbol. For example \&quot;AAPL\&quot; for Apple Inc. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on \&quot;Yahoo Finance Market Coverage and Data Delays\&quot;). For example, for securities traded on the Toronto Stock Exchange, the symbol has a &#39;.TO&#39; suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix.
        /// </summary>
        /// <value>The security&#39;s trading ticker symbol. For example \&quot;AAPL\&quot; for Apple Inc. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on \&quot;Yahoo Finance Market Coverage and Data Delays\&quot;). For example, for securities traded on the Toronto Stock Exchange, the symbol has a &#39;.TO&#39; suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix.</value>
        [DataMember(Name = "symbol", IsRequired = true, EmitDefaultValue = true)]
        public string Symbol { get; set; }

        /// <summary>
        /// The raw symbol is &#x60;symbol&#x60; with the exchange suffix removed. For example, if &#x60;symbol&#x60; is \&quot;VAB.TO\&quot;, then &#x60;raw_symbol&#x60; is \&quot;VAB\&quot;.
        /// </summary>
        /// <value>The raw symbol is &#x60;symbol&#x60; with the exchange suffix removed. For example, if &#x60;symbol&#x60; is \&quot;VAB.TO\&quot;, then &#x60;raw_symbol&#x60; is \&quot;VAB\&quot;.</value>
        [DataMember(Name = "raw_symbol", IsRequired = true, EmitDefaultValue = true)]
        public string RawSymbol { get; set; }

        /// <summary>
        /// A human-readable description of the security. This is usually the company name or ETF name.
        /// </summary>
        /// <value>A human-readable description of the security. This is usually the company name or ETF name.</value>
        [DataMember(Name = "description", EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public SymbolCurrency Currency { get; set; }

        /// <summary>
        /// Gets or Sets Exchange
        /// </summary>
        [DataMember(Name = "exchange", EmitDefaultValue = false)]
        public SymbolExchange Exchange { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public SecurityType Type { get; set; }

        /// <summary>
        /// This identifier is unique per security per trading venue. See section 1.4.1 of the [FIGI Standard](https://www.openfigi.com/assets/local/figi-allocation-rules.pdf) for more information. This value should be the same as the &#x60;figi_code&#x60; in the &#x60;figi_instrument&#x60; child property.
        /// </summary>
        /// <value>This identifier is unique per security per trading venue. See section 1.4.1 of the [FIGI Standard](https://www.openfigi.com/assets/local/figi-allocation-rules.pdf) for more information. This value should be the same as the &#x60;figi_code&#x60; in the &#x60;figi_instrument&#x60; child property.</value>
        [DataMember(Name = "figi_code", EmitDefaultValue = true)]
        public string FigiCode { get; set; }

        /// <summary>
        /// Gets or Sets FigiInstrument
        /// </summary>
        [DataMember(Name = "figi_instrument", EmitDefaultValue = true)]
        public FigiInstrumentNullable FigiInstrument { get; set; }

        /// <summary>
        /// This field is deprecated and should not be used. Please reach out to SnapTrade support if you have a valid usecase for this.
        /// </summary>
        /// <value>This field is deprecated and should not be used. Please reach out to SnapTrade support if you have a valid usecase for this.</value>
        [DataMember(Name = "currencies", IsRequired = true, EmitDefaultValue = true)]
        [Obsolete]
        public List<Currency> Currencies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountOrderRecordUniversalSymbol {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  RawSymbol: ").Append(RawSymbol).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Exchange: ").Append(Exchange).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FigiCode: ").Append(FigiCode).Append("\n");
            sb.Append("  FigiInstrument: ").Append(FigiInstrument).Append("\n");
            sb.Append("  Currencies: ").Append(Currencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountOrderRecordUniversalSymbol);
        }

        /// <summary>
        /// Returns true if AccountOrderRecordUniversalSymbol instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountOrderRecordUniversalSymbol to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountOrderRecordUniversalSymbol input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && 
                (
                    this.RawSymbol == input.RawSymbol ||
                    (this.RawSymbol != null &&
                    this.RawSymbol.Equals(input.RawSymbol))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Currency == input.Currency ||
                    (this.Currency != null &&
                    this.Currency.Equals(input.Currency))
                ) && 
                (
                    this.Exchange == input.Exchange ||
                    (this.Exchange != null &&
                    this.Exchange.Equals(input.Exchange))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.FigiCode == input.FigiCode ||
                    (this.FigiCode != null &&
                    this.FigiCode.Equals(input.FigiCode))
                ) && 
                (
                    this.FigiInstrument == input.FigiInstrument ||
                    (this.FigiInstrument != null &&
                    this.FigiInstrument.Equals(input.FigiInstrument))
                ) && 
                (
                    this.Currencies == input.Currencies ||
                    this.Currencies != null &&
                    input.Currencies != null &&
                    this.Currencies.SequenceEqual(input.Currencies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.RawSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.RawSymbol.GetHashCode();
                }
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.Currency != null)
                {
                    hashCode = (hashCode * 59) + this.Currency.GetHashCode();
                }
                if (this.Exchange != null)
                {
                    hashCode = (hashCode * 59) + this.Exchange.GetHashCode();
                }
                if (this.Type != null)
                {
                    hashCode = (hashCode * 59) + this.Type.GetHashCode();
                }
                if (this.FigiCode != null)
                {
                    hashCode = (hashCode * 59) + this.FigiCode.GetHashCode();
                }
                if (this.FigiInstrument != null)
                {
                    hashCode = (hashCode * 59) + this.FigiInstrument.GetHashCode();
                }
                if (this.Currencies != null)
                {
                    hashCode = (hashCode * 59) + this.Currencies.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
