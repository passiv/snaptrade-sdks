/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// Describes a single recent order in an account. Each record here represents a single order leg. For multi-leg orders, there will be multiple records.
    /// </summary>
    [DataContract(Name = "AccountOrderRecord")]
    public partial class AccountOrderRecord : IEquatable<AccountOrderRecord>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public AccountOrderRecordStatus? Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountOrderRecord" /> class.
        /// </summary>
        /// <param name="brokerageOrderId">Order ID returned by brokerage. This is the unique identifier for the order in the brokerage system..</param>
        /// <param name="status">status.</param>
        /// <param name="universalSymbol">universalSymbol.</param>
        /// <param name="optionSymbol">optionSymbol.</param>
        /// <param name="action">The action describes the intent or side of a trade. This is usually &#x60;BUY&#x60; or &#x60;SELL&#x60; but can include other potential values like the following depending on the specific brokerage.   - BUY   - SELL   - BUY_COVER   - SELL_SHORT   - BUY_OPEN   - BUY_CLOSE   - SELL_OPEN   - SELL_CLOSE .</param>
        /// <param name="totalQuantity">The total number of shares or contracts of the order. This should be the sum of the filled, canceled, and open quantities. Can be a decimal number for fractional shares..</param>
        /// <param name="openQuantity">The number of shares or contracts that are still open (waiting for execution). Can be a decimal number for fractional shares..</param>
        /// <param name="canceledQuantity">The number of shares or contracts that have been canceled. Can be a decimal number for fractional shares..</param>
        /// <param name="filledQuantity">The number of shares or contracts that have been filled. Can be a decimal number for fractional shares..</param>
        /// <param name="executionPrice">The price at which the order was executed..</param>
        /// <param name="limitPrice">The limit price is maximum price one is willing to pay for a buy order or the minimum price one is willing to accept for a sell order. Should only apply to &#x60;Limit&#x60; and &#x60;StopLimit&#x60; orders..</param>
        /// <param name="stopPrice">The stop price is the price at which a stop order is triggered. Should only apply to &#x60;Stop&#x60; and &#x60;StopLimit&#x60; orders..</param>
        /// <param name="orderType">The type of order placed. The most common values are &#x60;Market&#x60;, &#x60;Limit&#x60;, &#x60;Stop&#x60;, and &#x60;StopLimit&#x60;. We try our best to map brokerage order types to these values. When mapping fails, we will return the brokerage&#39;s order type value..</param>
        /// <param name="timeInForce">The Time in Force type for the order. This field indicates how long the order will remain active before it is executed or expires. We try our best to map brokerage time in force values to the following. When mapping fails, we will return the brokerage&#39;s time in force value.   - &#x60;Day&#x60; - Day. The order is valid only for the trading day on which it is placed.   - &#x60;GTC&#x60; - Good Til Canceled. The order is valid until it is executed or canceled.   - &#x60;FOK&#x60; - Fill Or Kill. The order must be executed in its entirety immediately or be canceled completely.   - &#x60;IOC&#x60; - Immediate Or Cancel. The order must be executed immediately. Any portion of the order that cannot be filled immediately will be canceled.   - &#x60;GTD&#x60; - Good Til Date. The order is valid until the specified date.   - &#x60;MOO&#x60; - Market On Open. The order is to be executed at the day&#39;s opening price.   - &#x60;EHP&#x60; - Extended Hours P.M. The order is to be placed during extended hour trading, after markets close. .</param>
        /// <param name="timePlaced">The time the order was placed. This is the time the order was submitted to the brokerage..</param>
        /// <param name="timeUpdated">The time the order was last updated in the brokerage system. This value is not always available from the brokerage..</param>
        /// <param name="timeExecuted">The time the order was executed in the brokerage system. This value is not always available from the brokerage..</param>
        /// <param name="expiryDate">The time the order expires. This value is not always available from the brokerage..</param>
        /// <param name="symbol">A unique ID for the security within SnapTrade, scoped to the brokerage account that the security belongs to. This is a legacy field and should not be used. Do not rely on this being a stable ID as it can change..</param>
        /// <param name="childBrokerageOrderIds">childBrokerageOrderIds.</param>
        public AccountOrderRecord(string brokerageOrderId = default(string), AccountOrderRecordStatus? status = default(AccountOrderRecordStatus?), AccountOrderRecordUniversalSymbol universalSymbol = default(AccountOrderRecordUniversalSymbol), AccountOrderRecordOptionSymbol optionSymbol = default(AccountOrderRecordOptionSymbol), string action = default(string), double? totalQuantity = default(double?), double? openQuantity = default(double?), double? canceledQuantity = default(double?), double? filledQuantity = default(double?), double? executionPrice = default(double?), double? limitPrice = default(double?), double? stopPrice = default(double?), string orderType = default(string), string timeInForce = default(string), DateTime timePlaced = default(DateTime), DateTime? timeUpdated = default(DateTime?), DateTime? timeExecuted = default(DateTime?), DateTime? expiryDate = default(DateTime?), string symbol = default(string), ChildBrokerageOrderIDsNullable childBrokerageOrderIds = default(ChildBrokerageOrderIDsNullable)) : base()
        {
            this.BrokerageOrderId = brokerageOrderId;
            this.Status = status;
            this.UniversalSymbol = universalSymbol;
            this.OptionSymbol = optionSymbol;
            this._Action = action;
            this.TotalQuantity = totalQuantity;
            this.OpenQuantity = openQuantity;
            this.CanceledQuantity = canceledQuantity;
            this.FilledQuantity = filledQuantity;
            this.ExecutionPrice = executionPrice;
            this.LimitPrice = limitPrice;
            this.StopPrice = stopPrice;
            this.OrderType = orderType;
            this.TimeInForce = timeInForce;
            this.TimePlaced = timePlaced;
            this.TimeUpdated = timeUpdated;
            this.TimeExecuted = timeExecuted;
            this.ExpiryDate = expiryDate;
            this.Symbol = symbol;
            this.ChildBrokerageOrderIds = childBrokerageOrderIds;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// Order ID returned by brokerage. This is the unique identifier for the order in the brokerage system.
        /// </summary>
        /// <value>Order ID returned by brokerage. This is the unique identifier for the order in the brokerage system.</value>
        [DataMember(Name = "brokerage_order_id", EmitDefaultValue = false)]
        public string BrokerageOrderId { get; set; }

        /// <summary>
        /// Gets or Sets UniversalSymbol
        /// </summary>
        [DataMember(Name = "universal_symbol", EmitDefaultValue = false)]
        public AccountOrderRecordUniversalSymbol UniversalSymbol { get; set; }

        /// <summary>
        /// Gets or Sets OptionSymbol
        /// </summary>
        [DataMember(Name = "option_symbol", EmitDefaultValue = false)]
        public AccountOrderRecordOptionSymbol OptionSymbol { get; set; }

        /// <summary>
        /// The action describes the intent or side of a trade. This is usually &#x60;BUY&#x60; or &#x60;SELL&#x60; but can include other potential values like the following depending on the specific brokerage.   - BUY   - SELL   - BUY_COVER   - SELL_SHORT   - BUY_OPEN   - BUY_CLOSE   - SELL_OPEN   - SELL_CLOSE 
        /// </summary>
        /// <value>The action describes the intent or side of a trade. This is usually &#x60;BUY&#x60; or &#x60;SELL&#x60; but can include other potential values like the following depending on the specific brokerage.   - BUY   - SELL   - BUY_COVER   - SELL_SHORT   - BUY_OPEN   - BUY_CLOSE   - SELL_OPEN   - SELL_CLOSE </value>
        [DataMember(Name = "action", EmitDefaultValue = false)]
        public string _Action { get; set; }

        /// <summary>
        /// The total number of shares or contracts of the order. This should be the sum of the filled, canceled, and open quantities. Can be a decimal number for fractional shares.
        /// </summary>
        /// <value>The total number of shares or contracts of the order. This should be the sum of the filled, canceled, and open quantities. Can be a decimal number for fractional shares.</value>
        [DataMember(Name = "total_quantity", EmitDefaultValue = true)]
        public double? TotalQuantity { get; set; }

        /// <summary>
        /// The number of shares or contracts that are still open (waiting for execution). Can be a decimal number for fractional shares.
        /// </summary>
        /// <value>The number of shares or contracts that are still open (waiting for execution). Can be a decimal number for fractional shares.</value>
        [DataMember(Name = "open_quantity", EmitDefaultValue = true)]
        public double? OpenQuantity { get; set; }

        /// <summary>
        /// The number of shares or contracts that have been canceled. Can be a decimal number for fractional shares.
        /// </summary>
        /// <value>The number of shares or contracts that have been canceled. Can be a decimal number for fractional shares.</value>
        [DataMember(Name = "canceled_quantity", EmitDefaultValue = true)]
        public double? CanceledQuantity { get; set; }

        /// <summary>
        /// The number of shares or contracts that have been filled. Can be a decimal number for fractional shares.
        /// </summary>
        /// <value>The number of shares or contracts that have been filled. Can be a decimal number for fractional shares.</value>
        [DataMember(Name = "filled_quantity", EmitDefaultValue = true)]
        public double? FilledQuantity { get; set; }

        /// <summary>
        /// The price at which the order was executed.
        /// </summary>
        /// <value>The price at which the order was executed.</value>
        [DataMember(Name = "execution_price", EmitDefaultValue = true)]
        public double? ExecutionPrice { get; set; }

        /// <summary>
        /// The limit price is maximum price one is willing to pay for a buy order or the minimum price one is willing to accept for a sell order. Should only apply to &#x60;Limit&#x60; and &#x60;StopLimit&#x60; orders.
        /// </summary>
        /// <value>The limit price is maximum price one is willing to pay for a buy order or the minimum price one is willing to accept for a sell order. Should only apply to &#x60;Limit&#x60; and &#x60;StopLimit&#x60; orders.</value>
        [DataMember(Name = "limit_price", EmitDefaultValue = true)]
        public double? LimitPrice { get; set; }

        /// <summary>
        /// The stop price is the price at which a stop order is triggered. Should only apply to &#x60;Stop&#x60; and &#x60;StopLimit&#x60; orders.
        /// </summary>
        /// <value>The stop price is the price at which a stop order is triggered. Should only apply to &#x60;Stop&#x60; and &#x60;StopLimit&#x60; orders.</value>
        [DataMember(Name = "stop_price", EmitDefaultValue = true)]
        public double? StopPrice { get; set; }

        /// <summary>
        /// The type of order placed. The most common values are &#x60;Market&#x60;, &#x60;Limit&#x60;, &#x60;Stop&#x60;, and &#x60;StopLimit&#x60;. We try our best to map brokerage order types to these values. When mapping fails, we will return the brokerage&#39;s order type value.
        /// </summary>
        /// <value>The type of order placed. The most common values are &#x60;Market&#x60;, &#x60;Limit&#x60;, &#x60;Stop&#x60;, and &#x60;StopLimit&#x60;. We try our best to map brokerage order types to these values. When mapping fails, we will return the brokerage&#39;s order type value.</value>
        [DataMember(Name = "order_type", EmitDefaultValue = true)]
        public string OrderType { get; set; }

        /// <summary>
        /// The Time in Force type for the order. This field indicates how long the order will remain active before it is executed or expires. We try our best to map brokerage time in force values to the following. When mapping fails, we will return the brokerage&#39;s time in force value.   - &#x60;Day&#x60; - Day. The order is valid only for the trading day on which it is placed.   - &#x60;GTC&#x60; - Good Til Canceled. The order is valid until it is executed or canceled.   - &#x60;FOK&#x60; - Fill Or Kill. The order must be executed in its entirety immediately or be canceled completely.   - &#x60;IOC&#x60; - Immediate Or Cancel. The order must be executed immediately. Any portion of the order that cannot be filled immediately will be canceled.   - &#x60;GTD&#x60; - Good Til Date. The order is valid until the specified date.   - &#x60;MOO&#x60; - Market On Open. The order is to be executed at the day&#39;s opening price.   - &#x60;EHP&#x60; - Extended Hours P.M. The order is to be placed during extended hour trading, after markets close. 
        /// </summary>
        /// <value>The Time in Force type for the order. This field indicates how long the order will remain active before it is executed or expires. We try our best to map brokerage time in force values to the following. When mapping fails, we will return the brokerage&#39;s time in force value.   - &#x60;Day&#x60; - Day. The order is valid only for the trading day on which it is placed.   - &#x60;GTC&#x60; - Good Til Canceled. The order is valid until it is executed or canceled.   - &#x60;FOK&#x60; - Fill Or Kill. The order must be executed in its entirety immediately or be canceled completely.   - &#x60;IOC&#x60; - Immediate Or Cancel. The order must be executed immediately. Any portion of the order that cannot be filled immediately will be canceled.   - &#x60;GTD&#x60; - Good Til Date. The order is valid until the specified date.   - &#x60;MOO&#x60; - Market On Open. The order is to be executed at the day&#39;s opening price.   - &#x60;EHP&#x60; - Extended Hours P.M. The order is to be placed during extended hour trading, after markets close. </value>
        [DataMember(Name = "time_in_force", EmitDefaultValue = false)]
        public string TimeInForce { get; set; }

        /// <summary>
        /// The time the order was placed. This is the time the order was submitted to the brokerage.
        /// </summary>
        /// <value>The time the order was placed. This is the time the order was submitted to the brokerage.</value>
        [DataMember(Name = "time_placed", EmitDefaultValue = false)]
        public DateTime TimePlaced { get; set; }

        /// <summary>
        /// The time the order was last updated in the brokerage system. This value is not always available from the brokerage.
        /// </summary>
        /// <value>The time the order was last updated in the brokerage system. This value is not always available from the brokerage.</value>
        [DataMember(Name = "time_updated", EmitDefaultValue = true)]
        public DateTime? TimeUpdated { get; set; }

        /// <summary>
        /// The time the order was executed in the brokerage system. This value is not always available from the brokerage.
        /// </summary>
        /// <value>The time the order was executed in the brokerage system. This value is not always available from the brokerage.</value>
        [DataMember(Name = "time_executed", EmitDefaultValue = true)]
        public DateTime? TimeExecuted { get; set; }

        /// <summary>
        /// The time the order expires. This value is not always available from the brokerage.
        /// </summary>
        /// <value>The time the order expires. This value is not always available from the brokerage.</value>
        [DataMember(Name = "expiry_date", EmitDefaultValue = true)]
        public DateTime? ExpiryDate { get; set; }

        /// <summary>
        /// A unique ID for the security within SnapTrade, scoped to the brokerage account that the security belongs to. This is a legacy field and should not be used. Do not rely on this being a stable ID as it can change.
        /// </summary>
        /// <value>A unique ID for the security within SnapTrade, scoped to the brokerage account that the security belongs to. This is a legacy field and should not be used. Do not rely on this being a stable ID as it can change.</value>
        [DataMember(Name = "symbol", EmitDefaultValue = false)]
        [Obsolete]
        public string Symbol { get; set; }

        /// <summary>
        /// Gets or Sets ChildBrokerageOrderIds
        /// </summary>
        [DataMember(Name = "child_brokerage_order_ids", EmitDefaultValue = true)]
        public ChildBrokerageOrderIDsNullable ChildBrokerageOrderIds { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountOrderRecord {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  BrokerageOrderId: ").Append(BrokerageOrderId).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  UniversalSymbol: ").Append(UniversalSymbol).Append("\n");
            sb.Append("  OptionSymbol: ").Append(OptionSymbol).Append("\n");
            sb.Append("  _Action: ").Append(_Action).Append("\n");
            sb.Append("  TotalQuantity: ").Append(TotalQuantity).Append("\n");
            sb.Append("  OpenQuantity: ").Append(OpenQuantity).Append("\n");
            sb.Append("  CanceledQuantity: ").Append(CanceledQuantity).Append("\n");
            sb.Append("  FilledQuantity: ").Append(FilledQuantity).Append("\n");
            sb.Append("  ExecutionPrice: ").Append(ExecutionPrice).Append("\n");
            sb.Append("  LimitPrice: ").Append(LimitPrice).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  TimeInForce: ").Append(TimeInForce).Append("\n");
            sb.Append("  TimePlaced: ").Append(TimePlaced).Append("\n");
            sb.Append("  TimeUpdated: ").Append(TimeUpdated).Append("\n");
            sb.Append("  TimeExecuted: ").Append(TimeExecuted).Append("\n");
            sb.Append("  ExpiryDate: ").Append(ExpiryDate).Append("\n");
            sb.Append("  Symbol: ").Append(Symbol).Append("\n");
            sb.Append("  ChildBrokerageOrderIds: ").Append(ChildBrokerageOrderIds).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountOrderRecord);
        }

        /// <summary>
        /// Returns true if AccountOrderRecord instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountOrderRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountOrderRecord input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.BrokerageOrderId == input.BrokerageOrderId ||
                    (this.BrokerageOrderId != null &&
                    this.BrokerageOrderId.Equals(input.BrokerageOrderId))
                ) && base.Equals(input) && 
                (
                    this.Status == input.Status ||
                    this.Status.Equals(input.Status)
                ) && base.Equals(input) && 
                (
                    this.UniversalSymbol == input.UniversalSymbol ||
                    (this.UniversalSymbol != null &&
                    this.UniversalSymbol.Equals(input.UniversalSymbol))
                ) && base.Equals(input) && 
                (
                    this.OptionSymbol == input.OptionSymbol ||
                    (this.OptionSymbol != null &&
                    this.OptionSymbol.Equals(input.OptionSymbol))
                ) && base.Equals(input) && 
                (
                    this._Action == input._Action ||
                    (this._Action != null &&
                    this._Action.Equals(input._Action))
                ) && base.Equals(input) && 
                (
                    this.TotalQuantity == input.TotalQuantity ||
                    (this.TotalQuantity != null &&
                    this.TotalQuantity.Equals(input.TotalQuantity))
                ) && base.Equals(input) && 
                (
                    this.OpenQuantity == input.OpenQuantity ||
                    (this.OpenQuantity != null &&
                    this.OpenQuantity.Equals(input.OpenQuantity))
                ) && base.Equals(input) && 
                (
                    this.CanceledQuantity == input.CanceledQuantity ||
                    (this.CanceledQuantity != null &&
                    this.CanceledQuantity.Equals(input.CanceledQuantity))
                ) && base.Equals(input) && 
                (
                    this.FilledQuantity == input.FilledQuantity ||
                    (this.FilledQuantity != null &&
                    this.FilledQuantity.Equals(input.FilledQuantity))
                ) && base.Equals(input) && 
                (
                    this.ExecutionPrice == input.ExecutionPrice ||
                    (this.ExecutionPrice != null &&
                    this.ExecutionPrice.Equals(input.ExecutionPrice))
                ) && base.Equals(input) && 
                (
                    this.LimitPrice == input.LimitPrice ||
                    (this.LimitPrice != null &&
                    this.LimitPrice.Equals(input.LimitPrice))
                ) && base.Equals(input) && 
                (
                    this.StopPrice == input.StopPrice ||
                    (this.StopPrice != null &&
                    this.StopPrice.Equals(input.StopPrice))
                ) && base.Equals(input) && 
                (
                    this.OrderType == input.OrderType ||
                    (this.OrderType != null &&
                    this.OrderType.Equals(input.OrderType))
                ) && base.Equals(input) && 
                (
                    this.TimeInForce == input.TimeInForce ||
                    (this.TimeInForce != null &&
                    this.TimeInForce.Equals(input.TimeInForce))
                ) && base.Equals(input) && 
                (
                    this.TimePlaced == input.TimePlaced ||
                    (this.TimePlaced != null &&
                    this.TimePlaced.Equals(input.TimePlaced))
                ) && base.Equals(input) && 
                (
                    this.TimeUpdated == input.TimeUpdated ||
                    (this.TimeUpdated != null &&
                    this.TimeUpdated.Equals(input.TimeUpdated))
                ) && base.Equals(input) && 
                (
                    this.TimeExecuted == input.TimeExecuted ||
                    (this.TimeExecuted != null &&
                    this.TimeExecuted.Equals(input.TimeExecuted))
                ) && base.Equals(input) && 
                (
                    this.ExpiryDate == input.ExpiryDate ||
                    (this.ExpiryDate != null &&
                    this.ExpiryDate.Equals(input.ExpiryDate))
                ) && base.Equals(input) && 
                (
                    this.Symbol == input.Symbol ||
                    (this.Symbol != null &&
                    this.Symbol.Equals(input.Symbol))
                ) && base.Equals(input) && 
                (
                    this.ChildBrokerageOrderIds == input.ChildBrokerageOrderIds ||
                    (this.ChildBrokerageOrderIds != null &&
                    this.ChildBrokerageOrderIds.Equals(input.ChildBrokerageOrderIds))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.BrokerageOrderId != null)
                {
                    hashCode = (hashCode * 59) + this.BrokerageOrderId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Status.GetHashCode();
                if (this.UniversalSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.UniversalSymbol.GetHashCode();
                }
                if (this.OptionSymbol != null)
                {
                    hashCode = (hashCode * 59) + this.OptionSymbol.GetHashCode();
                }
                if (this._Action != null)
                {
                    hashCode = (hashCode * 59) + this._Action.GetHashCode();
                }
                if (this.TotalQuantity != null)
                {
                    hashCode = (hashCode * 59) + this.TotalQuantity.GetHashCode();
                }
                if (this.OpenQuantity != null)
                {
                    hashCode = (hashCode * 59) + this.OpenQuantity.GetHashCode();
                }
                if (this.CanceledQuantity != null)
                {
                    hashCode = (hashCode * 59) + this.CanceledQuantity.GetHashCode();
                }
                if (this.FilledQuantity != null)
                {
                    hashCode = (hashCode * 59) + this.FilledQuantity.GetHashCode();
                }
                if (this.ExecutionPrice != null)
                {
                    hashCode = (hashCode * 59) + this.ExecutionPrice.GetHashCode();
                }
                if (this.LimitPrice != null)
                {
                    hashCode = (hashCode * 59) + this.LimitPrice.GetHashCode();
                }
                if (this.StopPrice != null)
                {
                    hashCode = (hashCode * 59) + this.StopPrice.GetHashCode();
                }
                if (this.OrderType != null)
                {
                    hashCode = (hashCode * 59) + this.OrderType.GetHashCode();
                }
                if (this.TimeInForce != null)
                {
                    hashCode = (hashCode * 59) + this.TimeInForce.GetHashCode();
                }
                if (this.TimePlaced != null)
                {
                    hashCode = (hashCode * 59) + this.TimePlaced.GetHashCode();
                }
                if (this.TimeUpdated != null)
                {
                    hashCode = (hashCode * 59) + this.TimeUpdated.GetHashCode();
                }
                if (this.TimeExecuted != null)
                {
                    hashCode = (hashCode * 59) + this.TimeExecuted.GetHashCode();
                }
                if (this.ExpiryDate != null)
                {
                    hashCode = (hashCode * 59) + this.ExpiryDate.GetHashCode();
                }
                if (this.Symbol != null)
                {
                    hashCode = (hashCode * 59) + this.Symbol.GetHashCode();
                }
                if (this.ChildBrokerageOrderIds != null)
                {
                    hashCode = (hashCode * 59) + this.ChildBrokerageOrderIds.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
