/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// TradingPlaceMlegOrderRequest
    /// </summary>
    [DataContract(Name = "Trading_placeMlegOrder_request")]
    public partial class TradingPlaceMlegOrderRequest : IEquatable<TradingPlaceMlegOrderRequest>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public MlegOrderTypeStrict Type { get; set; }

        /// <summary>
        /// Gets or Sets TimeInForce
        /// </summary>
        [DataMember(Name = "time_in_force", IsRequired = true, EmitDefaultValue = true)]
        public TimeInForceStrict TimeInForce { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradingPlaceMlegOrderRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TradingPlaceMlegOrderRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TradingPlaceMlegOrderRequest" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="timeInForce">timeInForce (required).</param>
        /// <param name="limitPrice">The limit price. Required if the order type is LIMIT, STOP_LOSS_LIMIT..</param>
        /// <param name="stopPrice">The stop price. Required if the order type is STOP_LOSS_MARKET, STOP_LOSS_LIMIT..</param>
        /// <param name="legs">legs (required).</param>
        public TradingPlaceMlegOrderRequest(MlegOrderTypeStrict type = default(MlegOrderTypeStrict), TimeInForceStrict timeInForce = default(TimeInForceStrict), decimal? limitPrice = default(decimal?), decimal? stopPrice = default(decimal?), List<MlegLeg> legs = default(List<MlegLeg>))
        {
            this.Type = type;
            this.TimeInForce = timeInForce;
            // to ensure "legs" is required (not null)
            if (legs == null)
            {
                throw new ArgumentNullException("legs is a required property for TradingPlaceMlegOrderRequest and cannot be null");
            }
            this.Legs = legs;
            this.LimitPrice = limitPrice;
            this.StopPrice = stopPrice;
        }

        /// <summary>
        /// The limit price. Required if the order type is LIMIT, STOP_LOSS_LIMIT.
        /// </summary>
        /// <value>The limit price. Required if the order type is LIMIT, STOP_LOSS_LIMIT.</value>
        [DataMember(Name = "limit_price", EmitDefaultValue = true)]
        public decimal? LimitPrice { get; set; }

        /// <summary>
        /// The stop price. Required if the order type is STOP_LOSS_MARKET, STOP_LOSS_LIMIT.
        /// </summary>
        /// <value>The stop price. Required if the order type is STOP_LOSS_MARKET, STOP_LOSS_LIMIT.</value>
        [DataMember(Name = "stop_price", EmitDefaultValue = true)]
        public decimal? StopPrice { get; set; }

        /// <summary>
        /// Gets or Sets Legs
        /// </summary>
        [DataMember(Name = "legs", IsRequired = true, EmitDefaultValue = true)]
        public List<MlegLeg> Legs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TradingPlaceMlegOrderRequest {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  TimeInForce: ").Append(TimeInForce).Append("\n");
            sb.Append("  LimitPrice: ").Append(LimitPrice).Append("\n");
            sb.Append("  StopPrice: ").Append(StopPrice).Append("\n");
            sb.Append("  Legs: ").Append(Legs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TradingPlaceMlegOrderRequest);
        }

        /// <summary>
        /// Returns true if TradingPlaceMlegOrderRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of TradingPlaceMlegOrderRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TradingPlaceMlegOrderRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.TimeInForce == input.TimeInForce ||
                    this.TimeInForce.Equals(input.TimeInForce)
                ) && 
                (
                    this.LimitPrice == input.LimitPrice ||
                    (this.LimitPrice != null &&
                    this.LimitPrice.Equals(input.LimitPrice))
                ) && 
                (
                    this.StopPrice == input.StopPrice ||
                    (this.StopPrice != null &&
                    this.StopPrice.Equals(input.StopPrice))
                ) && 
                (
                    this.Legs == input.Legs ||
                    this.Legs != null &&
                    input.Legs != null &&
                    this.Legs.SequenceEqual(input.Legs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                hashCode = (hashCode * 59) + this.TimeInForce.GetHashCode();
                if (this.LimitPrice != null)
                {
                    hashCode = (hashCode * 59) + this.LimitPrice.GetHashCode();
                }
                if (this.StopPrice != null)
                {
                    hashCode = (hashCode * 59) + this.StopPrice.GetHashCode();
                }
                if (this.Legs != null)
                {
                    hashCode = (hashCode * 59) + this.Legs.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
