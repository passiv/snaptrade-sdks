/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// The currency in which the transaction &#x60;price&#x60; and &#x60;amount&#x60; is denominated.
    /// </summary>
    [DataContract(Name = "AccountUniversalActivity_currency")]
    public partial class AccountUniversalActivityCurrency : IEquatable<AccountUniversalActivityCurrency>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AccountUniversalActivityCurrency" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the currency. This is the UUID used to reference the currency in SnapTrade..</param>
        /// <param name="code">The ISO-4217 currency code for the currency..</param>
        /// <param name="name">A human-friendly name of the currency..</param>
        public AccountUniversalActivityCurrency(string id = default(string), string code = default(string), string name = default(string))
        {
            this.Id = id;
            this.Code = code;
            this.Name = name;
        }

        /// <summary>
        /// Unique identifier for the currency. This is the UUID used to reference the currency in SnapTrade.
        /// </summary>
        /// <value>Unique identifier for the currency. This is the UUID used to reference the currency in SnapTrade.</value>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// The ISO-4217 currency code for the currency.
        /// </summary>
        /// <value>The ISO-4217 currency code for the currency.</value>
        [DataMember(Name = "code", EmitDefaultValue = false)]
        public string Code { get; set; }

        /// <summary>
        /// A human-friendly name of the currency.
        /// </summary>
        /// <value>A human-friendly name of the currency.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AccountUniversalActivityCurrency {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AccountUniversalActivityCurrency);
        }

        /// <summary>
        /// Returns true if AccountUniversalActivityCurrency instances are equal
        /// </summary>
        /// <param name="input">Instance of AccountUniversalActivityCurrency to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountUniversalActivityCurrency input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Code == input.Code ||
                    (this.Code != null &&
                    this.Code.Equals(input.Code))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Code != null)
                {
                    hashCode = (hashCode * 59) + this.Code.GetHashCode();
                }
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
