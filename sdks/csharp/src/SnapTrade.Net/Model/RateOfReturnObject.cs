/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = SnapTrade.Net.Client.OpenAPIDateConverter;

namespace SnapTrade.Net.Model
{
    /// <summary>
    /// Individual rate of return object with return percent and timeframe
    /// </summary>
    [DataContract(Name = "RateOfReturnObject")]
    public partial class RateOfReturnObject : IEquatable<RateOfReturnObject>, IValidatableObject
    {
        /// <summary>
        /// The timeframe this return percent is reflecting
        /// </summary>
        /// <value>The timeframe this return percent is reflecting</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TimeframeEnum
        {
            /// <summary>
            /// Enum ALL for value: ALL
            /// </summary>
            [EnumMember(Value = "ALL")]
            ALL = 1,

            /// <summary>
            /// Enum _1Y for value: 1Y
            /// </summary>
            [EnumMember(Value = "1Y")]
            _1Y = 2,

            /// <summary>
            /// Enum _6M for value: 6M
            /// </summary>
            [EnumMember(Value = "6M")]
            _6M = 3,

            /// <summary>
            /// Enum _3M for value: 3M
            /// </summary>
            [EnumMember(Value = "3M")]
            _3M = 4,

            /// <summary>
            /// Enum _1M for value: 1M
            /// </summary>
            [EnumMember(Value = "1M")]
            _1M = 5

        }


        /// <summary>
        /// The timeframe this return percent is reflecting
        /// </summary>
        /// <value>The timeframe this return percent is reflecting</value>
        [DataMember(Name = "timeframe", EmitDefaultValue = false)]
        public TimeframeEnum? Timeframe { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RateOfReturnObject" /> class.
        /// </summary>
        /// <param name="timeframe">The timeframe this return percent is reflecting.</param>
        /// <param name="returnPercent">The percent return of the portfolio, directly from the brokerage. 5.97 indicates a 5.97% return over the timeframe.</param>
        /// <param name="createdDate">The date this was fetched.</param>
        public RateOfReturnObject(TimeframeEnum? timeframe = default(TimeframeEnum?), double returnPercent = default(double), DateTime createdDate = default(DateTime)) : base()
        {
            this.Timeframe = timeframe;
            this.ReturnPercent = returnPercent;
            this.CreatedDate = createdDate;
            this.AdditionalProperties = new Dictionary<string, object>();
        }

        /// <summary>
        /// The percent return of the portfolio, directly from the brokerage. 5.97 indicates a 5.97% return over the timeframe
        /// </summary>
        /// <value>The percent return of the portfolio, directly from the brokerage. 5.97 indicates a 5.97% return over the timeframe</value>
        [DataMember(Name = "return_percent", EmitDefaultValue = false)]
        public double ReturnPercent { get; set; }

        /// <summary>
        /// The date this was fetched
        /// </summary>
        /// <value>The date this was fetched</value>
        [DataMember(Name = "created_date", EmitDefaultValue = false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RateOfReturnObject {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Timeframe: ").Append(Timeframe).Append("\n");
            sb.Append("  ReturnPercent: ").Append(ReturnPercent).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RateOfReturnObject);
        }

        /// <summary>
        /// Returns true if RateOfReturnObject instances are equal
        /// </summary>
        /// <param name="input">Instance of RateOfReturnObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RateOfReturnObject input)
        {
            if (input == null)
            {
                return false;
            }
            return base.Equals(input) && 
                (
                    this.Timeframe == input.Timeframe ||
                    this.Timeframe.Equals(input.Timeframe)
                ) && base.Equals(input) && 
                (
                    this.ReturnPercent == input.ReturnPercent ||
                    this.ReturnPercent.Equals(input.ReturnPercent)
                ) && base.Equals(input) && 
                (
                    this.CreatedDate == input.CreatedDate ||
                    (this.CreatedDate != null &&
                    this.CreatedDate.Equals(input.CreatedDate))
                )
                && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                hashCode = (hashCode * 59) + this.Timeframe.GetHashCode();
                hashCode = (hashCode * 59) + this.ReturnPercent.GetHashCode();
                if (this.CreatedDate != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedDate.GetHashCode();
                }
                if (this.AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
