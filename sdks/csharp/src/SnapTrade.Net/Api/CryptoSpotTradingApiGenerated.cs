/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using SnapTrade.Net.Client;
using SnapTrade.Net.Model;

namespace SnapTrade.Net.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICryptoSpotTradingApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Place a spot order on a crypto exchange
        /// </summary>
        /// <remarks>
        /// Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountOrderRecord</returns>
        AccountOrderRecord CryptoSpotPlaceOrder(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0);

        /// <summary>
        /// Place a spot order on a crypto exchange
        /// </summary>
        /// <remarks>
        /// Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountOrderRecord</returns>
        ApiResponse<AccountOrderRecord> CryptoSpotPlaceOrderWithHttpInfo(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0);
        /// <summary>
        /// Place a spot order on a crypto exchange
        /// </summary>
        /// <remarks>
        /// Previews a cryptocurrency spot order using the specified account. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CryptoSpotOrderPreview</returns>
        CryptoSpotOrderPreview CryptoSpotPreviewOrder(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0);

        /// <summary>
        /// Place a spot order on a crypto exchange
        /// </summary>
        /// <remarks>
        /// Previews a cryptocurrency spot order using the specified account. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CryptoSpotOrderPreview</returns>
        ApiResponse<CryptoSpotOrderPreview> CryptoSpotPreviewOrderWithHttpInfo(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0);
        /// <summary>
        /// Get a quote for a cyrptocurrency market
        /// </summary>
        /// <remarks>
        /// Gets a quote for the specified account. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotQuoteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CryptoSpotQuote</returns>
        CryptoSpotQuote CryptoSpotQuote(string userId, string userSecret, TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest, int operationIndex = 0);

        /// <summary>
        /// Get a quote for a cyrptocurrency market
        /// </summary>
        /// <remarks>
        /// Gets a quote for the specified account. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotQuoteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CryptoSpotQuote</returns>
        ApiResponse<CryptoSpotQuote> CryptoSpotQuoteWithHttpInfo(string userId, string userSecret, TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest, int operationIndex = 0);
        /// <summary>
        /// Search crypto spot markets
        /// </summary>
        /// <remarks>
        /// Searches cryptocurrency spot markets accessible to the specified account. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotSearchMarketsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CryptocurrencyMarket&gt;</returns>
        List<CryptocurrencyMarket> CryptoSpotSearchMarkets(string userId, string userSecret, TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest, int operationIndex = 0);

        /// <summary>
        /// Search crypto spot markets
        /// </summary>
        /// <remarks>
        /// Searches cryptocurrency spot markets accessible to the specified account. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotSearchMarketsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CryptocurrencyMarket&gt;</returns>
        ApiResponse<List<CryptocurrencyMarket>> CryptoSpotSearchMarketsWithHttpInfo(string userId, string userSecret, TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICryptoSpotTradingApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Place a spot order on a crypto exchange
        /// </summary>
        /// <remarks>
        /// Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountOrderRecord</returns>
        System.Threading.Tasks.Task<AccountOrderRecord> CryptoSpotPlaceOrderAsync(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Place a spot order on a crypto exchange
        /// </summary>
        /// <remarks>
        /// Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountOrderRecord)</returns>
        System.Threading.Tasks.Task<ApiResponse<AccountOrderRecord>> CryptoSpotPlaceOrderWithHttpInfoAsync(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Place a spot order on a crypto exchange
        /// </summary>
        /// <remarks>
        /// Previews a cryptocurrency spot order using the specified account. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CryptoSpotOrderPreview</returns>
        System.Threading.Tasks.Task<CryptoSpotOrderPreview> CryptoSpotPreviewOrderAsync(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Place a spot order on a crypto exchange
        /// </summary>
        /// <remarks>
        /// Previews a cryptocurrency spot order using the specified account. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CryptoSpotOrderPreview)</returns>
        System.Threading.Tasks.Task<ApiResponse<CryptoSpotOrderPreview>> CryptoSpotPreviewOrderWithHttpInfoAsync(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get a quote for a cyrptocurrency market
        /// </summary>
        /// <remarks>
        /// Gets a quote for the specified account. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotQuoteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CryptoSpotQuote</returns>
        System.Threading.Tasks.Task<CryptoSpotQuote> CryptoSpotQuoteAsync(string userId, string userSecret, TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get a quote for a cyrptocurrency market
        /// </summary>
        /// <remarks>
        /// Gets a quote for the specified account. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotQuoteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CryptoSpotQuote)</returns>
        System.Threading.Tasks.Task<ApiResponse<CryptoSpotQuote>> CryptoSpotQuoteWithHttpInfoAsync(string userId, string userSecret, TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Search crypto spot markets
        /// </summary>
        /// <remarks>
        /// Searches cryptocurrency spot markets accessible to the specified account. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotSearchMarketsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CryptocurrencyMarket&gt;</returns>
        System.Threading.Tasks.Task<List<CryptocurrencyMarket>> CryptoSpotSearchMarketsAsync(string userId, string userSecret, TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Search crypto spot markets
        /// </summary>
        /// <remarks>
        /// Searches cryptocurrency spot markets accessible to the specified account. 
        /// </remarks>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotSearchMarketsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CryptocurrencyMarket&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<CryptocurrencyMarket>>> CryptoSpotSearchMarketsWithHttpInfoAsync(string userId, string userSecret, TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICryptoSpotTradingApi : ICryptoSpotTradingApiSync, ICryptoSpotTradingApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CryptoSpotTradingApiGenerated : ICryptoSpotTradingApi
    {
        private SnapTrade.Net.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoSpotTradingApiGenerated"/> class.
        /// </summary>
        /// <returns></returns>
        public CryptoSpotTradingApiGenerated() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoSpotTradingApiGenerated"/> class.
        /// </summary>
        /// <returns></returns>
        public CryptoSpotTradingApiGenerated(string basePath)
        {
            this.Configuration = SnapTrade.Net.Client.Configuration.MergeConfigurations(
                SnapTrade.Net.Client.GlobalConfiguration.Instance,
                new SnapTrade.Net.Client.Configuration { BasePath = basePath }
            );
            this.Client = new SnapTrade.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new SnapTrade.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = SnapTrade.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoSpotTradingApiGenerated"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CryptoSpotTradingApiGenerated(SnapTrade.Net.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = SnapTrade.Net.Client.Configuration.MergeConfigurations(
                SnapTrade.Net.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new SnapTrade.Net.Client.ApiClient(this.Configuration);
            this.AsynchronousClient = new SnapTrade.Net.Client.ApiClient(this.Configuration);
            this.ExceptionFactory = SnapTrade.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CryptoSpotTradingApiGenerated"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CryptoSpotTradingApiGenerated(SnapTrade.Net.Client.ISynchronousClient client, SnapTrade.Net.Client.IAsynchronousClient asyncClient, SnapTrade.Net.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = SnapTrade.Net.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public SnapTrade.Net.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public SnapTrade.Net.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public SnapTrade.Net.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public SnapTrade.Net.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Place a spot order on a crypto exchange Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AccountOrderRecord</returns>
        public AccountOrderRecord CryptoSpotPlaceOrder(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0)
        {
            SnapTrade.Net.Client.ApiResponse<AccountOrderRecord> localVarResponse = CryptoSpotPlaceOrderWithHttpInfo(userId, userSecret, tradingCryptoSpotPlaceOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Place a spot order on a crypto exchange Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AccountOrderRecord</returns>
        public SnapTrade.Net.Client.ApiResponse<AccountOrderRecord> CryptoSpotPlaceOrderWithHttpInfo(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userId' when calling CryptoSpotTradingApi->CryptoSpotPlaceOrder");
            }

            // verify the required parameter 'userSecret' is set
            if (userSecret == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userSecret' when calling CryptoSpotTradingApi->CryptoSpotPlaceOrder");
            }

            // verify the required parameter 'tradingCryptoSpotPlaceOrderRequest' is set
            if (tradingCryptoSpotPlaceOrderRequest == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'tradingCryptoSpotPlaceOrderRequest' when calling CryptoSpotTradingApi->CryptoSpotPlaceOrder");
            }

            SnapTrade.Net.Client.RequestOptions localVarRequestOptions = new SnapTrade.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapTrade.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SnapTrade.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userId", userId, ""));
            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userSecret", userSecret, ""));
            localVarRequestOptions.Data = tradingCryptoSpotPlaceOrderRequest;

            localVarRequestOptions.Operation = "CryptoSpotTradingApi.CryptoSpotPlaceOrder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerClientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "clientId", this.Configuration.GetApiKeyWithPrefix("clientId")));
            }
            // authentication (PartnerSignature) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Signature")))
            {
                localVarRequestOptions.HeaderParameters.Add("Signature", this.Configuration.GetApiKeyWithPrefix("Signature"));
            }
            // authentication (PartnerTimestamp) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<AccountOrderRecord>("/trading/crypto/spot/placeOrder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CryptoSpotPlaceOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Place a spot order on a crypto exchange Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AccountOrderRecord</returns>
        public async System.Threading.Tasks.Task<AccountOrderRecord> CryptoSpotPlaceOrderAsync(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapTrade.Net.Client.ApiResponse<AccountOrderRecord> localVarResponse = await CryptoSpotPlaceOrderWithHttpInfoAsync(userId, userSecret, tradingCryptoSpotPlaceOrderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Place a spot order on a crypto exchange Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AccountOrderRecord)</returns>
        public virtual async System.Threading.Tasks.Task<SnapTrade.Net.Client.ApiResponse<AccountOrderRecord>> CryptoSpotPlaceOrderWithHttpInfoAsync(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userId' when calling CryptoSpotTradingApi->CryptoSpotPlaceOrder");
            }

            // verify the required parameter 'userSecret' is set
            if (userSecret == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userSecret' when calling CryptoSpotTradingApi->CryptoSpotPlaceOrder");
            }

            // verify the required parameter 'tradingCryptoSpotPlaceOrderRequest' is set
            if (tradingCryptoSpotPlaceOrderRequest == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'tradingCryptoSpotPlaceOrderRequest' when calling CryptoSpotTradingApi->CryptoSpotPlaceOrder");
            }


            SnapTrade.Net.Client.RequestOptions localVarRequestOptions = new SnapTrade.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapTrade.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SnapTrade.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userId", userId, ""));
            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userSecret", userSecret, ""));
            localVarRequestOptions.Data = tradingCryptoSpotPlaceOrderRequest;

            localVarRequestOptions.Operation = "CryptoSpotTradingApi.CryptoSpotPlaceOrder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerClientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "clientId", this.Configuration.GetApiKeyWithPrefix("clientId")));
            }
            // authentication (PartnerSignature) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Signature")))
            {
                localVarRequestOptions.HeaderParameters.Add("Signature", this.Configuration.GetApiKeyWithPrefix("Signature"));
            }
            // authentication (PartnerTimestamp) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AccountOrderRecord>("/trading/crypto/spot/placeOrder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CryptoSpotPlaceOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Place a spot order on a crypto exchange Previews a cryptocurrency spot order using the specified account. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CryptoSpotOrderPreview</returns>
        public CryptoSpotOrderPreview CryptoSpotPreviewOrder(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0)
        {
            SnapTrade.Net.Client.ApiResponse<CryptoSpotOrderPreview> localVarResponse = CryptoSpotPreviewOrderWithHttpInfo(userId, userSecret, tradingCryptoSpotPlaceOrderRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Place a spot order on a crypto exchange Previews a cryptocurrency spot order using the specified account. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CryptoSpotOrderPreview</returns>
        public SnapTrade.Net.Client.ApiResponse<CryptoSpotOrderPreview> CryptoSpotPreviewOrderWithHttpInfo(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userId' when calling CryptoSpotTradingApi->CryptoSpotPreviewOrder");
            }

            // verify the required parameter 'userSecret' is set
            if (userSecret == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userSecret' when calling CryptoSpotTradingApi->CryptoSpotPreviewOrder");
            }

            // verify the required parameter 'tradingCryptoSpotPlaceOrderRequest' is set
            if (tradingCryptoSpotPlaceOrderRequest == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'tradingCryptoSpotPlaceOrderRequest' when calling CryptoSpotTradingApi->CryptoSpotPreviewOrder");
            }

            SnapTrade.Net.Client.RequestOptions localVarRequestOptions = new SnapTrade.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapTrade.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SnapTrade.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userId", userId, ""));
            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userSecret", userSecret, ""));
            localVarRequestOptions.Data = tradingCryptoSpotPlaceOrderRequest;

            localVarRequestOptions.Operation = "CryptoSpotTradingApi.CryptoSpotPreviewOrder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerClientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "clientId", this.Configuration.GetApiKeyWithPrefix("clientId")));
            }
            // authentication (PartnerSignature) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Signature")))
            {
                localVarRequestOptions.HeaderParameters.Add("Signature", this.Configuration.GetApiKeyWithPrefix("Signature"));
            }
            // authentication (PartnerTimestamp) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CryptoSpotOrderPreview>("/trading/crypto/spot/previewOrder", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CryptoSpotPreviewOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Place a spot order on a crypto exchange Previews a cryptocurrency spot order using the specified account. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CryptoSpotOrderPreview</returns>
        public async System.Threading.Tasks.Task<CryptoSpotOrderPreview> CryptoSpotPreviewOrderAsync(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapTrade.Net.Client.ApiResponse<CryptoSpotOrderPreview> localVarResponse = await CryptoSpotPreviewOrderWithHttpInfoAsync(userId, userSecret, tradingCryptoSpotPlaceOrderRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Place a spot order on a crypto exchange Previews a cryptocurrency spot order using the specified account. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotPlaceOrderRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CryptoSpotOrderPreview)</returns>
        public virtual async System.Threading.Tasks.Task<SnapTrade.Net.Client.ApiResponse<CryptoSpotOrderPreview>> CryptoSpotPreviewOrderWithHttpInfoAsync(string userId, string userSecret, TradingCryptoSpotPlaceOrderRequest tradingCryptoSpotPlaceOrderRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userId' when calling CryptoSpotTradingApi->CryptoSpotPreviewOrder");
            }

            // verify the required parameter 'userSecret' is set
            if (userSecret == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userSecret' when calling CryptoSpotTradingApi->CryptoSpotPreviewOrder");
            }

            // verify the required parameter 'tradingCryptoSpotPlaceOrderRequest' is set
            if (tradingCryptoSpotPlaceOrderRequest == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'tradingCryptoSpotPlaceOrderRequest' when calling CryptoSpotTradingApi->CryptoSpotPreviewOrder");
            }


            SnapTrade.Net.Client.RequestOptions localVarRequestOptions = new SnapTrade.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapTrade.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SnapTrade.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userId", userId, ""));
            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userSecret", userSecret, ""));
            localVarRequestOptions.Data = tradingCryptoSpotPlaceOrderRequest;

            localVarRequestOptions.Operation = "CryptoSpotTradingApi.CryptoSpotPreviewOrder";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerClientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "clientId", this.Configuration.GetApiKeyWithPrefix("clientId")));
            }
            // authentication (PartnerSignature) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Signature")))
            {
                localVarRequestOptions.HeaderParameters.Add("Signature", this.Configuration.GetApiKeyWithPrefix("Signature"));
            }
            // authentication (PartnerTimestamp) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CryptoSpotOrderPreview>("/trading/crypto/spot/previewOrder", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CryptoSpotPreviewOrder", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a quote for a cyrptocurrency market Gets a quote for the specified account. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotQuoteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>CryptoSpotQuote</returns>
        public CryptoSpotQuote CryptoSpotQuote(string userId, string userSecret, TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest, int operationIndex = 0)
        {
            SnapTrade.Net.Client.ApiResponse<CryptoSpotQuote> localVarResponse = CryptoSpotQuoteWithHttpInfo(userId, userSecret, tradingCryptoSpotQuoteRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a quote for a cyrptocurrency market Gets a quote for the specified account. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotQuoteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of CryptoSpotQuote</returns>
        public SnapTrade.Net.Client.ApiResponse<CryptoSpotQuote> CryptoSpotQuoteWithHttpInfo(string userId, string userSecret, TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userId' when calling CryptoSpotTradingApi->CryptoSpotQuote");
            }

            // verify the required parameter 'userSecret' is set
            if (userSecret == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userSecret' when calling CryptoSpotTradingApi->CryptoSpotQuote");
            }

            // verify the required parameter 'tradingCryptoSpotQuoteRequest' is set
            if (tradingCryptoSpotQuoteRequest == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'tradingCryptoSpotQuoteRequest' when calling CryptoSpotTradingApi->CryptoSpotQuote");
            }

            SnapTrade.Net.Client.RequestOptions localVarRequestOptions = new SnapTrade.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapTrade.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SnapTrade.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userId", userId, ""));
            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userSecret", userSecret, ""));
            localVarRequestOptions.Data = tradingCryptoSpotQuoteRequest;

            localVarRequestOptions.Operation = "CryptoSpotTradingApi.CryptoSpotQuote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerClientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "clientId", this.Configuration.GetApiKeyWithPrefix("clientId")));
            }
            // authentication (PartnerSignature) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Signature")))
            {
                localVarRequestOptions.HeaderParameters.Add("Signature", this.Configuration.GetApiKeyWithPrefix("Signature"));
            }
            // authentication (PartnerTimestamp) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<CryptoSpotQuote>("/trading/crypto/spot/quote", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CryptoSpotQuote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get a quote for a cyrptocurrency market Gets a quote for the specified account. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotQuoteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of CryptoSpotQuote</returns>
        public async System.Threading.Tasks.Task<CryptoSpotQuote> CryptoSpotQuoteAsync(string userId, string userSecret, TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapTrade.Net.Client.ApiResponse<CryptoSpotQuote> localVarResponse = await CryptoSpotQuoteWithHttpInfoAsync(userId, userSecret, tradingCryptoSpotQuoteRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get a quote for a cyrptocurrency market Gets a quote for the specified account. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotQuoteRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (CryptoSpotQuote)</returns>
        public virtual async System.Threading.Tasks.Task<SnapTrade.Net.Client.ApiResponse<CryptoSpotQuote>> CryptoSpotQuoteWithHttpInfoAsync(string userId, string userSecret, TradingCryptoSpotQuoteRequest tradingCryptoSpotQuoteRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userId' when calling CryptoSpotTradingApi->CryptoSpotQuote");
            }

            // verify the required parameter 'userSecret' is set
            if (userSecret == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userSecret' when calling CryptoSpotTradingApi->CryptoSpotQuote");
            }

            // verify the required parameter 'tradingCryptoSpotQuoteRequest' is set
            if (tradingCryptoSpotQuoteRequest == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'tradingCryptoSpotQuoteRequest' when calling CryptoSpotTradingApi->CryptoSpotQuote");
            }


            SnapTrade.Net.Client.RequestOptions localVarRequestOptions = new SnapTrade.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapTrade.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SnapTrade.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userId", userId, ""));
            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userSecret", userSecret, ""));
            localVarRequestOptions.Data = tradingCryptoSpotQuoteRequest;

            localVarRequestOptions.Operation = "CryptoSpotTradingApi.CryptoSpotQuote";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerClientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "clientId", this.Configuration.GetApiKeyWithPrefix("clientId")));
            }
            // authentication (PartnerSignature) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Signature")))
            {
                localVarRequestOptions.HeaderParameters.Add("Signature", this.Configuration.GetApiKeyWithPrefix("Signature"));
            }
            // authentication (PartnerTimestamp) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<CryptoSpotQuote>("/trading/crypto/spot/quote", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CryptoSpotQuote", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search crypto spot markets Searches cryptocurrency spot markets accessible to the specified account. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotSearchMarketsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;CryptocurrencyMarket&gt;</returns>
        public List<CryptocurrencyMarket> CryptoSpotSearchMarkets(string userId, string userSecret, TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest, int operationIndex = 0)
        {
            SnapTrade.Net.Client.ApiResponse<List<CryptocurrencyMarket>> localVarResponse = CryptoSpotSearchMarketsWithHttpInfo(userId, userSecret, tradingCryptoSpotSearchMarketsRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search crypto spot markets Searches cryptocurrency spot markets accessible to the specified account. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotSearchMarketsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;CryptocurrencyMarket&gt;</returns>
        public SnapTrade.Net.Client.ApiResponse<List<CryptocurrencyMarket>> CryptoSpotSearchMarketsWithHttpInfo(string userId, string userSecret, TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userId' when calling CryptoSpotTradingApi->CryptoSpotSearchMarkets");
            }

            // verify the required parameter 'userSecret' is set
            if (userSecret == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userSecret' when calling CryptoSpotTradingApi->CryptoSpotSearchMarkets");
            }

            // verify the required parameter 'tradingCryptoSpotSearchMarketsRequest' is set
            if (tradingCryptoSpotSearchMarketsRequest == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'tradingCryptoSpotSearchMarketsRequest' when calling CryptoSpotTradingApi->CryptoSpotSearchMarkets");
            }

            SnapTrade.Net.Client.RequestOptions localVarRequestOptions = new SnapTrade.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapTrade.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SnapTrade.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userId", userId, ""));
            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userSecret", userSecret, ""));
            localVarRequestOptions.Data = tradingCryptoSpotSearchMarketsRequest;

            localVarRequestOptions.Operation = "CryptoSpotTradingApi.CryptoSpotSearchMarkets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerClientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "clientId", this.Configuration.GetApiKeyWithPrefix("clientId")));
            }
            // authentication (PartnerSignature) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Signature")))
            {
                localVarRequestOptions.HeaderParameters.Add("Signature", this.Configuration.GetApiKeyWithPrefix("Signature"));
            }
            // authentication (PartnerTimestamp) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<List<CryptocurrencyMarket>>("/trading/crypto/spot/searchMarkets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CryptoSpotSearchMarkets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Search crypto spot markets Searches cryptocurrency spot markets accessible to the specified account. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotSearchMarketsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;CryptocurrencyMarket&gt;</returns>
        public async System.Threading.Tasks.Task<List<CryptocurrencyMarket>> CryptoSpotSearchMarketsAsync(string userId, string userSecret, TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            SnapTrade.Net.Client.ApiResponse<List<CryptocurrencyMarket>> localVarResponse = await CryptoSpotSearchMarketsWithHttpInfoAsync(userId, userSecret, tradingCryptoSpotSearchMarketsRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Search crypto spot markets Searches cryptocurrency spot markets accessible to the specified account. 
        /// </summary>
        /// <exception cref="SnapTrade.Net.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="userSecret"></param>
        /// <param name="tradingCryptoSpotSearchMarketsRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;CryptocurrencyMarket&gt;)</returns>
        public virtual async System.Threading.Tasks.Task<SnapTrade.Net.Client.ApiResponse<List<CryptocurrencyMarket>>> CryptoSpotSearchMarketsWithHttpInfoAsync(string userId, string userSecret, TradingCryptoSpotSearchMarketsRequest tradingCryptoSpotSearchMarketsRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userId' when calling CryptoSpotTradingApi->CryptoSpotSearchMarkets");
            }

            // verify the required parameter 'userSecret' is set
            if (userSecret == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'userSecret' when calling CryptoSpotTradingApi->CryptoSpotSearchMarkets");
            }

            // verify the required parameter 'tradingCryptoSpotSearchMarketsRequest' is set
            if (tradingCryptoSpotSearchMarketsRequest == null)
            {
                throw new SnapTrade.Net.Client.ApiException(400, "Missing required parameter 'tradingCryptoSpotSearchMarketsRequest' when calling CryptoSpotTradingApi->CryptoSpotSearchMarkets");
            }


            SnapTrade.Net.Client.RequestOptions localVarRequestOptions = new SnapTrade.Net.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = SnapTrade.Net.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = SnapTrade.Net.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userId", userId, ""));
            localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "userSecret", userSecret, ""));
            localVarRequestOptions.Data = tradingCryptoSpotSearchMarketsRequest;

            localVarRequestOptions.Operation = "CryptoSpotTradingApi.CryptoSpotSearchMarkets";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (PartnerClientId) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("clientId")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "clientId", this.Configuration.GetApiKeyWithPrefix("clientId")));
            }
            // authentication (PartnerSignature) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Signature")))
            {
                localVarRequestOptions.HeaderParameters.Add("Signature", this.Configuration.GetApiKeyWithPrefix("Signature"));
            }
            // authentication (PartnerTimestamp) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("timestamp")))
            {
                localVarRequestOptions.QueryParameters.Add(SnapTrade.Net.Client.ClientUtils.ParameterToMultiMap("", "timestamp", this.Configuration.GetApiKeyWithPrefix("timestamp")));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<List<CryptocurrencyMarket>>("/trading/crypto/spot/searchMarkets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CryptoSpotSearchMarkets", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
