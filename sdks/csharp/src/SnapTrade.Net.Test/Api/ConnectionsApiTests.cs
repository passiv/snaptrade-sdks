/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SnapTrade.Net.Client;
using SnapTrade.Net.Api;
using SnapTrade.Net.Model;

namespace SnapTrade.Net.Test.Api
{
    /// <summary>
    ///  Class for testing ConnectionsApi
    /// </summary>
    public class ConnectionsApiTests : IDisposable
    {
        private Snaptrade client;

        public ConnectionsApiTests()
        {
            client = new Snaptrade();
            client.SetBasePath("http://127.0.0.1:4010");
            // Configure custom BasePath if desired
            // client.SetBasePath("https://api.snaptrade.com/api/v1");
            client.SetClientId(System.Environment.GetEnvironmentVariable("SNAPTRADE_CLIENT_ID"));
            client.SetConsumerKey(System.Environment.GetEnvironmentVariable("SNAPTRADE_CONSUMER_KEY"));

        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test DetailBrokerageAuthorization
        /// </summary>
        [Fact]
        public void DetailBrokerageAuthorizationTest()
        {
            var authorizationId = "authorizationId_example";
            var userId = "userId_example";
            var userSecret = "userSecret_example";
            
            try
            {
                // Get connection detail
                BrokerageAuthorization result = client.Connections.DetailBrokerageAuthorization(authorizationId, userId, userSecret);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ConnectionsApi.DetailBrokerageAuthorization: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test DisableBrokerageAuthorization
        /// </summary>
        [Fact]
        public void DisableBrokerageAuthorizationTest()
        {
            var authorizationId = "authorizationId_example";
            var userId = "userId_example";
            var userSecret = "userSecret_example";
            
            try
            {
                // Force disable connection
                BrokerageAuthorizationDisabledConfirmation result = client.Connections.DisableBrokerageAuthorization(authorizationId, userId, userSecret);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ConnectionsApi.DisableBrokerageAuthorization: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test ListBrokerageAuthorizations
        /// </summary>
        [Fact]
        public void ListBrokerageAuthorizationsTest()
        {
            var userId = "userId_example";
            var userSecret = "userSecret_example";
            
            try
            {
                // List all connections
                List<BrokerageAuthorization> result = client.Connections.ListBrokerageAuthorizations(userId, userSecret);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ConnectionsApi.ListBrokerageAuthorizations: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test RefreshBrokerageAuthorization
        /// </summary>
        [Fact]
        public void RefreshBrokerageAuthorizationTest()
        {
            var authorizationId = "authorizationId_example";
            var userId = "userId_example";
            var userSecret = "userSecret_example";
            
            try
            {
                // Refresh holdings for a connection
                BrokerageAuthorizationRefreshConfirmation result = client.Connections.RefreshBrokerageAuthorization(authorizationId, userId, userSecret);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ConnectionsApi.RefreshBrokerageAuthorization: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test RemoveBrokerageAuthorization
        /// </summary>
        [Fact]
        public void RemoveBrokerageAuthorizationTest()
        {
            var authorizationId = "authorizationId_example";
            var userId = "userId_example";
            var userSecret = "userSecret_example";
            
            try
            {
                // Delete connection
                client.Connections.RemoveBrokerageAuthorization(authorizationId, userId, userSecret);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ConnectionsApi.RemoveBrokerageAuthorization: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test ReturnRates
        /// </summary>
        [Fact]
        public void ReturnRatesTest()
        {
            var userId = "userId_example";
            var userSecret = "userSecret_example";
            var authorizationId = "authorizationId_example";
            
            try
            {
                // List connection rate of returns
                RateOfReturnResponse result = client.Connections.ReturnRates(userId, userSecret, authorizationId);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ConnectionsApi.ReturnRates: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test SessionEvents
        /// </summary>
        [Fact]
        public void SessionEventsTest()
        {
            var partnerClientId = "partnerClientId_example";
            var userId = "userId_example"; // Optional comma separated list of user IDs used to filter the request on specific users (optional) 
            var sessionId = "sessionId_example"; // Optional comma separated list of session IDs used to filter the request on specific users (optional) 
            
            try
            {
                // Get all session events for a user
                List<ConnectionsSessionEvents200ResponseInner> result = client.Connections.SessionEvents(partnerClientId, userId, sessionId);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ConnectionsApi.SessionEvents: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }
    }
}
