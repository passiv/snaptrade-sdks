/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SnapTrade.Net.Client;
using SnapTrade.Net.Api;
using SnapTrade.Net.Model;

namespace SnapTrade.Net.Test.Api
{
    /// <summary>
    ///  Class for testing CryptoTradingApi
    /// </summary>
    public class CryptoTradingApiTests : IDisposable
    {
        private Snaptrade client;

        public CryptoTradingApiTests()
        {
            client = new Snaptrade();
            client.SetBasePath("http://127.0.0.1:4010");
            // Configure custom BasePath if desired
            // client.SetBasePath("https://api.snaptrade.com/api/v1");
            client.SetClientId(System.Environment.GetEnvironmentVariable("SNAPTRADE_CLIENT_ID"));
            client.SetConsumerKey(System.Environment.GetEnvironmentVariable("SNAPTRADE_CONSUMER_KEY"));

        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test GetCryptocurrencyPairQuote
        /// </summary>
        [Fact]
        public void GetCryptocurrencyPairQuoteTest()
        {
            var userId = "userId_example";
            var userSecret = "userSecret_example";
            var accountId = "accountId_example";
            var instrumentSymbol = "instrumentSymbol_example";
            
            try
            {
                // Get cryptocurrency pair quote
                CryptocurrencyPairQuote result = client.CryptoTrading.GetCryptocurrencyPairQuote(userId, userSecret, accountId, instrumentSymbol);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling CryptoTradingApi.GetCryptocurrencyPairQuote: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test PlaceSimpleOrder
        /// </summary>
        [Fact]
        public void PlaceSimpleOrderTest()
        {
            var userId = "userId_example";
            var userSecret = "userSecret_example";
            var accountId = "accountId_example";
            var instrument = new TradingInstrument();
            var side = ActionStrict.BUY;
            var type = SimpleOrderForm.TypeEnum.MARKET; // The type of order to place.
            var timeInForce = SimpleOrderForm.TimeInForceEnum.GTC; // The Time in Force type for the order. This field indicates how long the order will remain active before it is executed or expires.   - `GTC` - Good Til Canceled. The order is valid until it is executed or canceled.   - `FOK` - Fill Or Kill. The order must be executed in its entirety immediately or be canceled completely.   - `IOC` - Immediate Or Cancel. The order must be executed immediately. Any portion of the order that cannot be filled immediately will be canceled.   - `GTD` - Good Til Date. The order is valid until the specified date. 
            var amount = "123.45"; // The amount of the base currency to buy or sell.
            var limitPrice = "123.45"; // The limit price. Required if the order type is LIMIT, STOP_LOSS_LIMIT or TAKE_PROFIT_LIMIT.
            var stopPrice = "123.45"; // The stop price. Required if the order type is STOP_LOSS_MARKET, STOP_LOSS_LIMIT, TAKE_PROFIT_MARKET or TAKE_PROFIT_LIMIT.
            var postOnly = false; // Valid and required only for order type LIMIT. If true orders that would be filled immediately are rejected to avoid incurring TAKER fees. 
            var expirationDate = DateTime.Now; // The expiration date of the order. Required if the time_in_force is GTD.
            
            var simpleOrderForm = new SimpleOrderForm(
                instrument,
                side,
                type,
                timeInForce,
                amount,
                limitPrice,
                stopPrice,
                postOnly,
                expirationDate
            );
            
            try
            {
                // Place order v2
                OrderUpdatedResponse result = client.CryptoTrading.PlaceSimpleOrder(userId, userSecret, accountId, simpleOrderForm);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling CryptoTradingApi.PlaceSimpleOrder: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test SearchCryptocurrencyPairInstruments
        /// </summary>
        [Fact]
        public void SearchCryptocurrencyPairInstrumentsTest()
        {
            var userId = "userId_example";
            var userSecret = "userSecret_example";
            var accountId = "accountId_example";
            var _base = "_base_example";
            var quote = "quote_example";
            
            try
            {
                // Search cryptocurrency pairs instruments
                TradingSearchCryptocurrencyPairInstruments200Response result = client.CryptoTrading.SearchCryptocurrencyPairInstruments(userId, userSecret, accountId, _base, quote);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling CryptoTradingApi.SearchCryptocurrencyPairInstruments: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }
    }
}
