/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SnapTrade.Net.Client;
using SnapTrade.Net.Api;
using SnapTrade.Net.Model;

namespace SnapTrade.Net.Test.Api
{
    /// <summary>
    ///  Class for testing ReferenceDataApi
    /// </summary>
    public class ReferenceDataApiTests : IDisposable
    {
        private Snaptrade client;

        public ReferenceDataApiTests()
        {
            client = new Snaptrade();
            client.SetBasePath("http://127.0.0.1:4010");
            // Configure custom BasePath if desired
            // client.SetBasePath("https://api.snaptrade.com/api/v1");
            client.SetClientId(System.Environment.GetEnvironmentVariable("SNAPTRADE_CLIENT_ID"));
            client.SetConsumerKey(System.Environment.GetEnvironmentVariable("SNAPTRADE_CONSUMER_KEY"));

        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test GetCurrencyExchangeRatePair
        /// </summary>
        [Fact]
        public void GetCurrencyExchangeRatePairTest()
        {
            var currencyPair = "currencyPair_example"; // A currency pair based on currency code for example, {CAD-USD}
            
            try
            {
                // Get exchange rate of a currency pair
                ExchangeRatePairs result = client.ReferenceData.GetCurrencyExchangeRatePair(currencyPair);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ReferenceDataApi.GetCurrencyExchangeRatePair: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test GetPartnerInfo
        /// </summary>
        [Fact]
        public void GetPartnerInfoTest()
        {
            
            try
            {
                // Get Client Info
                PartnerData result = client.ReferenceData.GetPartnerInfo();
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ReferenceDataApi.GetPartnerInfo: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test GetSecurityTypes
        /// </summary>
        [Fact]
        public void GetSecurityTypesTest()
        {
            
            try
            {
                // List security types
                List<SecurityType> result = client.ReferenceData.GetSecurityTypes();
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ReferenceDataApi.GetSecurityTypes: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test GetStockExchanges
        /// </summary>
        [Fact]
        public void GetStockExchangesTest()
        {
            
            try
            {
                // Get exchanges
                List<Exchange> result = client.ReferenceData.GetStockExchanges();
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ReferenceDataApi.GetStockExchanges: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test GetSymbols
        /// </summary>
        [Fact]
        public void GetSymbolsTest()
        {
            var substring = "AAPL"; // The search query for symbols.
            
            var symbolQuery = new SymbolQuery(
                substring
            );
            
            try
            {
                // Search symbols
                List<UniversalSymbol> result = client.ReferenceData.GetSymbols(symbolQuery);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ReferenceDataApi.GetSymbols: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test GetSymbolsByTicker
        /// </summary>
        [Fact]
        public void GetSymbolsByTickerTest()
        {
            var query = "query_example"; // The ticker or Universal Symbol ID to look up the symbol with.
            
            try
            {
                // Get symbol detail
                UniversalSymbol result = client.ReferenceData.GetSymbolsByTicker(query);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ReferenceDataApi.GetSymbolsByTicker: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test ListAllBrokerageAuthorizationType
        /// </summary>
        [Fact]
        public void ListAllBrokerageAuthorizationTypeTest()
        {
            var brokerage = "QUESTRADE,ALPACA"; // Comma separated value of brokerage slugs (optional) 
            
            try
            {
                // Get all brokerage authorization types
                List<BrokerageAuthorizationTypeReadOnly> result = client.ReferenceData.ListAllBrokerageAuthorizationType(brokerage);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ReferenceDataApi.ListAllBrokerageAuthorizationType: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test ListAllBrokerageInstruments
        /// </summary>
        [Fact]
        public void ListAllBrokerageInstrumentsTest()
        {
            var slug = "QUESTRADE"; // A short, unique identifier for the brokerage. It is usually the name of the brokerage in capital letters and will never change.
            
            try
            {
                // Get brokerage instruments
                BrokerageInstrumentsResponse result = client.ReferenceData.ListAllBrokerageInstruments(slug);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ReferenceDataApi.ListAllBrokerageInstruments: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test ListAllBrokerages
        /// </summary>
        [Fact]
        public void ListAllBrokeragesTest()
        {
            
            try
            {
                // Get brokerages
                List<Brokerage> result = client.ReferenceData.ListAllBrokerages();
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ReferenceDataApi.ListAllBrokerages: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test ListAllCurrencies
        /// </summary>
        [Fact]
        public void ListAllCurrenciesTest()
        {
            
            try
            {
                // Get currencies
                List<Currency> result = client.ReferenceData.ListAllCurrencies();
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ReferenceDataApi.ListAllCurrencies: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test ListAllCurrenciesRates
        /// </summary>
        [Fact]
        public void ListAllCurrenciesRatesTest()
        {
            
            try
            {
                // Get currency exchange rates
                List<ExchangeRatePairs> result = client.ReferenceData.ListAllCurrenciesRates();
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ReferenceDataApi.ListAllCurrenciesRates: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }

        /// <summary>
        /// Test SymbolSearchUserAccount
        /// </summary>
        [Fact]
        public void SymbolSearchUserAccountTest()
        {
            var userId = "userId_example";
            var userSecret = "userSecret_example";
            var accountId = "accountId_example";
            var substring = "AAPL"; // The search query for symbols.
            
            var symbolQuery = new SymbolQuery(
                substring
            );
            
            try
            {
                // Search account symbols
                List<UniversalSymbol> result = client.ReferenceData.SymbolSearchUserAccount(userId, userSecret, accountId, symbolQuery);
                Console.WriteLine(result);
            }
            catch (ApiException e)
            {
                Console.WriteLine("Exception when calling ReferenceDataApi.SymbolSearchUserAccount: " + e.Message);
                Console.WriteLine("Status Code: "+ e.ErrorCode);
                Console.WriteLine(e.StackTrace);
            }
            catch (ClientException e)
            {
                Console.WriteLine(e.Response.StatusCode);
                Console.WriteLine(e.Response.RawContent);
                Console.WriteLine(e.InnerException);
            }
        }
    }
}
