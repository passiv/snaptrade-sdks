/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using SnapTrade.Net.Client;
using SnapTrade.Net.Api;
using SnapTrade.Net.Model;
using System.Diagnostics;

namespace SnapTrade.Net.Test.Api
{
    /// <summary>
    ///  Class for testing GettingStarted
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Konfig (https://konfigthis.com).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class GettingStartedTests : IDisposable
    {
        private APIStatusApi apiStatusApi;
        private AuthenticationApi authenticationApi;
        private AccountInformationApi accountInformationApi;

        private TransactionsAndReportingApi transactionsAndReportingApi;

        private ReferenceDataApi referenceDataApi;

        private OptionsApi optionsApi;

        private CryptoSpotTradingApi cryptoSpotTradingApi;

        private string testUserId;

        private string testUserSecret;

        private string clientId;

        private string consumerKey;

        public GettingStartedTests()
        {
            this.clientId = Environment.GetEnvironmentVariable("SNAPTRADE_CLIENT_ID");
            this.consumerKey = Environment.GetEnvironmentVariable("SNAPTRADE_CONSUMER_KEY");
            this.testUserId = Environment.GetEnvironmentVariable("SNAPTRADE_TEST_USER_ID");
            this.testUserSecret = Environment.GetEnvironmentVariable("SNAPTRADE_TEST_USER_SECRET");
            var basePathOverride = Environment.GetEnvironmentVariable("SNAPTRADE_API_URL_OVERRIDE");

            var configuration = new Configuration
            {
                ApiKey = {
                    { "clientId", clientId }
                },
                BasePath = string.IsNullOrEmpty(basePathOverride) ? null : basePathOverride,
                ConsumerKey = this.consumerKey
            };

            apiStatusApi = new APIStatusApi(configuration);
            authenticationApi = new AuthenticationApi(configuration);
            accountInformationApi = new AccountInformationApi(configuration);
            transactionsAndReportingApi = new TransactionsAndReportingApi(configuration);
            referenceDataApi = new ReferenceDataApi(configuration);
            optionsApi = new OptionsApi(configuration);
            cryptoSpotTradingApi = new CryptoSpotTradingApi(configuration);
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        [Fact]
        public void ApiStatusCheck()
        {
            Status status = apiStatusApi.Check();
            Console.WriteLine(status.ToJson());
            Assert.NotNull(status);
            ApiResponse<Status> response = apiStatusApi.CheckWithHttpInfo();
            Console.WriteLine("Status Code: " + response.StatusCode);
            Console.WriteLine("Response Headers: " + response.Headers);
            Console.WriteLine("Response Data: " + response.Data);
            Console.WriteLine("Response RawContent: " + response.RawContent);
            Assert.NotNull(response);
        }

        [Fact]
        public void GettingStartedTest()
        {
            Status status = apiStatusApi.Check();
            Console.WriteLine(status.ToJson());
            string uuid = Guid.NewGuid().ToString();
            UserIDandSecret userIDandSecret = authenticationApi.RegisterSnapTradeUser(new SnapTradeRegisterUserRequestBody(uuid));
            Console.WriteLine(string.Format("userID: {0}, userSecret: {1}", userIDandSecret.UserId, userIDandSecret.UserSecret));
            var redirectUri = authenticationApi.LoginSnapTradeUser(userIDandSecret.UserId, userIDandSecret.UserSecret).GetLoginRedirectURI().RedirectURI;
            Console.WriteLine(redirectUri);
            var holdings = accountInformationApi.GetAllUserHoldings(userIDandSecret.UserId, userIDandSecret.UserSecret);
            Console.WriteLine(holdings);
            var deleteResponse = authenticationApi.DeleteSnapTradeUser(userIDandSecret.UserId);
            Console.WriteLine(deleteResponse);
        }

        [Fact]
        public void GettingStartedNewClientTest()
        {
            Snaptrade snaptrade = new Snaptrade();
            snaptrade.SetClientId(clientId);
            snaptrade.SetConsumerKey(consumerKey);
            Status status = snaptrade.APIStatus.Check();
            Console.WriteLine(status.ToJson());
            string uuid = Guid.NewGuid().ToString();
            UserIDandSecret userIDandSecret = snaptrade.Authentication.RegisterSnapTradeUser(new SnapTradeRegisterUserRequestBody(uuid));
            Console.WriteLine(string.Format("userID: {0}, userSecret: {1}", userIDandSecret.UserId, userIDandSecret.UserSecret));
            var redirectUri = snaptrade.Authentication.LoginSnapTradeUser(userIDandSecret.UserId, userIDandSecret.UserSecret).GetLoginRedirectURI().RedirectURI;
            Console.WriteLine(redirectUri);
            var holdings = snaptrade.AccountInformation.GetAllUserHoldings(userIDandSecret.UserId, userIDandSecret.UserSecret);
            Console.WriteLine(holdings);
            var deleteResponse = snaptrade.Authentication.DeleteSnapTradeUser(userIDandSecret.UserId);
            Console.WriteLine(deleteResponse);
        }

        [Fact]
        public void GettingStartedWithEmailUserIdTest()
        {
            Status status = apiStatusApi.Check();
            Console.WriteLine(status.ToJson());
            string uuid = Guid.NewGuid().ToString();
            string userId = $"{uuid}+test2@gmail.com";
            UserIDandSecret userIDandSecret = authenticationApi.RegisterSnapTradeUser(new SnapTradeRegisterUserRequestBody(userId));
            Console.WriteLine(string.Format("userID: {0}, userSecret: {1}", userIDandSecret.UserId, userIDandSecret.UserSecret));
            var redirectUri = authenticationApi.LoginSnapTradeUser(userIDandSecret.UserId, userIDandSecret.UserSecret).GetLoginRedirectURI().RedirectURI;
            Console.WriteLine(redirectUri);
            var holdings = accountInformationApi.GetAllUserHoldings(userIDandSecret.UserId, userIDandSecret.UserSecret);
            Console.WriteLine(holdings);
            var deleteResponse = authenticationApi.DeleteSnapTradeUser(userIDandSecret.UserId);
            Console.WriteLine(deleteResponse);
        }

        [Fact]
        public void GetUserAccountBalance()
        {
            var accounts = accountInformationApi.ListUserAccounts(this.testUserId, this.testUserSecret);
            Console.WriteLine(accounts);
            var response = accountInformationApi.GetUserAccountBalance(this.testUserId, this.testUserSecret, accounts[0].Id);
            Console.WriteLine(response);
        }

        [Fact]
        public void GetAllUserHoldings()
        {
            // List all accounts for the user, plus balances and positions for each account.
            List<AccountHoldings> result = accountInformationApi.GetAllUserHoldings(this.testUserId, this.testUserSecret);
            Console.WriteLine(result);
        }

        [Fact]
        async public void GetUserHoldings()
        {
            var accounts = await accountInformationApi.ListUserAccountsAsync(this.testUserId, this.testUserSecret);
            Console.WriteLine(accounts);
            var response = await accountInformationApi.GetUserHoldingsAsync(accounts[0].Id, this.testUserId, this.testUserSecret);
            Console.WriteLine(response);
        }


        [Fact]
        async public void GetActivitiesAsync()
        {
            var from = DateTime.Now.AddYears(-1);
            var to = DateTime.Now;
            var activities = await transactionsAndReportingApi.GetActivitiesAsync(this.testUserId, this.testUserSecret, from, to);
            Console.WriteLine(activities);
        }

        [Fact(Skip = "Getting 500 error code")]
        public void GetOptionsChain()
        {
            var accounts = accountInformationApi.ListUserAccounts(this.testUserId, this.testUserSecret);
            Console.WriteLine(accounts.ToString());
            var symbols = referenceDataApi.GetSymbols(new SymbolQuery("apple"));
            Console.WriteLine(symbols.ToString());
            var optionsChain = optionsApi.GetOptionsChain(this.testUserId, this.testUserSecret, accounts[0].Id, symbols[0].Id);
            Console.WriteLine(optionsChain);
        }

        // TODO: Disable or delete
        [Fact]
        public void CryptoSpotOrderExample() {
            var accountId = "83d6e010-759d-4e36-bc1d-65b8f855720f";

            // Get a quote
            var symbol = new CryptocurrencyPair("DOGE", "USDC");
            var quote = cryptoSpotTradingApi.CryptoSpotQuote(
                testUserId,
                testUserSecret,
                accountId:accountId,
                _base: symbol.Base,
                quote: symbol.Quote
            );
            Console.WriteLine("quote: {0}", quote);

            // Place a limit order
            var placeOrderResult = cryptoSpotTradingApi.CryptoSpotPlaceOrder(
                testUserId,
                testUserSecret,
                accountId: accountId,
                new TradingCryptoSpotPlaceOrderRequest(
                    symbol: symbol,
                    side: ActionStrict.SELL,
                    type: TradingCryptoSpotPlaceOrderRequest.TypeEnum.LIMIT,
                    timeInForce: TradingCryptoSpotPlaceOrderRequest.TimeInForceEnum.GTD,
                    expirationDate: DateTime.UtcNow.AddHours(1),
                    amount:42.2m,
                    limitPrice: quote.Ask + 0.1m,
                    postOnly: true
                )
            );

            Console.WriteLine("placeOrderResult: {0}", placeOrderResult);

            // Cancel the order
            var cancelOrderResult = cryptoSpotTradingApi.CryptoSpotCancelOrder(
                testUserId,
                testUserSecret,
                accountId: accountId,
                new TradingCryptoSpotCancelOrderRequest(placeOrderResult.BrokerageOrderId)
            );

            Console.WriteLine("cancelOrderResult: {0}", cancelOrderResult);
        }

        [Fact]
        public void PreviewCryptoSpotOrder() {
            var accountId = "83d6e010-759d-4e36-bc1d-65b8f855720f";

            var response = this.cryptoSpotTradingApi.CryptoSpotPreviewOrder(
                testUserId,
                testUserSecret,
                accountId:accountId,
                new TradingCryptoSpotPlaceOrderRequest(
                    symbol: new CryptocurrencyPair("DOGE", "USDC"),
                    side: ActionStrict.BUY,
                    type: TradingCryptoSpotPlaceOrderRequest.TypeEnum.MARKET,
                    timeInForce: TradingCryptoSpotPlaceOrderRequest.TimeInForceEnum.IOC,
                    amount:20.2m
                )
            );

            Console.WriteLine(response);
        }

        [Fact]
        public void CryptoSpotQuote() {
            var accountId = "83d6e010-759d-4e36-bc1d-65b8f855720f";

            var response = this.cryptoSpotTradingApi.CryptoSpotQuote(
                testUserId,
                testUserSecret,
                accountId:accountId,
                _base: "BTC",
                quote: "USDT"
            );

            Console.WriteLine(response);
        }

        [Fact]
        public void SearchSymbols() {
            var accountId = "83d6e010-759d-4e36-bc1d-65b8f855720f";

            var response = this.cryptoSpotTradingApi.CryptoSpotQuote(
                testUserId,
                testUserSecret,
                accountId:accountId,
                _base: "BTC",
                quote: "USDT"
            );

            Console.WriteLine(response);
        }
    }
}
