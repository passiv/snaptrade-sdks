/*
 * SnapTrade
 *
 * Connect brokerage accounts to your app for live positions and trading
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@snaptrade.com
 * Generated by: https://konfigthis.com
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using SnapTrade.Net.Api;
using SnapTrade.Net.Model;
using SnapTrade.Net.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace SnapTrade.Net.Test.Model
{
    /// <summary>
    ///  Class for testing ManualTradeFormWithOptions
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Konfig (https://konfigthis.com).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ManualTradeFormWithOptionsTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for ManualTradeFormWithOptions
        //private ManualTradeFormWithOptions instance;

        public ManualTradeFormWithOptionsTests()
        {
            // TODO uncomment below to create an instance of ManualTradeFormWithOptions
            //instance = new ManualTradeFormWithOptions();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ManualTradeFormWithOptions
        /// </summary>
        [Fact]
        public void ManualTradeFormWithOptionsInstanceTest()
        {
            // TODO uncomment below to test "IsType" ManualTradeFormWithOptions
            //Assert.IsType<ManualTradeFormWithOptions>(instance);
        }


        /// <summary>
        /// Test the property 'AccountId'
        /// </summary>
        [Fact]
        public void AccountIdTest()
        {
            // TODO unit test for the property 'AccountId'
        }
        /// <summary>
        /// Test the property '_Action'
        /// </summary>
        [Fact]
        public void _ActionTest()
        {
            // TODO unit test for the property '_Action'
        }
        /// <summary>
        /// Test the property 'UniversalSymbolId'
        /// </summary>
        [Fact]
        public void UniversalSymbolIdTest()
        {
            // TODO unit test for the property 'UniversalSymbolId'
        }
        /// <summary>
        /// Test the property 'Symbol'
        /// </summary>
        [Fact]
        public void SymbolTest()
        {
            // TODO unit test for the property 'Symbol'
        }
        /// <summary>
        /// Test the property 'OrderType'
        /// </summary>
        [Fact]
        public void OrderTypeTest()
        {
            // TODO unit test for the property 'OrderType'
        }
        /// <summary>
        /// Test the property 'TimeInForce'
        /// </summary>
        [Fact]
        public void TimeInForceTest()
        {
            // TODO unit test for the property 'TimeInForce'
        }
        /// <summary>
        /// Test the property 'Price'
        /// </summary>
        [Fact]
        public void PriceTest()
        {
            // TODO unit test for the property 'Price'
        }
        /// <summary>
        /// Test the property 'Stop'
        /// </summary>
        [Fact]
        public void StopTest()
        {
            // TODO unit test for the property 'Stop'
        }
        /// <summary>
        /// Test the property 'Units'
        /// </summary>
        [Fact]
        public void UnitsTest()
        {
            // TODO unit test for the property 'Units'
        }
        /// <summary>
        /// Test the property 'NotionalValue'
        /// </summary>
        [Fact]
        public void NotionalValueTest()
        {
            // TODO unit test for the property 'NotionalValue'
        }

    }

}
