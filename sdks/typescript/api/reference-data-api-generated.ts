/* tslint:disable */
/* eslint-disable */
/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

The version of the OpenAPI document: 1.0.0
Contact: api@snaptrade.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Brokerage } from '../models';
// @ts-ignore
import { BrokerageAuthorizationTypeReadOnly } from '../models';
// @ts-ignore
import { BrokerageInstrumentsResponse } from '../models';
// @ts-ignore
import { Currency } from '../models';
// @ts-ignore
import { Exchange } from '../models';
// @ts-ignore
import { ExchangeRatePairs } from '../models';
// @ts-ignore
import { Model400FailedRequestResponse } from '../models';
// @ts-ignore
import { Model401FailedRequestResponse } from '../models';
// @ts-ignore
import { Model404FailedRequestResponse } from '../models';
// @ts-ignore
import { PartnerData } from '../models';
// @ts-ignore
import { SecurityType } from '../models';
// @ts-ignore
import { SymbolQuery } from '../models';
// @ts-ignore
import { UniversalSymbol } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * ReferenceDataApi - axios parameter creator
 * @export
 */
export const ReferenceDataApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns an Exchange Rate Pair object for the specified Currency Pair.
         * @summary Get exchange rate of a currency pair
         * @param {string} currencyPair A currency pair based on currency code for example, {CAD-USD}
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrencyExchangeRatePair: async (currencyPair: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'currencyPair' is not null or undefined
            assertParamExists('getCurrencyExchangeRatePair', 'currencyPair', currencyPair)
            const localVarPath = `/currencies/rates/{currencyPair}`
                .replace(`{${"currencyPair"}}`, encodeURIComponent(String(currencyPair !== undefined ? currencyPair : `-currencyPair-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/currencies/rates/{currencyPair}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns configurations for your SnapTrade Client ID, including allowed brokerages and data access.
         * @summary Get Client Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartnerInfo: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/snapTrade/partners`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/snapTrade/partners',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return all available security types supported by SnapTrade.
         * @summary List security types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecurityTypes: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/securityTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/securityTypes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all supported Exchanges.
         * @summary Get exchanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStockExchanges: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/exchanges`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/exchanges',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned. 
         * @summary Search symbols
         * @param {SymbolQuery} [symbolQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSymbols: async (symbolQuery?: SymbolQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/symbols`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: symbolQuery,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/symbols',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(symbolQuery, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns the Universal Symbol object specified by the ticker or the Universal Symbol ID. When a ticker is specified, the first matching result is returned. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on \"Yahoo Finance Market Coverage and Data Delays\"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a \'.TO\' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix. Please use the ticker with the proper suffix for the best results. 
         * @summary Get symbol detail
         * @param {string} query The ticker or Universal Symbol ID to look up the symbol with.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSymbolsByTicker: async (query: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'query' is not null or undefined
            assertParamExists('getSymbolsByTicker', 'query', query)
            const localVarPath = `/symbols/{query}`
                .replace(`{${"query"}}`, encodeURIComponent(String(query !== undefined ? query : `-query-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/symbols/{query}',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all defined Brokerage authorization Type objects.
         * @summary Get all brokerage authorization types
         * @param {string} [brokerage] Comma separated value of brokerage slugs
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBrokerageAuthorizationType: async (brokerage?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/brokerageAuthorizationTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})
            if (brokerage !== undefined) {
                localVarQueryParameter['brokerage'] = brokerage;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brokerageAuthorizationTypes',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all brokerage instruments available for a given brokerage. Not all brokerages support this. The ones that don\'t will return an empty list.
         * @summary Get brokerage instruments
         * @param {string} brokerageId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBrokerageInstruments: async (brokerageId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'brokerageId' is not null or undefined
            assertParamExists('listAllBrokerageInstruments', 'brokerageId', brokerageId)
            const localVarPath = `/brokerages/{brokerageId}/instruments`
                .replace(`{${"brokerageId"}}`, encodeURIComponent(String(brokerageId !== undefined ? brokerageId : `-brokerageId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brokerages/{brokerageId}/instruments',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all defined Brokerage objects.
         * @summary Get brokerages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBrokerages: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/brokerages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/brokerages',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all defined Currency objects.
         * @summary Get currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCurrencies: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/currencies`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/currencies',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of all Exchange Rate Pairs for all supported Currencies.
         * @summary Get currency exchange rates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCurrenciesRates: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/currencies/rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/currencies/rates',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.  The search results are further limited to the symbols supported by the brokerage for which the account is under. 
         * @summary Search account symbols
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {string} accountId 
         * @param {SymbolQuery} [symbolQuery] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbolSearchUserAccount: async (userId: string, userSecret: string, accountId: string, symbolQuery?: SymbolQuery, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('symbolSearchUserAccount', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('symbolSearchUserAccount', 'userSecret', userSecret)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('symbolSearchUserAccount', 'accountId', accountId)
            const localVarPath = `/accounts/{accountId}/symbols`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: symbolQuery,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{accountId}/symbols',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(symbolQuery, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReferenceDataApi - functional programming interface
 * @export
 */
export const ReferenceDataApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReferenceDataApiAxiosParamCreator(configuration)
    return {
        /**
         * Returns an Exchange Rate Pair object for the specified Currency Pair.
         * @summary Get exchange rate of a currency pair
         * @param {ReferenceDataApiGetCurrencyExchangeRatePairRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCurrencyExchangeRatePair(requestParameters: ReferenceDataApiGetCurrencyExchangeRatePairRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExchangeRatePairs>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCurrencyExchangeRatePair(requestParameters.currencyPair, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns configurations for your SnapTrade Client ID, including allowed brokerages and data access.
         * @summary Get Client Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPartnerInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PartnerData>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getPartnerInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Return all available security types supported by SnapTrade.
         * @summary List security types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSecurityTypes(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SecurityType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSecurityTypes(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all supported Exchanges.
         * @summary Get exchanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStockExchanges(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Exchange>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getStockExchanges(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned. 
         * @summary Search symbols
         * @param {ReferenceDataApiGetSymbolsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSymbols(requestParameters: ReferenceDataApiGetSymbolsRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UniversalSymbol>>> {
            const symbolQuery: SymbolQuery = {
                substring: requestParameters.substring
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSymbols(symbolQuery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns the Universal Symbol object specified by the ticker or the Universal Symbol ID. When a ticker is specified, the first matching result is returned. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on \"Yahoo Finance Market Coverage and Data Delays\"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a \'.TO\' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix. Please use the ticker with the proper suffix for the best results. 
         * @summary Get symbol detail
         * @param {ReferenceDataApiGetSymbolsByTickerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSymbolsByTicker(requestParameters: ReferenceDataApiGetSymbolsByTickerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UniversalSymbol>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSymbolsByTicker(requestParameters.query, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all defined Brokerage authorization Type objects.
         * @summary Get all brokerage authorization types
         * @param {ReferenceDataApiListAllBrokerageAuthorizationTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllBrokerageAuthorizationType(requestParameters: ReferenceDataApiListAllBrokerageAuthorizationTypeRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BrokerageAuthorizationTypeReadOnly>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllBrokerageAuthorizationType(requestParameters.brokerage, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all brokerage instruments available for a given brokerage. Not all brokerages support this. The ones that don\'t will return an empty list.
         * @summary Get brokerage instruments
         * @param {ReferenceDataApiListAllBrokerageInstrumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllBrokerageInstruments(requestParameters: ReferenceDataApiListAllBrokerageInstrumentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BrokerageInstrumentsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllBrokerageInstruments(requestParameters.brokerageId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all defined Brokerage objects.
         * @summary Get brokerages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllBrokerages(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Brokerage>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllBrokerages(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all defined Currency objects.
         * @summary Get currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllCurrencies(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Currency>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllCurrencies(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of all Exchange Rate Pairs for all supported Currencies.
         * @summary Get currency exchange rates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listAllCurrenciesRates(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExchangeRatePairs>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listAllCurrenciesRates(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.  The search results are further limited to the symbols supported by the brokerage for which the account is under. 
         * @summary Search account symbols
         * @param {ReferenceDataApiSymbolSearchUserAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async symbolSearchUserAccount(requestParameters: ReferenceDataApiSymbolSearchUserAccountRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UniversalSymbol>>> {
            const symbolQuery: SymbolQuery = {
                substring: requestParameters.substring
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.symbolSearchUserAccount(requestParameters.userId, requestParameters.userSecret, requestParameters.accountId, symbolQuery, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReferenceDataApi - factory interface
 * @export
 */
export const ReferenceDataApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReferenceDataApiFp(configuration)
    return {
        /**
         * Returns an Exchange Rate Pair object for the specified Currency Pair.
         * @summary Get exchange rate of a currency pair
         * @param {ReferenceDataApiGetCurrencyExchangeRatePairRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCurrencyExchangeRatePair(requestParameters: ReferenceDataApiGetCurrencyExchangeRatePairRequest, options?: AxiosRequestConfig): AxiosPromise<ExchangeRatePairs> {
            return localVarFp.getCurrencyExchangeRatePair(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns configurations for your SnapTrade Client ID, including allowed brokerages and data access.
         * @summary Get Client Info
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPartnerInfo(options?: AxiosRequestConfig): AxiosPromise<PartnerData> {
            return localVarFp.getPartnerInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * Return all available security types supported by SnapTrade.
         * @summary List security types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSecurityTypes(options?: AxiosRequestConfig): AxiosPromise<Array<SecurityType>> {
            return localVarFp.getSecurityTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all supported Exchanges.
         * @summary Get exchanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStockExchanges(options?: AxiosRequestConfig): AxiosPromise<Array<Exchange>> {
            return localVarFp.getStockExchanges(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned. 
         * @summary Search symbols
         * @param {ReferenceDataApiGetSymbolsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSymbols(requestParameters: ReferenceDataApiGetSymbolsRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<UniversalSymbol>> {
            return localVarFp.getSymbols(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns the Universal Symbol object specified by the ticker or the Universal Symbol ID. When a ticker is specified, the first matching result is returned. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on \"Yahoo Finance Market Coverage and Data Delays\"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a \'.TO\' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix. Please use the ticker with the proper suffix for the best results. 
         * @summary Get symbol detail
         * @param {ReferenceDataApiGetSymbolsByTickerRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSymbolsByTicker(requestParameters: ReferenceDataApiGetSymbolsByTickerRequest, options?: AxiosRequestConfig): AxiosPromise<UniversalSymbol> {
            return localVarFp.getSymbolsByTicker(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all defined Brokerage authorization Type objects.
         * @summary Get all brokerage authorization types
         * @param {ReferenceDataApiListAllBrokerageAuthorizationTypeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBrokerageAuthorizationType(requestParameters: ReferenceDataApiListAllBrokerageAuthorizationTypeRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<BrokerageAuthorizationTypeReadOnly>> {
            return localVarFp.listAllBrokerageAuthorizationType(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all brokerage instruments available for a given brokerage. Not all brokerages support this. The ones that don\'t will return an empty list.
         * @summary Get brokerage instruments
         * @param {ReferenceDataApiListAllBrokerageInstrumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBrokerageInstruments(requestParameters: ReferenceDataApiListAllBrokerageInstrumentsRequest, options?: AxiosRequestConfig): AxiosPromise<BrokerageInstrumentsResponse> {
            return localVarFp.listAllBrokerageInstruments(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all defined Brokerage objects.
         * @summary Get brokerages
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllBrokerages(options?: AxiosRequestConfig): AxiosPromise<Array<Brokerage>> {
            return localVarFp.listAllBrokerages(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all defined Currency objects.
         * @summary Get currencies
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCurrencies(options?: AxiosRequestConfig): AxiosPromise<Array<Currency>> {
            return localVarFp.listAllCurrencies(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of all Exchange Rate Pairs for all supported Currencies.
         * @summary Get currency exchange rates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAllCurrenciesRates(options?: AxiosRequestConfig): AxiosPromise<Array<ExchangeRatePairs>> {
            return localVarFp.listAllCurrenciesRates(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.  The search results are further limited to the symbols supported by the brokerage for which the account is under. 
         * @summary Search account symbols
         * @param {ReferenceDataApiSymbolSearchUserAccountRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        symbolSearchUserAccount(requestParameters: ReferenceDataApiSymbolSearchUserAccountRequest, options?: AxiosRequestConfig): AxiosPromise<Array<UniversalSymbol>> {
            return localVarFp.symbolSearchUserAccount(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCurrencyExchangeRatePair operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiGetCurrencyExchangeRatePairRequest
 */
export type ReferenceDataApiGetCurrencyExchangeRatePairRequest = {
    
    /**
    * A currency pair based on currency code for example, {CAD-USD}
    * @type {string}
    * @memberof ReferenceDataApiGetCurrencyExchangeRatePair
    */
    readonly currencyPair: string
    
}

/**
 * Request parameters for getSymbols operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiGetSymbolsRequest
 */
export type ReferenceDataApiGetSymbolsRequest = {
    
} & SymbolQuery

/**
 * Request parameters for getSymbolsByTicker operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiGetSymbolsByTickerRequest
 */
export type ReferenceDataApiGetSymbolsByTickerRequest = {
    
    /**
    * The ticker or Universal Symbol ID to look up the symbol with.
    * @type {string}
    * @memberof ReferenceDataApiGetSymbolsByTicker
    */
    readonly query: string
    
}

/**
 * Request parameters for listAllBrokerageAuthorizationType operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiListAllBrokerageAuthorizationTypeRequest
 */
export type ReferenceDataApiListAllBrokerageAuthorizationTypeRequest = {
    
    /**
    * Comma separated value of brokerage slugs
    * @type {string}
    * @memberof ReferenceDataApiListAllBrokerageAuthorizationType
    */
    readonly brokerage?: string
    
}

/**
 * Request parameters for listAllBrokerageInstruments operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiListAllBrokerageInstrumentsRequest
 */
export type ReferenceDataApiListAllBrokerageInstrumentsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ReferenceDataApiListAllBrokerageInstruments
    */
    readonly brokerageId: string
    
}

/**
 * Request parameters for symbolSearchUserAccount operation in ReferenceDataApi.
 * @export
 * @interface ReferenceDataApiSymbolSearchUserAccountRequest
 */
export type ReferenceDataApiSymbolSearchUserAccountRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof ReferenceDataApiSymbolSearchUserAccount
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof ReferenceDataApiSymbolSearchUserAccount
    */
    readonly userSecret: string
    
    /**
    * 
    * @type {string}
    * @memberof ReferenceDataApiSymbolSearchUserAccount
    */
    readonly accountId: string
    
} & SymbolQuery

/**
 * ReferenceDataApiGenerated - object-oriented interface
 * @export
 * @class ReferenceDataApiGenerated
 * @extends {BaseAPI}
 */
export class ReferenceDataApiGenerated extends BaseAPI {
    /**
     * Returns an Exchange Rate Pair object for the specified Currency Pair.
     * @summary Get exchange rate of a currency pair
     * @param {ReferenceDataApiGetCurrencyExchangeRatePairRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    public getCurrencyExchangeRatePair(requestParameters: ReferenceDataApiGetCurrencyExchangeRatePairRequest, options?: AxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).getCurrencyExchangeRatePair(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns configurations for your SnapTrade Client ID, including allowed brokerages and data access.
     * @summary Get Client Info
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    public getPartnerInfo(options?: AxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).getPartnerInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return all available security types supported by SnapTrade.
     * @summary List security types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    public getSecurityTypes(options?: AxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).getSecurityTypes(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all supported Exchanges.
     * @summary Get exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    public getStockExchanges(options?: AxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).getStockExchanges(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned. 
     * @summary Search symbols
     * @param {ReferenceDataApiGetSymbolsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    public getSymbols(requestParameters: ReferenceDataApiGetSymbolsRequest = {}, options?: AxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).getSymbols(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns the Universal Symbol object specified by the ticker or the Universal Symbol ID. When a ticker is specified, the first matching result is returned. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on \"Yahoo Finance Market Coverage and Data Delays\"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a \'.TO\' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix. Please use the ticker with the proper suffix for the best results. 
     * @summary Get symbol detail
     * @param {ReferenceDataApiGetSymbolsByTickerRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    public getSymbolsByTicker(requestParameters: ReferenceDataApiGetSymbolsByTickerRequest, options?: AxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).getSymbolsByTicker(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all defined Brokerage authorization Type objects.
     * @summary Get all brokerage authorization types
     * @param {ReferenceDataApiListAllBrokerageAuthorizationTypeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    public listAllBrokerageAuthorizationType(requestParameters: ReferenceDataApiListAllBrokerageAuthorizationTypeRequest = {}, options?: AxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).listAllBrokerageAuthorizationType(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all brokerage instruments available for a given brokerage. Not all brokerages support this. The ones that don\'t will return an empty list.
     * @summary Get brokerage instruments
     * @param {ReferenceDataApiListAllBrokerageInstrumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    public listAllBrokerageInstruments(requestParameters: ReferenceDataApiListAllBrokerageInstrumentsRequest, options?: AxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).listAllBrokerageInstruments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all defined Brokerage objects.
     * @summary Get brokerages
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    public listAllBrokerages(options?: AxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).listAllBrokerages(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all defined Currency objects.
     * @summary Get currencies
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    public listAllCurrencies(options?: AxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).listAllCurrencies(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of all Exchange Rate Pairs for all supported Currencies.
     * @summary Get currency exchange rates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    public listAllCurrenciesRates(options?: AxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).listAllCurrenciesRates(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.  The search results are further limited to the symbols supported by the brokerage for which the account is under. 
     * @summary Search account symbols
     * @param {ReferenceDataApiSymbolSearchUserAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReferenceDataApiGenerated
     */
    public symbolSearchUserAccount(requestParameters: ReferenceDataApiSymbolSearchUserAccountRequest, options?: AxiosRequestConfig) {
        return ReferenceDataApiFp(this.configuration).symbolSearchUserAccount(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
