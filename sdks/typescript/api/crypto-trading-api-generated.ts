/* tslint:disable */
/* eslint-disable */
/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

The version of the OpenAPI document: 1.0.0
Contact: api@snaptrade.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ActionStrict } from '../models';
// @ts-ignore
import { CryptocurrencyPairQuote } from '../models';
// @ts-ignore
import { Model400FailedRequestResponse } from '../models';
// @ts-ignore
import { OrderUpdatedResponse } from '../models';
// @ts-ignore
import { SimpleOrderForm } from '../models';
// @ts-ignore
import { TradingInstrument } from '../models';
// @ts-ignore
import { TradingSearchCryptocurrencyPairInstruments200Response } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CryptoTradingApi - axios parameter creator
 * @export
 */
export const CryptoTradingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Gets a quote for the specified account. 
         * @summary Get cryptocurrency pair quote
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {string} accountId 
         * @param {string} instrumentSymbol 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCryptocurrencyPairQuote: async (userId: string, userSecret: string, accountId: string, instrumentSymbol: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('getCryptocurrencyPairQuote', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('getCryptocurrencyPairQuote', 'userSecret', userSecret)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('getCryptocurrencyPairQuote', 'accountId', accountId)
            // verify required parameter 'instrumentSymbol' is not null or undefined
            assertParamExists('getCryptocurrencyPairQuote', 'instrumentSymbol', instrumentSymbol)
            const localVarPath = `/accounts/{accountId}/trading/instruments/cryptocurrencyPairs/{instrumentSymbol}/quote`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)))
                .replace(`{${"instrumentSymbol"}}`, encodeURIComponent(String(instrumentSymbol !== undefined ? instrumentSymbol : `-instrumentSymbol-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{accountId}/trading/instruments/cryptocurrencyPairs/{instrumentSymbol}/quote',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Places an order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order. 
         * @summary Place order v2
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {string} accountId 
         * @param {SimpleOrderForm} simpleOrderForm 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeSimpleOrder: async (userId: string, userSecret: string, accountId: string, simpleOrderForm: SimpleOrderForm, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('placeSimpleOrder', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('placeSimpleOrder', 'userSecret', userSecret)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('placeSimpleOrder', 'accountId', accountId)
            // verify required parameter 'simpleOrderForm' is not null or undefined
            assertParamExists('placeSimpleOrder', 'simpleOrderForm', simpleOrderForm)
            const localVarPath = `/accounts/{accountId}/trading/simple`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: simpleOrderForm,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{accountId}/trading/simple',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(simpleOrderForm, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches cryptocurrency pairs instruments accessible to the specified account. 
         * @summary Search cryptocurrency pairs instruments
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {string} accountId 
         * @param {string} [base] 
         * @param {string} [quote] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCryptocurrencyPairInstruments: async (userId: string, userSecret: string, accountId: string, base?: string, quote?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('searchCryptocurrencyPairInstruments', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('searchCryptocurrencyPairInstruments', 'userSecret', userSecret)
            // verify required parameter 'accountId' is not null or undefined
            assertParamExists('searchCryptocurrencyPairInstruments', 'accountId', accountId)
            const localVarPath = `/accounts/{accountId}/trading/instruments/cryptocurrencyPairs`
                .replace(`{${"accountId"}}`, encodeURIComponent(String(accountId !== undefined ? accountId : `-accountId-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }

            if (base !== undefined) {
                localVarQueryParameter['base'] = base;
            }

            if (quote !== undefined) {
                localVarQueryParameter['quote'] = quote;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/accounts/{accountId}/trading/instruments/cryptocurrencyPairs',
                httpMethod: 'GET'
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CryptoTradingApi - functional programming interface
 * @export
 */
export const CryptoTradingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CryptoTradingApiAxiosParamCreator(configuration)
    return {
        /**
         * Gets a quote for the specified account. 
         * @summary Get cryptocurrency pair quote
         * @param {CryptoTradingApiGetCryptocurrencyPairQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCryptocurrencyPairQuote(requestParameters: CryptoTradingApiGetCryptocurrencyPairQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CryptocurrencyPairQuote>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getCryptocurrencyPairQuote(requestParameters.userId, requestParameters.userSecret, requestParameters.accountId, requestParameters.instrumentSymbol, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Places an order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order. 
         * @summary Place order v2
         * @param {CryptoTradingApiPlaceSimpleOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async placeSimpleOrder(requestParameters: CryptoTradingApiPlaceSimpleOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderUpdatedResponse>> {
            const simpleOrderForm: SimpleOrderForm = {
                instrument: requestParameters.instrument,
                side: requestParameters.side,
                type: requestParameters.type,
                time_in_force: requestParameters.time_in_force,
                amount: requestParameters.amount,
                limit_price: requestParameters.limit_price,
                stop_price: requestParameters.stop_price,
                post_only: requestParameters.post_only,
                expiration_date: requestParameters.expiration_date
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.placeSimpleOrder(requestParameters.userId, requestParameters.userSecret, requestParameters.accountId, simpleOrderForm, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Searches cryptocurrency pairs instruments accessible to the specified account. 
         * @summary Search cryptocurrency pairs instruments
         * @param {CryptoTradingApiSearchCryptocurrencyPairInstrumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async searchCryptocurrencyPairInstruments(requestParameters: CryptoTradingApiSearchCryptocurrencyPairInstrumentsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TradingSearchCryptocurrencyPairInstruments200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.searchCryptocurrencyPairInstruments(requestParameters.userId, requestParameters.userSecret, requestParameters.accountId, requestParameters.base, requestParameters.quote, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CryptoTradingApi - factory interface
 * @export
 */
export const CryptoTradingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CryptoTradingApiFp(configuration)
    return {
        /**
         * Gets a quote for the specified account. 
         * @summary Get cryptocurrency pair quote
         * @param {CryptoTradingApiGetCryptocurrencyPairQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCryptocurrencyPairQuote(requestParameters: CryptoTradingApiGetCryptocurrencyPairQuoteRequest, options?: AxiosRequestConfig): AxiosPromise<CryptocurrencyPairQuote> {
            return localVarFp.getCryptocurrencyPairQuote(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Places an order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order. 
         * @summary Place order v2
         * @param {CryptoTradingApiPlaceSimpleOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        placeSimpleOrder(requestParameters: CryptoTradingApiPlaceSimpleOrderRequest, options?: AxiosRequestConfig): AxiosPromise<OrderUpdatedResponse> {
            return localVarFp.placeSimpleOrder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Searches cryptocurrency pairs instruments accessible to the specified account. 
         * @summary Search cryptocurrency pairs instruments
         * @param {CryptoTradingApiSearchCryptocurrencyPairInstrumentsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        searchCryptocurrencyPairInstruments(requestParameters: CryptoTradingApiSearchCryptocurrencyPairInstrumentsRequest, options?: AxiosRequestConfig): AxiosPromise<TradingSearchCryptocurrencyPairInstruments200Response> {
            return localVarFp.searchCryptocurrencyPairInstruments(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getCryptocurrencyPairQuote operation in CryptoTradingApi.
 * @export
 * @interface CryptoTradingApiGetCryptocurrencyPairQuoteRequest
 */
export type CryptoTradingApiGetCryptocurrencyPairQuoteRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CryptoTradingApiGetCryptocurrencyPairQuote
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof CryptoTradingApiGetCryptocurrencyPairQuote
    */
    readonly userSecret: string
    
    /**
    * 
    * @type {string}
    * @memberof CryptoTradingApiGetCryptocurrencyPairQuote
    */
    readonly accountId: string
    
    /**
    * 
    * @type {string}
    * @memberof CryptoTradingApiGetCryptocurrencyPairQuote
    */
    readonly instrumentSymbol: string
    
}

/**
 * Request parameters for placeSimpleOrder operation in CryptoTradingApi.
 * @export
 * @interface CryptoTradingApiPlaceSimpleOrderRequest
 */
export type CryptoTradingApiPlaceSimpleOrderRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CryptoTradingApiPlaceSimpleOrder
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof CryptoTradingApiPlaceSimpleOrder
    */
    readonly userSecret: string
    
    /**
    * 
    * @type {string}
    * @memberof CryptoTradingApiPlaceSimpleOrder
    */
    readonly accountId: string
    
} & SimpleOrderForm

/**
 * Request parameters for searchCryptocurrencyPairInstruments operation in CryptoTradingApi.
 * @export
 * @interface CryptoTradingApiSearchCryptocurrencyPairInstrumentsRequest
 */
export type CryptoTradingApiSearchCryptocurrencyPairInstrumentsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CryptoTradingApiSearchCryptocurrencyPairInstruments
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof CryptoTradingApiSearchCryptocurrencyPairInstruments
    */
    readonly userSecret: string
    
    /**
    * 
    * @type {string}
    * @memberof CryptoTradingApiSearchCryptocurrencyPairInstruments
    */
    readonly accountId: string
    
    /**
    * 
    * @type {string}
    * @memberof CryptoTradingApiSearchCryptocurrencyPairInstruments
    */
    readonly base?: string
    
    /**
    * 
    * @type {string}
    * @memberof CryptoTradingApiSearchCryptocurrencyPairInstruments
    */
    readonly quote?: string
    
}

/**
 * CryptoTradingApiGenerated - object-oriented interface
 * @export
 * @class CryptoTradingApiGenerated
 * @extends {BaseAPI}
 */
export class CryptoTradingApiGenerated extends BaseAPI {
    /**
     * Gets a quote for the specified account. 
     * @summary Get cryptocurrency pair quote
     * @param {CryptoTradingApiGetCryptocurrencyPairQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoTradingApiGenerated
     */
    public getCryptocurrencyPairQuote(requestParameters: CryptoTradingApiGetCryptocurrencyPairQuoteRequest, options?: AxiosRequestConfig) {
        return CryptoTradingApiFp(this.configuration).getCryptocurrencyPairQuote(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Places an order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order. 
     * @summary Place order v2
     * @param {CryptoTradingApiPlaceSimpleOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoTradingApiGenerated
     */
    public placeSimpleOrder(requestParameters: CryptoTradingApiPlaceSimpleOrderRequest, options?: AxiosRequestConfig) {
        return CryptoTradingApiFp(this.configuration).placeSimpleOrder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches cryptocurrency pairs instruments accessible to the specified account. 
     * @summary Search cryptocurrency pairs instruments
     * @param {CryptoTradingApiSearchCryptocurrencyPairInstrumentsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoTradingApiGenerated
     */
    public searchCryptocurrencyPairInstruments(requestParameters: CryptoTradingApiSearchCryptocurrencyPairInstrumentsRequest, options?: AxiosRequestConfig) {
        return CryptoTradingApiFp(this.configuration).searchCryptocurrencyPairInstruments(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
