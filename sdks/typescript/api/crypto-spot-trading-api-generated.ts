/* tslint:disable */
/* eslint-disable */
/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

The version of the OpenAPI document: 1.0.0
Contact: api@snaptrade.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AccountOrderRecord } from '../models';
// @ts-ignore
import { ActionStrict } from '../models';
// @ts-ignore
import { CryptoSpotOrderPreview } from '../models';
// @ts-ignore
import { CryptoSpotQuote } from '../models';
// @ts-ignore
import { CryptocurrencyMarket } from '../models';
// @ts-ignore
import { CryptocurrencyPair } from '../models';
// @ts-ignore
import { Model400FailedRequestResponse } from '../models';
// @ts-ignore
import { TradingCryptoSpotPlaceOrderRequest } from '../models';
// @ts-ignore
import { TradingCryptoSpotQuoteRequest } from '../models';
// @ts-ignore
import { TradingCryptoSpotSearchMarketsRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * CryptoSpotTradingApi - axios parameter creator
 * @export
 */
export const CryptoSpotTradingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange. 
         * @summary Place a spot order on a crypto exchange
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {TradingCryptoSpotPlaceOrderRequest} tradingCryptoSpotPlaceOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoSpotPlaceOrder: async (userId: string, userSecret: string, tradingCryptoSpotPlaceOrderRequest: TradingCryptoSpotPlaceOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('cryptoSpotPlaceOrder', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('cryptoSpotPlaceOrder', 'userSecret', userSecret)
            // verify required parameter 'tradingCryptoSpotPlaceOrderRequest' is not null or undefined
            assertParamExists('cryptoSpotPlaceOrder', 'tradingCryptoSpotPlaceOrderRequest', tradingCryptoSpotPlaceOrderRequest)
            const localVarPath = `/trading/crypto/spot/placeOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tradingCryptoSpotPlaceOrderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/trading/crypto/spot/placeOrder',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tradingCryptoSpotPlaceOrderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Previews a cryptocurrency spot order using the specified account. 
         * @summary Place a spot order on a crypto exchange
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {TradingCryptoSpotPlaceOrderRequest} tradingCryptoSpotPlaceOrderRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoSpotPreviewOrder: async (userId: string, userSecret: string, tradingCryptoSpotPlaceOrderRequest: TradingCryptoSpotPlaceOrderRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('cryptoSpotPreviewOrder', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('cryptoSpotPreviewOrder', 'userSecret', userSecret)
            // verify required parameter 'tradingCryptoSpotPlaceOrderRequest' is not null or undefined
            assertParamExists('cryptoSpotPreviewOrder', 'tradingCryptoSpotPlaceOrderRequest', tradingCryptoSpotPlaceOrderRequest)
            const localVarPath = `/trading/crypto/spot/previewOrder`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tradingCryptoSpotPlaceOrderRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/trading/crypto/spot/previewOrder',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tradingCryptoSpotPlaceOrderRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets a quote for the specified account. 
         * @summary Get a quote for a cyrptocurrency market
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {TradingCryptoSpotQuoteRequest} tradingCryptoSpotQuoteRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoSpotQuote: async (userId: string, userSecret: string, tradingCryptoSpotQuoteRequest: TradingCryptoSpotQuoteRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('cryptoSpotQuote', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('cryptoSpotQuote', 'userSecret', userSecret)
            // verify required parameter 'tradingCryptoSpotQuoteRequest' is not null or undefined
            assertParamExists('cryptoSpotQuote', 'tradingCryptoSpotQuoteRequest', tradingCryptoSpotQuoteRequest)
            const localVarPath = `/trading/crypto/spot/quote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tradingCryptoSpotQuoteRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/trading/crypto/spot/quote',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tradingCryptoSpotQuoteRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Searches cryptocurrency spot markets accessible to the specified account. 
         * @summary Search crypto spot markets
         * @param {string} userId 
         * @param {string} userSecret 
         * @param {TradingCryptoSpotSearchMarketsRequest} tradingCryptoSpotSearchMarketsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoSpotSearchMarkets: async (userId: string, userSecret: string, tradingCryptoSpotSearchMarketsRequest: TradingCryptoSpotSearchMarketsRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('cryptoSpotSearchMarkets', 'userId', userId)
            // verify required parameter 'userSecret' is not null or undefined
            assertParamExists('cryptoSpotSearchMarkets', 'userSecret', userSecret)
            // verify required parameter 'tradingCryptoSpotSearchMarketsRequest' is not null or undefined
            assertParamExists('cryptoSpotSearchMarkets', 'tradingCryptoSpotSearchMarketsRequest', tradingCryptoSpotSearchMarketsRequest)
            const localVarPath = `/trading/crypto/spot/searchMarkets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication PartnerClientId required
            await setApiKeyToObject({object: localVarQueryParameter, key: "clientId", keyParamName: "clientId", configuration})
            // authentication PartnerSignature required
            await setApiKeyToObject({ object: localVarHeaderParameter, key: "Signature", keyParamName: "signature", configuration })
            // authentication PartnerTimestamp required
            await setApiKeyToObject({object: localVarQueryParameter, key: "timestamp", keyParamName: "timestamp", configuration})
            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }

            if (userSecret !== undefined) {
                localVarQueryParameter['userSecret'] = userSecret;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: tradingCryptoSpotSearchMarketsRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration,
                pathTemplate: '/trading/crypto/spot/searchMarkets',
                httpMethod: 'POST'
            });
            localVarRequestOptions.data = serializeDataIfNeeded(tradingCryptoSpotSearchMarketsRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CryptoSpotTradingApi - functional programming interface
 * @export
 */
export const CryptoSpotTradingApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CryptoSpotTradingApiAxiosParamCreator(configuration)
    return {
        /**
         * Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange. 
         * @summary Place a spot order on a crypto exchange
         * @param {CryptoSpotTradingApiCryptoSpotPlaceOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cryptoSpotPlaceOrder(requestParameters: CryptoSpotTradingApiCryptoSpotPlaceOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountOrderRecord>> {
            const tradingCryptoSpotPlaceOrderRequest: TradingCryptoSpotPlaceOrderRequest = {
                account_id: requestParameters.account_id,
                symbol: requestParameters.symbol,
                side: requestParameters.side,
                type: requestParameters.type,
                time_in_force: requestParameters.time_in_force,
                amount: requestParameters.amount,
                limit_price: requestParameters.limit_price,
                stop_price: requestParameters.stop_price,
                post_only: requestParameters.post_only,
                expiration_date: requestParameters.expiration_date
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.cryptoSpotPlaceOrder(requestParameters.userId, requestParameters.userSecret, tradingCryptoSpotPlaceOrderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Previews a cryptocurrency spot order using the specified account. 
         * @summary Place a spot order on a crypto exchange
         * @param {CryptoSpotTradingApiCryptoSpotPreviewOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cryptoSpotPreviewOrder(requestParameters: CryptoSpotTradingApiCryptoSpotPreviewOrderRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CryptoSpotOrderPreview>> {
            const tradingCryptoSpotPlaceOrderRequest: TradingCryptoSpotPlaceOrderRequest = {
                account_id: requestParameters.account_id,
                symbol: requestParameters.symbol,
                side: requestParameters.side,
                type: requestParameters.type,
                time_in_force: requestParameters.time_in_force,
                amount: requestParameters.amount,
                limit_price: requestParameters.limit_price,
                stop_price: requestParameters.stop_price,
                post_only: requestParameters.post_only,
                expiration_date: requestParameters.expiration_date
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.cryptoSpotPreviewOrder(requestParameters.userId, requestParameters.userSecret, tradingCryptoSpotPlaceOrderRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets a quote for the specified account. 
         * @summary Get a quote for a cyrptocurrency market
         * @param {CryptoSpotTradingApiCryptoSpotQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cryptoSpotQuote(requestParameters: CryptoSpotTradingApiCryptoSpotQuoteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CryptoSpotQuote>> {
            const tradingCryptoSpotQuoteRequest: TradingCryptoSpotQuoteRequest = {
                account_id: requestParameters.account_id,
                symbol: requestParameters.symbol
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.cryptoSpotQuote(requestParameters.userId, requestParameters.userSecret, tradingCryptoSpotQuoteRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Searches cryptocurrency spot markets accessible to the specified account. 
         * @summary Search crypto spot markets
         * @param {CryptoSpotTradingApiCryptoSpotSearchMarketsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async cryptoSpotSearchMarkets(requestParameters: CryptoSpotTradingApiCryptoSpotSearchMarketsRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CryptocurrencyMarket>>> {
            const tradingCryptoSpotSearchMarketsRequest: TradingCryptoSpotSearchMarketsRequest = {
                account_id: requestParameters.account_id,
                base: requestParameters.base,
                quote: requestParameters.quote
            };
            const localVarAxiosArgs = await localVarAxiosParamCreator.cryptoSpotSearchMarkets(requestParameters.userId, requestParameters.userSecret, tradingCryptoSpotSearchMarketsRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CryptoSpotTradingApi - factory interface
 * @export
 */
export const CryptoSpotTradingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CryptoSpotTradingApiFp(configuration)
    return {
        /**
         * Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange. 
         * @summary Place a spot order on a crypto exchange
         * @param {CryptoSpotTradingApiCryptoSpotPlaceOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoSpotPlaceOrder(requestParameters: CryptoSpotTradingApiCryptoSpotPlaceOrderRequest, options?: AxiosRequestConfig): AxiosPromise<AccountOrderRecord> {
            return localVarFp.cryptoSpotPlaceOrder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Previews a cryptocurrency spot order using the specified account. 
         * @summary Place a spot order on a crypto exchange
         * @param {CryptoSpotTradingApiCryptoSpotPreviewOrderRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoSpotPreviewOrder(requestParameters: CryptoSpotTradingApiCryptoSpotPreviewOrderRequest, options?: AxiosRequestConfig): AxiosPromise<CryptoSpotOrderPreview> {
            return localVarFp.cryptoSpotPreviewOrder(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Gets a quote for the specified account. 
         * @summary Get a quote for a cyrptocurrency market
         * @param {CryptoSpotTradingApiCryptoSpotQuoteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoSpotQuote(requestParameters: CryptoSpotTradingApiCryptoSpotQuoteRequest, options?: AxiosRequestConfig): AxiosPromise<CryptoSpotQuote> {
            return localVarFp.cryptoSpotQuote(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Searches cryptocurrency spot markets accessible to the specified account. 
         * @summary Search crypto spot markets
         * @param {CryptoSpotTradingApiCryptoSpotSearchMarketsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        cryptoSpotSearchMarkets(requestParameters: CryptoSpotTradingApiCryptoSpotSearchMarketsRequest, options?: AxiosRequestConfig): AxiosPromise<Array<CryptocurrencyMarket>> {
            return localVarFp.cryptoSpotSearchMarkets(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for cryptoSpotPlaceOrder operation in CryptoSpotTradingApi.
 * @export
 * @interface CryptoSpotTradingApiCryptoSpotPlaceOrderRequest
 */
export type CryptoSpotTradingApiCryptoSpotPlaceOrderRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CryptoSpotTradingApiCryptoSpotPlaceOrder
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof CryptoSpotTradingApiCryptoSpotPlaceOrder
    */
    readonly userSecret: string
    
} & TradingCryptoSpotPlaceOrderRequest

/**
 * Request parameters for cryptoSpotPreviewOrder operation in CryptoSpotTradingApi.
 * @export
 * @interface CryptoSpotTradingApiCryptoSpotPreviewOrderRequest
 */
export type CryptoSpotTradingApiCryptoSpotPreviewOrderRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CryptoSpotTradingApiCryptoSpotPreviewOrder
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof CryptoSpotTradingApiCryptoSpotPreviewOrder
    */
    readonly userSecret: string
    
} & TradingCryptoSpotPlaceOrderRequest

/**
 * Request parameters for cryptoSpotQuote operation in CryptoSpotTradingApi.
 * @export
 * @interface CryptoSpotTradingApiCryptoSpotQuoteRequest
 */
export type CryptoSpotTradingApiCryptoSpotQuoteRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CryptoSpotTradingApiCryptoSpotQuote
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof CryptoSpotTradingApiCryptoSpotQuote
    */
    readonly userSecret: string
    
} & TradingCryptoSpotQuoteRequest

/**
 * Request parameters for cryptoSpotSearchMarkets operation in CryptoSpotTradingApi.
 * @export
 * @interface CryptoSpotTradingApiCryptoSpotSearchMarketsRequest
 */
export type CryptoSpotTradingApiCryptoSpotSearchMarketsRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof CryptoSpotTradingApiCryptoSpotSearchMarkets
    */
    readonly userId: string
    
    /**
    * 
    * @type {string}
    * @memberof CryptoSpotTradingApiCryptoSpotSearchMarkets
    */
    readonly userSecret: string
    
} & TradingCryptoSpotSearchMarketsRequest

/**
 * CryptoSpotTradingApiGenerated - object-oriented interface
 * @export
 * @class CryptoSpotTradingApiGenerated
 * @extends {BaseAPI}
 */
export class CryptoSpotTradingApiGenerated extends BaseAPI {
    /**
     * Places a spot cryptocurrency order in the specified account. This endpoint does not compute the impact to the account balance from the order before submitting the order to the exchange. 
     * @summary Place a spot order on a crypto exchange
     * @param {CryptoSpotTradingApiCryptoSpotPlaceOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoSpotTradingApiGenerated
     */
    public cryptoSpotPlaceOrder(requestParameters: CryptoSpotTradingApiCryptoSpotPlaceOrderRequest, options?: AxiosRequestConfig) {
        return CryptoSpotTradingApiFp(this.configuration).cryptoSpotPlaceOrder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Previews a cryptocurrency spot order using the specified account. 
     * @summary Place a spot order on a crypto exchange
     * @param {CryptoSpotTradingApiCryptoSpotPreviewOrderRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoSpotTradingApiGenerated
     */
    public cryptoSpotPreviewOrder(requestParameters: CryptoSpotTradingApiCryptoSpotPreviewOrderRequest, options?: AxiosRequestConfig) {
        return CryptoSpotTradingApiFp(this.configuration).cryptoSpotPreviewOrder(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets a quote for the specified account. 
     * @summary Get a quote for a cyrptocurrency market
     * @param {CryptoSpotTradingApiCryptoSpotQuoteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoSpotTradingApiGenerated
     */
    public cryptoSpotQuote(requestParameters: CryptoSpotTradingApiCryptoSpotQuoteRequest, options?: AxiosRequestConfig) {
        return CryptoSpotTradingApiFp(this.configuration).cryptoSpotQuote(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Searches cryptocurrency spot markets accessible to the specified account. 
     * @summary Search crypto spot markets
     * @param {CryptoSpotTradingApiCryptoSpotSearchMarketsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoSpotTradingApiGenerated
     */
    public cryptoSpotSearchMarkets(requestParameters: CryptoSpotTradingApiCryptoSpotSearchMarketsRequest, options?: AxiosRequestConfig) {
        return CryptoSpotTradingApiFp(this.configuration).cryptoSpotSearchMarkets(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
