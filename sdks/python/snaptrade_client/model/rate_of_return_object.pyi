# coding: utf-8

"""
    SnapTrade

    Connect brokerage accounts to your app for live positions and trading

    The version of the OpenAPI document: 1.0.0
    Contact: api@snaptrade.com
    Created by: https://snaptrade.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snaptrade_client import schemas  # noqa: F401


class RateOfReturnObject(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    Individual rate of return object with return percent and timeframe
    """


    class MetaOapg:
        
        class properties:
            
            
            class timeframe(
                schemas.EnumBase,
                schemas.StrSchema
            ):
                
                @schemas.classproperty
                def ALL(cls):
                    return cls("ALL")
                
                @schemas.classproperty
                def _1Y(cls):
                    return cls("1Y")
                
                @schemas.classproperty
                def _6M(cls):
                    return cls("6M")
                
                @schemas.classproperty
                def _3M(cls):
                    return cls("3M")
                
                @schemas.classproperty
                def _1M(cls):
                    return cls("1M")
            return_percent = schemas.NumberSchema
            created_date = schemas.DateTimeSchema
            __annotations__ = {
                "timeframe": timeframe,
                "return_percent": return_percent,
                "created_date": created_date,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timeframe"]) -> MetaOapg.properties.timeframe: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["return_percent"]) -> MetaOapg.properties.return_percent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_date"]) -> MetaOapg.properties.created_date: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["timeframe"], typing_extensions.Literal["return_percent"], typing_extensions.Literal["created_date"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timeframe"]) -> typing.Union[MetaOapg.properties.timeframe, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["return_percent"]) -> typing.Union[MetaOapg.properties.return_percent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_date"]) -> typing.Union[MetaOapg.properties.created_date, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["timeframe"], typing_extensions.Literal["return_percent"], typing_extensions.Literal["created_date"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        timeframe: typing.Union[MetaOapg.properties.timeframe, str, schemas.Unset] = schemas.unset,
        return_percent: typing.Union[MetaOapg.properties.return_percent, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        created_date: typing.Union[MetaOapg.properties.created_date, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'RateOfReturnObject':
        return super().__new__(
            cls,
            *args,
            timeframe=timeframe,
            return_percent=return_percent,
            created_date=created_date,
            _configuration=_configuration,
            **kwargs,
        )
