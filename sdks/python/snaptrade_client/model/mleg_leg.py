# coding: utf-8

"""
    SnapTrade

    Connect brokerage accounts to your app for live positions and trading

    The version of the OpenAPI document: 1.0.0
    Contact: api@snaptrade.com
    Created by: https://snaptrade.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snaptrade_client import schemas  # noqa: F401


class MlegLeg(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "action",
            "instrument",
            "units",
        }
        
        class properties:
        
            @staticmethod
            def instrument() -> typing.Type['MlegTradingInstrument']:
                return MlegTradingInstrument
        
            @staticmethod
            def action() -> typing.Type['MlegActionStrict']:
                return MlegActionStrict
            units = schemas.IntSchema
            __annotations__ = {
                "instrument": instrument,
                "action": action,
                "units": units,
            }
        additional_properties = schemas.AnyTypeSchema
    
    action: 'MlegActionStrict'
    instrument: 'MlegTradingInstrument'
    units: MetaOapg.properties.units
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["action"]) -> 'MlegActionStrict': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["instrument"]) -> 'MlegTradingInstrument': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["action"], typing_extensions.Literal["instrument"], typing_extensions.Literal["units"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["action"]) -> 'MlegActionStrict': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["instrument"]) -> 'MlegTradingInstrument': ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["action"], typing_extensions.Literal["instrument"], typing_extensions.Literal["units"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        action: 'MlegActionStrict',
        instrument: 'MlegTradingInstrument',
        units: typing.Union[MetaOapg.properties.units, decimal.Decimal, int, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'MlegLeg':
        return super().__new__(
            cls,
            *args,
            action=action,
            instrument=instrument,
            units=units,
            _configuration=_configuration,
            **kwargs,
        )

from snaptrade_client.model.mleg_action_strict import MlegActionStrict
from snaptrade_client.model.mleg_trading_instrument import MlegTradingInstrument
