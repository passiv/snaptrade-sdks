# coding: utf-8

"""
    SnapTrade

    Connect brokerage accounts to your app for live positions and trading

    The version of the OpenAPI document: 1.0.0
    Contact: api@snaptrade.com
    Created by: https://snaptrade.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snaptrade_client import schemas  # noqa: F401


class ChildBrokerageOrderIDs(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            take_profit_order_id = schemas.StrSchema
            stop_loss_order_id = schemas.StrSchema
            __annotations__ = {
                "take_profit_order_id": take_profit_order_id,
                "stop_loss_order_id": stop_loss_order_id,
            }
        additional_properties = schemas.AnyTypeSchema
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["take_profit_order_id"]) -> MetaOapg.properties.take_profit_order_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["stop_loss_order_id"]) -> MetaOapg.properties.stop_loss_order_id: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["take_profit_order_id"], typing_extensions.Literal["stop_loss_order_id"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["take_profit_order_id"]) -> typing.Union[MetaOapg.properties.take_profit_order_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["stop_loss_order_id"]) -> typing.Union[MetaOapg.properties.stop_loss_order_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["take_profit_order_id"], typing_extensions.Literal["stop_loss_order_id"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        take_profit_order_id: typing.Union[MetaOapg.properties.take_profit_order_id, str, schemas.Unset] = schemas.unset,
        stop_loss_order_id: typing.Union[MetaOapg.properties.stop_loss_order_id, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'ChildBrokerageOrderIDs':
        return super().__new__(
            cls,
            *args,
            take_profit_order_id=take_profit_order_id,
            stop_loss_order_id=stop_loss_order_id,
            _configuration=_configuration,
            **kwargs,
        )
