# coding: utf-8

"""
    SnapTrade

    Connect brokerage accounts to your app for live positions and trading

    The version of the OpenAPI document: 1.0.0
    Contact: api@snaptrade.com
    Created by: https://snaptrade.com/
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from snaptrade_client import schemas  # noqa: F401


class CryptoSpotQuote(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "ask",
            "bid",
        }
        
        class properties:
            bid = schemas.StrSchema
            ask = schemas.StrSchema
            mid = schemas.StrSchema
            timestamp = schemas.DateTimeSchema
            __annotations__ = {
                "bid": bid,
                "ask": ask,
                "mid": mid,
                "timestamp": timestamp,
            }
        additional_properties = schemas.AnyTypeSchema
    
    ask: MetaOapg.properties.ask
    bid: MetaOapg.properties.bid
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ask"]) -> MetaOapg.properties.ask: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bid"]) -> MetaOapg.properties.bid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["mid"]) -> MetaOapg.properties.mid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["timestamp"]) -> MetaOapg.properties.timestamp: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> MetaOapg.additional_properties: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["ask"], typing_extensions.Literal["bid"], typing_extensions.Literal["mid"], typing_extensions.Literal["timestamp"], str, ]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ask"]) -> MetaOapg.properties.ask: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bid"]) -> MetaOapg.properties.bid: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["mid"]) -> typing.Union[MetaOapg.properties.mid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["timestamp"]) -> typing.Union[MetaOapg.properties.timestamp, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[MetaOapg.additional_properties, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["ask"], typing_extensions.Literal["bid"], typing_extensions.Literal["mid"], typing_extensions.Literal["timestamp"], str, ]):
        return super().get_item_oapg(name)

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        ask: typing.Union[MetaOapg.properties.ask, str, ],
        bid: typing.Union[MetaOapg.properties.bid, str, ],
        mid: typing.Union[MetaOapg.properties.mid, str, schemas.Unset] = schemas.unset,
        timestamp: typing.Union[MetaOapg.properties.timestamp, str, datetime, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[MetaOapg.additional_properties, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
    ) -> 'CryptoSpotQuote':
        return super().__new__(
            cls,
            *args,
            ask=ask,
            bid=bid,
            mid=mid,
            timestamp=timestamp,
            _configuration=_configuration,
            **kwargs,
        )
