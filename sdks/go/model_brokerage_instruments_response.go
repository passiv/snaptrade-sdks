/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// BrokerageInstrumentsResponse struct for BrokerageInstrumentsResponse
type BrokerageInstrumentsResponse struct {
	Instruments []BrokerageInstrument `json:"instruments,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BrokerageInstrumentsResponse BrokerageInstrumentsResponse

// NewBrokerageInstrumentsResponse instantiates a new BrokerageInstrumentsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrokerageInstrumentsResponse() *BrokerageInstrumentsResponse {
	this := BrokerageInstrumentsResponse{}
	return &this
}

// NewBrokerageInstrumentsResponseWithDefaults instantiates a new BrokerageInstrumentsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrokerageInstrumentsResponseWithDefaults() *BrokerageInstrumentsResponse {
	this := BrokerageInstrumentsResponse{}
	return &this
}

// GetInstruments returns the Instruments field value if set, zero value otherwise.
func (o *BrokerageInstrumentsResponse) GetInstruments() []BrokerageInstrument {
	if o == nil || isNil(o.Instruments) {
		var ret []BrokerageInstrument
		return ret
	}
	return o.Instruments
}

// GetInstrumentsOk returns a tuple with the Instruments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrokerageInstrumentsResponse) GetInstrumentsOk() ([]BrokerageInstrument, bool) {
	if o == nil || isNil(o.Instruments) {
    return nil, false
	}
	return o.Instruments, true
}

// HasInstruments returns a boolean if a field has been set.
func (o *BrokerageInstrumentsResponse) HasInstruments() bool {
	if o != nil && !isNil(o.Instruments) {
		return true
	}

	return false
}

// SetInstruments gets a reference to the given []BrokerageInstrument and assigns it to the Instruments field.
func (o *BrokerageInstrumentsResponse) SetInstruments(v []BrokerageInstrument) {
	o.Instruments = v
}

func (o BrokerageInstrumentsResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Instruments) {
		toSerialize["instruments"] = o.Instruments
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BrokerageInstrumentsResponse) UnmarshalJSON(bytes []byte) (err error) {
	varBrokerageInstrumentsResponse := _BrokerageInstrumentsResponse{}

	if err = json.Unmarshal(bytes, &varBrokerageInstrumentsResponse); err == nil {
		*o = BrokerageInstrumentsResponse(varBrokerageInstrumentsResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "instruments")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBrokerageInstrumentsResponse struct {
	value *BrokerageInstrumentsResponse
	isSet bool
}

func (v NullableBrokerageInstrumentsResponse) Get() *BrokerageInstrumentsResponse {
	return v.value
}

func (v *NullableBrokerageInstrumentsResponse) Set(val *BrokerageInstrumentsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBrokerageInstrumentsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBrokerageInstrumentsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrokerageInstrumentsResponse(val *BrokerageInstrumentsResponse) *NullableBrokerageInstrumentsResponse {
	return &NullableBrokerageInstrumentsResponse{value: val, isSet: true}
}

func (v NullableBrokerageInstrumentsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrokerageInstrumentsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


