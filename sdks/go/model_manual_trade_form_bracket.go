/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// ManualTradeFormBracket Inputs for placing an order with the brokerage.
type ManualTradeFormBracket struct {
	Action ActionStrictWithOptions `json:"action"`
	// The security's trading ticker symbol.
	Symbol *string `json:"symbol,omitempty"`
	Instrument TradingInstrument `json:"instrument"`
	OrderType OrderTypeStrict `json:"order_type"`
	TimeInForce TimeInForceStrict `json:"time_in_force"`
	// The limit price for `Limit` and `StopLimit` orders.
	Price NullableFloat32 `json:"price,omitempty"`
	// The price at which a stop order is triggered for `Stop` and `StopLimit` orders.
	Stop NullableFloat32 `json:"stop,omitempty"`
	// Number of shares for the order. This can be a decimal for fractional orders. Must be `null` if `notional_value` is provided.
	Units *float32 `json:"units,omitempty"`
	StopLoss StopLoss `json:"stop_loss"`
	TakeProfit TakeProfit `json:"take_profit"`
}

// NewManualTradeFormBracket instantiates a new ManualTradeFormBracket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManualTradeFormBracket(action ActionStrictWithOptions, instrument TradingInstrument, orderType OrderTypeStrict, timeInForce TimeInForceStrict, stopLoss StopLoss, takeProfit TakeProfit) *ManualTradeFormBracket {
	this := ManualTradeFormBracket{}
	this.Action = action
	this.Instrument = instrument
	this.OrderType = orderType
	this.TimeInForce = timeInForce
	this.StopLoss = stopLoss
	this.TakeProfit = takeProfit
	return &this
}

// NewManualTradeFormBracketWithDefaults instantiates a new ManualTradeFormBracket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualTradeFormBracketWithDefaults() *ManualTradeFormBracket {
	this := ManualTradeFormBracket{}
	return &this
}

// GetAction returns the Action field value
func (o *ManualTradeFormBracket) GetAction() ActionStrictWithOptions {
	if o == nil {
		var ret ActionStrictWithOptions
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ManualTradeFormBracket) GetActionOk() (*ActionStrictWithOptions, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ManualTradeFormBracket) SetAction(v ActionStrictWithOptions) {
	o.Action = v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *ManualTradeFormBracket) GetSymbol() string {
	if o == nil || isNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualTradeFormBracket) GetSymbolOk() (*string, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *ManualTradeFormBracket) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *ManualTradeFormBracket) SetSymbol(v string) {
	o.Symbol = &v
}

// GetInstrument returns the Instrument field value
func (o *ManualTradeFormBracket) GetInstrument() TradingInstrument {
	if o == nil {
		var ret TradingInstrument
		return ret
	}

	return o.Instrument
}

// GetInstrumentOk returns a tuple with the Instrument field value
// and a boolean to check if the value has been set.
func (o *ManualTradeFormBracket) GetInstrumentOk() (*TradingInstrument, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Instrument, true
}

// SetInstrument sets field value
func (o *ManualTradeFormBracket) SetInstrument(v TradingInstrument) {
	o.Instrument = v
}

// GetOrderType returns the OrderType field value
func (o *ManualTradeFormBracket) GetOrderType() OrderTypeStrict {
	if o == nil {
		var ret OrderTypeStrict
		return ret
	}

	return o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value
// and a boolean to check if the value has been set.
func (o *ManualTradeFormBracket) GetOrderTypeOk() (*OrderTypeStrict, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OrderType, true
}

// SetOrderType sets field value
func (o *ManualTradeFormBracket) SetOrderType(v OrderTypeStrict) {
	o.OrderType = v
}

// GetTimeInForce returns the TimeInForce field value
func (o *ManualTradeFormBracket) GetTimeInForce() TimeInForceStrict {
	if o == nil {
		var ret TimeInForceStrict
		return ret
	}

	return o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value
// and a boolean to check if the value has been set.
func (o *ManualTradeFormBracket) GetTimeInForceOk() (*TimeInForceStrict, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TimeInForce, true
}

// SetTimeInForce sets field value
func (o *ManualTradeFormBracket) SetTimeInForce(v TimeInForceStrict) {
	o.TimeInForce = v
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualTradeFormBracket) GetPrice() float32 {
	if o == nil || isNil(o.Price.Get()) {
		var ret float32
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualTradeFormBracket) GetPriceOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *ManualTradeFormBracket) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat32 and assigns it to the Price field.
func (o *ManualTradeFormBracket) SetPrice(v float32) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *ManualTradeFormBracket) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *ManualTradeFormBracket) UnsetPrice() {
	o.Price.Unset()
}

// GetStop returns the Stop field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualTradeFormBracket) GetStop() float32 {
	if o == nil || isNil(o.Stop.Get()) {
		var ret float32
		return ret
	}
	return *o.Stop.Get()
}

// GetStopOk returns a tuple with the Stop field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualTradeFormBracket) GetStopOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Stop.Get(), o.Stop.IsSet()
}

// HasStop returns a boolean if a field has been set.
func (o *ManualTradeFormBracket) HasStop() bool {
	if o != nil && o.Stop.IsSet() {
		return true
	}

	return false
}

// SetStop gets a reference to the given NullableFloat32 and assigns it to the Stop field.
func (o *ManualTradeFormBracket) SetStop(v float32) {
	o.Stop.Set(&v)
}
// SetStopNil sets the value for Stop to be an explicit nil
func (o *ManualTradeFormBracket) SetStopNil() {
	o.Stop.Set(nil)
}

// UnsetStop ensures that no value is present for Stop, not even an explicit nil
func (o *ManualTradeFormBracket) UnsetStop() {
	o.Stop.Unset()
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *ManualTradeFormBracket) GetUnits() float32 {
	if o == nil || isNil(o.Units) {
		var ret float32
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualTradeFormBracket) GetUnitsOk() (*float32, bool) {
	if o == nil || isNil(o.Units) {
    return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *ManualTradeFormBracket) HasUnits() bool {
	if o != nil && !isNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given float32 and assigns it to the Units field.
func (o *ManualTradeFormBracket) SetUnits(v float32) {
	o.Units = &v
}

// GetStopLoss returns the StopLoss field value
func (o *ManualTradeFormBracket) GetStopLoss() StopLoss {
	if o == nil {
		var ret StopLoss
		return ret
	}

	return o.StopLoss
}

// GetStopLossOk returns a tuple with the StopLoss field value
// and a boolean to check if the value has been set.
func (o *ManualTradeFormBracket) GetStopLossOk() (*StopLoss, bool) {
	if o == nil {
    return nil, false
	}
	return &o.StopLoss, true
}

// SetStopLoss sets field value
func (o *ManualTradeFormBracket) SetStopLoss(v StopLoss) {
	o.StopLoss = v
}

// GetTakeProfit returns the TakeProfit field value
func (o *ManualTradeFormBracket) GetTakeProfit() TakeProfit {
	if o == nil {
		var ret TakeProfit
		return ret
	}

	return o.TakeProfit
}

// GetTakeProfitOk returns a tuple with the TakeProfit field value
// and a boolean to check if the value has been set.
func (o *ManualTradeFormBracket) GetTakeProfitOk() (*TakeProfit, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TakeProfit, true
}

// SetTakeProfit sets field value
func (o *ManualTradeFormBracket) SetTakeProfit(v TakeProfit) {
	o.TakeProfit = v
}

func (o ManualTradeFormBracket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["action"] = o.Action
	}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if true {
		toSerialize["instrument"] = o.Instrument
	}
	if true {
		toSerialize["order_type"] = o.OrderType
	}
	if true {
		toSerialize["time_in_force"] = o.TimeInForce
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if o.Stop.IsSet() {
		toSerialize["stop"] = o.Stop.Get()
	}
	if !isNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	if true {
		toSerialize["stop_loss"] = o.StopLoss
	}
	if true {
		toSerialize["take_profit"] = o.TakeProfit
	}
	return json.Marshal(toSerialize)
}

type NullableManualTradeFormBracket struct {
	value *ManualTradeFormBracket
	isSet bool
}

func (v NullableManualTradeFormBracket) Get() *ManualTradeFormBracket {
	return v.value
}

func (v *NullableManualTradeFormBracket) Set(val *ManualTradeFormBracket) {
	v.value = val
	v.isSet = true
}

func (v NullableManualTradeFormBracket) IsSet() bool {
	return v.isSet
}

func (v *NullableManualTradeFormBracket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualTradeFormBracket(val *ManualTradeFormBracket) *NullableManualTradeFormBracket {
	return &NullableManualTradeFormBracket{value: val, isSet: true}
}

func (v NullableManualTradeFormBracket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualTradeFormBracket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


