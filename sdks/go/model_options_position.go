/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// OptionsPosition Describes a single option position in an account.
type OptionsPosition struct {
	Symbol *OptionBrokerageSymbol `json:"symbol,omitempty"`
	// Last known market price _per share_ of the option contract. The freshness of this price depends on the brokerage. Some brokerages provide real-time prices, while others provide delayed prices. It is recommended that you rely on your own third-party market data provider for most up to date prices.
	Price NullableFloat32 `json:"price,omitempty"`
	// The number of contracts for this option position. A positive number indicates a long position, while a negative number indicates a short position.
	Units *float32 `json:"units,omitempty"`
	// Cost basis _per contract_ of this option position. To get the cost basis _per share_, divide this value by the number of shares per contract (usually 100).
	AveragePurchasePrice NullableFloat32 `json:"average_purchase_price,omitempty"`
	// Deprecated
	Currency NullableOptionsPositionCurrency `json:"currency,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OptionsPosition OptionsPosition

// NewOptionsPosition instantiates a new OptionsPosition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptionsPosition() *OptionsPosition {
	this := OptionsPosition{}
	return &this
}

// NewOptionsPositionWithDefaults instantiates a new OptionsPosition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptionsPositionWithDefaults() *OptionsPosition {
	this := OptionsPosition{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *OptionsPosition) GetSymbol() OptionBrokerageSymbol {
	if o == nil || isNil(o.Symbol) {
		var ret OptionBrokerageSymbol
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsPosition) GetSymbolOk() (*OptionBrokerageSymbol, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *OptionsPosition) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given OptionBrokerageSymbol and assigns it to the Symbol field.
func (o *OptionsPosition) SetSymbol(v OptionBrokerageSymbol) {
	o.Symbol = &v
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OptionsPosition) GetPrice() float32 {
	if o == nil || isNil(o.Price.Get()) {
		var ret float32
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OptionsPosition) GetPriceOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *OptionsPosition) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat32 and assigns it to the Price field.
func (o *OptionsPosition) SetPrice(v float32) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *OptionsPosition) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *OptionsPosition) UnsetPrice() {
	o.Price.Unset()
}

// GetUnits returns the Units field value if set, zero value otherwise.
func (o *OptionsPosition) GetUnits() float32 {
	if o == nil || isNil(o.Units) {
		var ret float32
		return ret
	}
	return *o.Units
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptionsPosition) GetUnitsOk() (*float32, bool) {
	if o == nil || isNil(o.Units) {
    return nil, false
	}
	return o.Units, true
}

// HasUnits returns a boolean if a field has been set.
func (o *OptionsPosition) HasUnits() bool {
	if o != nil && !isNil(o.Units) {
		return true
	}

	return false
}

// SetUnits gets a reference to the given float32 and assigns it to the Units field.
func (o *OptionsPosition) SetUnits(v float32) {
	o.Units = &v
}

// GetAveragePurchasePrice returns the AveragePurchasePrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OptionsPosition) GetAveragePurchasePrice() float32 {
	if o == nil || isNil(o.AveragePurchasePrice.Get()) {
		var ret float32
		return ret
	}
	return *o.AveragePurchasePrice.Get()
}

// GetAveragePurchasePriceOk returns a tuple with the AveragePurchasePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OptionsPosition) GetAveragePurchasePriceOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.AveragePurchasePrice.Get(), o.AveragePurchasePrice.IsSet()
}

// HasAveragePurchasePrice returns a boolean if a field has been set.
func (o *OptionsPosition) HasAveragePurchasePrice() bool {
	if o != nil && o.AveragePurchasePrice.IsSet() {
		return true
	}

	return false
}

// SetAveragePurchasePrice gets a reference to the given NullableFloat32 and assigns it to the AveragePurchasePrice field.
func (o *OptionsPosition) SetAveragePurchasePrice(v float32) {
	o.AveragePurchasePrice.Set(&v)
}
// SetAveragePurchasePriceNil sets the value for AveragePurchasePrice to be an explicit nil
func (o *OptionsPosition) SetAveragePurchasePriceNil() {
	o.AveragePurchasePrice.Set(nil)
}

// UnsetAveragePurchasePrice ensures that no value is present for AveragePurchasePrice, not even an explicit nil
func (o *OptionsPosition) UnsetAveragePurchasePrice() {
	o.AveragePurchasePrice.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *OptionsPosition) GetCurrency() OptionsPositionCurrency {
	if o == nil || isNil(o.Currency.Get()) {
		var ret OptionsPositionCurrency
		return ret
	}
	return *o.Currency.Get()
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *OptionsPosition) GetCurrencyOk() (*OptionsPositionCurrency, bool) {
	if o == nil {
    return nil, false
	}
	return o.Currency.Get(), o.Currency.IsSet()
}

// HasCurrency returns a boolean if a field has been set.
func (o *OptionsPosition) HasCurrency() bool {
	if o != nil && o.Currency.IsSet() {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given NullableOptionsPositionCurrency and assigns it to the Currency field.
// Deprecated
func (o *OptionsPosition) SetCurrency(v OptionsPositionCurrency) {
	o.Currency.Set(&v)
}
// SetCurrencyNil sets the value for Currency to be an explicit nil
func (o *OptionsPosition) SetCurrencyNil() {
	o.Currency.Set(nil)
}

// UnsetCurrency ensures that no value is present for Currency, not even an explicit nil
func (o *OptionsPosition) UnsetCurrency() {
	o.Currency.Unset()
}

func (o OptionsPosition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if !isNil(o.Units) {
		toSerialize["units"] = o.Units
	}
	if o.AveragePurchasePrice.IsSet() {
		toSerialize["average_purchase_price"] = o.AveragePurchasePrice.Get()
	}
	if o.Currency.IsSet() {
		toSerialize["currency"] = o.Currency.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OptionsPosition) UnmarshalJSON(bytes []byte) (err error) {
	varOptionsPosition := _OptionsPosition{}

	if err = json.Unmarshal(bytes, &varOptionsPosition); err == nil {
		*o = OptionsPosition(varOptionsPosition)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "price")
		delete(additionalProperties, "units")
		delete(additionalProperties, "average_purchase_price")
		delete(additionalProperties, "currency")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOptionsPosition struct {
	value *OptionsPosition
	isSet bool
}

func (v NullableOptionsPosition) Get() *OptionsPosition {
	return v.value
}

func (v *NullableOptionsPosition) Set(val *OptionsPosition) {
	v.value = val
	v.isSet = true
}

func (v NullableOptionsPosition) IsSet() bool {
	return v.isSet
}

func (v *NullableOptionsPosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptionsPosition(val *OptionsPosition) *NullableOptionsPosition {
	return &NullableOptionsPosition{value: val, isSet: true}
}

func (v NullableOptionsPosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptionsPosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


