/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// CryptocurrencyPair A cryptocurrency symbol. This is a unique identifier for a cryptocurrency.
type CryptocurrencyPair struct {
	// The base currency (e.g., \"BTC\" in BTC/USD). Can be a fiat or crypto code.
	Base string `json:"base"`
	// The quote currency (e.g., \"USD\" in BTC/USD). Can be a fiat or crypto code.
	Quote string `json:"quote"`
	AdditionalProperties map[string]interface{}
}

type _CryptocurrencyPair CryptocurrencyPair

// NewCryptocurrencyPair instantiates a new CryptocurrencyPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptocurrencyPair(base string, quote string) *CryptocurrencyPair {
	this := CryptocurrencyPair{}
	this.Base = base
	this.Quote = quote
	return &this
}

// NewCryptocurrencyPairWithDefaults instantiates a new CryptocurrencyPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptocurrencyPairWithDefaults() *CryptocurrencyPair {
	this := CryptocurrencyPair{}
	return &this
}

// GetBase returns the Base field value
func (o *CryptocurrencyPair) GetBase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Base
}

// GetBaseOk returns a tuple with the Base field value
// and a boolean to check if the value has been set.
func (o *CryptocurrencyPair) GetBaseOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Base, true
}

// SetBase sets field value
func (o *CryptocurrencyPair) SetBase(v string) {
	o.Base = v
}

// GetQuote returns the Quote field value
func (o *CryptocurrencyPair) GetQuote() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Quote
}

// GetQuoteOk returns a tuple with the Quote field value
// and a boolean to check if the value has been set.
func (o *CryptocurrencyPair) GetQuoteOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Quote, true
}

// SetQuote sets field value
func (o *CryptocurrencyPair) SetQuote(v string) {
	o.Quote = v
}

func (o CryptocurrencyPair) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["base"] = o.Base
	}
	if true {
		toSerialize["quote"] = o.Quote
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CryptocurrencyPair) UnmarshalJSON(bytes []byte) (err error) {
	varCryptocurrencyPair := _CryptocurrencyPair{}

	if err = json.Unmarshal(bytes, &varCryptocurrencyPair); err == nil {
		*o = CryptocurrencyPair(varCryptocurrencyPair)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "base")
		delete(additionalProperties, "quote")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCryptocurrencyPair struct {
	value *CryptocurrencyPair
	isSet bool
}

func (v NullableCryptocurrencyPair) Get() *CryptocurrencyPair {
	return v.value
}

func (v *NullableCryptocurrencyPair) Set(val *CryptocurrencyPair) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptocurrencyPair) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptocurrencyPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptocurrencyPair(val *CryptocurrencyPair) *NullableCryptocurrencyPair {
	return &NullableCryptocurrencyPair{value: val, isSet: true}
}

func (v NullableCryptocurrencyPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptocurrencyPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


