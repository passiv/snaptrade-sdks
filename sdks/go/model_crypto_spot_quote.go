/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// CryptoSpotQuote struct for CryptoSpotQuote
type CryptoSpotQuote struct {
	// The highest price a buyer is willing to pay.
	Bid float64 `json:"bid"`
	// The lowest price a seller is willing to accept.
	Ask float64 `json:"ask"`
	AdditionalProperties map[string]interface{}
}

type _CryptoSpotQuote CryptoSpotQuote

// NewCryptoSpotQuote instantiates a new CryptoSpotQuote object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoSpotQuote(bid float64, ask float64) *CryptoSpotQuote {
	this := CryptoSpotQuote{}
	this.Bid = bid
	this.Ask = ask
	return &this
}

// NewCryptoSpotQuoteWithDefaults instantiates a new CryptoSpotQuote object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoSpotQuoteWithDefaults() *CryptoSpotQuote {
	this := CryptoSpotQuote{}
	return &this
}

// GetBid returns the Bid field value
func (o *CryptoSpotQuote) GetBid() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Bid
}

// GetBidOk returns a tuple with the Bid field value
// and a boolean to check if the value has been set.
func (o *CryptoSpotQuote) GetBidOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Bid, true
}

// SetBid sets field value
func (o *CryptoSpotQuote) SetBid(v float64) {
	o.Bid = v
}

// GetAsk returns the Ask field value
func (o *CryptoSpotQuote) GetAsk() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Ask
}

// GetAskOk returns a tuple with the Ask field value
// and a boolean to check if the value has been set.
func (o *CryptoSpotQuote) GetAskOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Ask, true
}

// SetAsk sets field value
func (o *CryptoSpotQuote) SetAsk(v float64) {
	o.Ask = v
}

func (o CryptoSpotQuote) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bid"] = o.Bid
	}
	if true {
		toSerialize["ask"] = o.Ask
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CryptoSpotQuote) UnmarshalJSON(bytes []byte) (err error) {
	varCryptoSpotQuote := _CryptoSpotQuote{}

	if err = json.Unmarshal(bytes, &varCryptoSpotQuote); err == nil {
		*o = CryptoSpotQuote(varCryptoSpotQuote)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "bid")
		delete(additionalProperties, "ask")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCryptoSpotQuote struct {
	value *CryptoSpotQuote
	isSet bool
}

func (v NullableCryptoSpotQuote) Get() *CryptoSpotQuote {
	return v.value
}

func (v *NullableCryptoSpotQuote) Set(val *CryptoSpotQuote) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoSpotQuote) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoSpotQuote) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoSpotQuote(val *CryptoSpotQuote) *NullableCryptoSpotQuote {
	return &NullableCryptoSpotQuote{value: val, isSet: true}
}

func (v NullableCryptoSpotQuote) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoSpotQuote) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


