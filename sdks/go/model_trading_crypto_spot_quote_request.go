/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// TradingCryptoSpotQuoteRequest struct for TradingCryptoSpotQuoteRequest
type TradingCryptoSpotQuoteRequest struct {
	// Unique identifier for the connected brokerage account. This is the UUID used to reference the account in SnapTrade.
	AccountId string `json:"account_id"`
	Symbol CryptocurrencyPair `json:"symbol"`
}

// NewTradingCryptoSpotQuoteRequest instantiates a new TradingCryptoSpotQuoteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTradingCryptoSpotQuoteRequest(accountId string, symbol CryptocurrencyPair) *TradingCryptoSpotQuoteRequest {
	this := TradingCryptoSpotQuoteRequest{}
	this.AccountId = accountId
	this.Symbol = symbol
	return &this
}

// NewTradingCryptoSpotQuoteRequestWithDefaults instantiates a new TradingCryptoSpotQuoteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradingCryptoSpotQuoteRequestWithDefaults() *TradingCryptoSpotQuoteRequest {
	this := TradingCryptoSpotQuoteRequest{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *TradingCryptoSpotQuoteRequest) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *TradingCryptoSpotQuoteRequest) GetAccountIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *TradingCryptoSpotQuoteRequest) SetAccountId(v string) {
	o.AccountId = v
}

// GetSymbol returns the Symbol field value
func (o *TradingCryptoSpotQuoteRequest) GetSymbol() CryptocurrencyPair {
	if o == nil {
		var ret CryptocurrencyPair
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *TradingCryptoSpotQuoteRequest) GetSymbolOk() (*CryptocurrencyPair, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *TradingCryptoSpotQuoteRequest) SetSymbol(v CryptocurrencyPair) {
	o.Symbol = v
}

func (o TradingCryptoSpotQuoteRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["account_id"] = o.AccountId
	}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	return json.Marshal(toSerialize)
}

type NullableTradingCryptoSpotQuoteRequest struct {
	value *TradingCryptoSpotQuoteRequest
	isSet bool
}

func (v NullableTradingCryptoSpotQuoteRequest) Get() *TradingCryptoSpotQuoteRequest {
	return v.value
}

func (v *NullableTradingCryptoSpotQuoteRequest) Set(val *TradingCryptoSpotQuoteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTradingCryptoSpotQuoteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTradingCryptoSpotQuoteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTradingCryptoSpotQuoteRequest(val *TradingCryptoSpotQuoteRequest) *NullableTradingCryptoSpotQuoteRequest {
	return &NullableTradingCryptoSpotQuoteRequest{value: val, isSet: true}
}

func (v NullableTradingCryptoSpotQuoteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTradingCryptoSpotQuoteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


