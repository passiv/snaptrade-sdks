/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// ManualTradeSymbol Information about the security for the order.
type ManualTradeSymbol struct {
	// Unique identifier for the symbol within SnapTrade. This is the ID used to reference the symbol in SnapTrade API calls.
	UniversalSymbolId *string `json:"universal_symbol_id,omitempty"`
	Currency *Currency `json:"currency,omitempty"`
	// This field is deprecated and should not be used.
	// Deprecated
	LocalId *string `json:"local_id,omitempty"`
	// This field is deprecated and should not be used.
	// Deprecated
	Description NullableString `json:"description,omitempty"`
	// This field is deprecated and should not be used.
	// Deprecated
	Symbol *string `json:"symbol,omitempty"`
	// A unique ID for the security within SnapTrade, scoped to the brokerage account that the security belongs to. This is a legacy field and should not be used. Do not rely on this being a stable ID as it can change.
	// Deprecated
	BrokerageSymbolId *string `json:"brokerage_symbol_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ManualTradeSymbol ManualTradeSymbol

// NewManualTradeSymbol instantiates a new ManualTradeSymbol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManualTradeSymbol() *ManualTradeSymbol {
	this := ManualTradeSymbol{}
	return &this
}

// NewManualTradeSymbolWithDefaults instantiates a new ManualTradeSymbol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualTradeSymbolWithDefaults() *ManualTradeSymbol {
	this := ManualTradeSymbol{}
	return &this
}

// GetUniversalSymbolId returns the UniversalSymbolId field value if set, zero value otherwise.
func (o *ManualTradeSymbol) GetUniversalSymbolId() string {
	if o == nil || isNil(o.UniversalSymbolId) {
		var ret string
		return ret
	}
	return *o.UniversalSymbolId
}

// GetUniversalSymbolIdOk returns a tuple with the UniversalSymbolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualTradeSymbol) GetUniversalSymbolIdOk() (*string, bool) {
	if o == nil || isNil(o.UniversalSymbolId) {
    return nil, false
	}
	return o.UniversalSymbolId, true
}

// HasUniversalSymbolId returns a boolean if a field has been set.
func (o *ManualTradeSymbol) HasUniversalSymbolId() bool {
	if o != nil && !isNil(o.UniversalSymbolId) {
		return true
	}

	return false
}

// SetUniversalSymbolId gets a reference to the given string and assigns it to the UniversalSymbolId field.
func (o *ManualTradeSymbol) SetUniversalSymbolId(v string) {
	o.UniversalSymbolId = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *ManualTradeSymbol) GetCurrency() Currency {
	if o == nil || isNil(o.Currency) {
		var ret Currency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ManualTradeSymbol) GetCurrencyOk() (*Currency, bool) {
	if o == nil || isNil(o.Currency) {
    return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *ManualTradeSymbol) HasCurrency() bool {
	if o != nil && !isNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given Currency and assigns it to the Currency field.
func (o *ManualTradeSymbol) SetCurrency(v Currency) {
	o.Currency = &v
}

// GetLocalId returns the LocalId field value if set, zero value otherwise.
// Deprecated
func (o *ManualTradeSymbol) GetLocalId() string {
	if o == nil || isNil(o.LocalId) {
		var ret string
		return ret
	}
	return *o.LocalId
}

// GetLocalIdOk returns a tuple with the LocalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ManualTradeSymbol) GetLocalIdOk() (*string, bool) {
	if o == nil || isNil(o.LocalId) {
    return nil, false
	}
	return o.LocalId, true
}

// HasLocalId returns a boolean if a field has been set.
func (o *ManualTradeSymbol) HasLocalId() bool {
	if o != nil && !isNil(o.LocalId) {
		return true
	}

	return false
}

// SetLocalId gets a reference to the given string and assigns it to the LocalId field.
// Deprecated
func (o *ManualTradeSymbol) SetLocalId(v string) {
	o.LocalId = &v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *ManualTradeSymbol) GetDescription() string {
	if o == nil || isNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *ManualTradeSymbol) GetDescriptionOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ManualTradeSymbol) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
// Deprecated
func (o *ManualTradeSymbol) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ManualTradeSymbol) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ManualTradeSymbol) UnsetDescription() {
	o.Description.Unset()
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
// Deprecated
func (o *ManualTradeSymbol) GetSymbol() string {
	if o == nil || isNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ManualTradeSymbol) GetSymbolOk() (*string, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *ManualTradeSymbol) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
// Deprecated
func (o *ManualTradeSymbol) SetSymbol(v string) {
	o.Symbol = &v
}

// GetBrokerageSymbolId returns the BrokerageSymbolId field value if set, zero value otherwise.
// Deprecated
func (o *ManualTradeSymbol) GetBrokerageSymbolId() string {
	if o == nil || isNil(o.BrokerageSymbolId) {
		var ret string
		return ret
	}
	return *o.BrokerageSymbolId
}

// GetBrokerageSymbolIdOk returns a tuple with the BrokerageSymbolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *ManualTradeSymbol) GetBrokerageSymbolIdOk() (*string, bool) {
	if o == nil || isNil(o.BrokerageSymbolId) {
    return nil, false
	}
	return o.BrokerageSymbolId, true
}

// HasBrokerageSymbolId returns a boolean if a field has been set.
func (o *ManualTradeSymbol) HasBrokerageSymbolId() bool {
	if o != nil && !isNil(o.BrokerageSymbolId) {
		return true
	}

	return false
}

// SetBrokerageSymbolId gets a reference to the given string and assigns it to the BrokerageSymbolId field.
// Deprecated
func (o *ManualTradeSymbol) SetBrokerageSymbolId(v string) {
	o.BrokerageSymbolId = &v
}

func (o ManualTradeSymbol) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.UniversalSymbolId) {
		toSerialize["universal_symbol_id"] = o.UniversalSymbolId
	}
	if !isNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !isNil(o.LocalId) {
		toSerialize["local_id"] = o.LocalId
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !isNil(o.BrokerageSymbolId) {
		toSerialize["brokerage_symbol_id"] = o.BrokerageSymbolId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ManualTradeSymbol) UnmarshalJSON(bytes []byte) (err error) {
	varManualTradeSymbol := _ManualTradeSymbol{}

	if err = json.Unmarshal(bytes, &varManualTradeSymbol); err == nil {
		*o = ManualTradeSymbol(varManualTradeSymbol)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "universal_symbol_id")
		delete(additionalProperties, "currency")
		delete(additionalProperties, "local_id")
		delete(additionalProperties, "description")
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "brokerage_symbol_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableManualTradeSymbol struct {
	value *ManualTradeSymbol
	isSet bool
}

func (v NullableManualTradeSymbol) Get() *ManualTradeSymbol {
	return v.value
}

func (v *NullableManualTradeSymbol) Set(val *ManualTradeSymbol) {
	v.value = val
	v.isSet = true
}

func (v NullableManualTradeSymbol) IsSet() bool {
	return v.isSet
}

func (v *NullableManualTradeSymbol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualTradeSymbol(val *ManualTradeSymbol) *NullableManualTradeSymbol {
	return &NullableManualTradeSymbol{value: val, isSet: true}
}

func (v NullableManualTradeSymbol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualTradeSymbol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


