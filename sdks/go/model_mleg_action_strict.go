/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
	"fmt"
)

// MlegActionStrict The action describes the intent and side of a trade. For equities, this is either `BUY` or `SELL`. For options, this is one of `BUY_TO_OPEN`, `BUY_TO_CLOSE`, `SELL_TO_OPEN`, `SELL_TO_CLOSE`.
type MlegActionStrict string

// List of MlegActionStrict
const (
	MLEGACTIONSTRICT_BUY MlegActionStrict = "BUY"
	MLEGACTIONSTRICT_SELL MlegActionStrict = "SELL"
	MLEGACTIONSTRICT_BUY_TO_OPEN MlegActionStrict = "BUY_TO_OPEN"
	MLEGACTIONSTRICT_BUY_TO_CLOSE MlegActionStrict = "BUY_TO_CLOSE"
	MLEGACTIONSTRICT_SELL_TO_OPEN MlegActionStrict = "SELL_TO_OPEN"
	MLEGACTIONSTRICT_SELL_TO_CLOSE MlegActionStrict = "SELL_TO_CLOSE"
)

// All allowed values of MlegActionStrict enum
var AllowedMlegActionStrictEnumValues = []MlegActionStrict{
	"BUY",
	"SELL",
	"BUY_TO_OPEN",
	"BUY_TO_CLOSE",
	"SELL_TO_OPEN",
	"SELL_TO_CLOSE",
}

func (v *MlegActionStrict) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MlegActionStrict(value)
	for _, existing := range AllowedMlegActionStrictEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MlegActionStrict", value)
}

// NewMlegActionStrictFromValue returns a pointer to a valid MlegActionStrict
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMlegActionStrictFromValue(v string) (*MlegActionStrict, error) {
	ev := MlegActionStrict(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MlegActionStrict: valid values are %v", v, AllowedMlegActionStrictEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MlegActionStrict) IsValid() bool {
	for _, existing := range AllowedMlegActionStrictEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MlegActionStrict value
func (v MlegActionStrict) Ptr() *MlegActionStrict {
	return &v
}

type NullableMlegActionStrict struct {
	value *MlegActionStrict
	isSet bool
}

func (v NullableMlegActionStrict) Get() *MlegActionStrict {
	return v.value
}

func (v *NullableMlegActionStrict) Set(val *MlegActionStrict) {
	v.value = val
	v.isSet = true
}

func (v NullableMlegActionStrict) IsSet() bool {
	return v.isSet
}

func (v *NullableMlegActionStrict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMlegActionStrict(val *MlegActionStrict) *NullableMlegActionStrict {
	return &NullableMlegActionStrict{value: val, isSet: true}
}

func (v NullableMlegActionStrict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMlegActionStrict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

