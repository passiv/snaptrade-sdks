/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// AccountHoldings Account Holdings
type AccountHoldings struct {
	Account *SnapTradeHoldingsAccount `json:"account,omitempty"`
	Balances []Balance `json:"balances,omitempty"`
	Positions []Position `json:"positions,omitempty"`
	// Deprecated
	TotalValue *SnapTradeHoldingsTotalValue `json:"total_value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AccountHoldings AccountHoldings

// NewAccountHoldings instantiates a new AccountHoldings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountHoldings() *AccountHoldings {
	this := AccountHoldings{}
	return &this
}

// NewAccountHoldingsWithDefaults instantiates a new AccountHoldings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountHoldingsWithDefaults() *AccountHoldings {
	this := AccountHoldings{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *AccountHoldings) GetAccount() SnapTradeHoldingsAccount {
	if o == nil || isNil(o.Account) {
		var ret SnapTradeHoldingsAccount
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountHoldings) GetAccountOk() (*SnapTradeHoldingsAccount, bool) {
	if o == nil || isNil(o.Account) {
    return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *AccountHoldings) HasAccount() bool {
	if o != nil && !isNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given SnapTradeHoldingsAccount and assigns it to the Account field.
func (o *AccountHoldings) SetAccount(v SnapTradeHoldingsAccount) {
	o.Account = &v
}

// GetBalances returns the Balances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountHoldings) GetBalances() []Balance {
	if o == nil {
		var ret []Balance
		return ret
	}
	return o.Balances
}

// GetBalancesOk returns a tuple with the Balances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountHoldings) GetBalancesOk() ([]Balance, bool) {
	if o == nil || isNil(o.Balances) {
    return nil, false
	}
	return o.Balances, true
}

// HasBalances returns a boolean if a field has been set.
func (o *AccountHoldings) HasBalances() bool {
	if o != nil && isNil(o.Balances) {
		return true
	}

	return false
}

// SetBalances gets a reference to the given []Balance and assigns it to the Balances field.
func (o *AccountHoldings) SetBalances(v []Balance) {
	o.Balances = v
}

// GetPositions returns the Positions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccountHoldings) GetPositions() []Position {
	if o == nil {
		var ret []Position
		return ret
	}
	return o.Positions
}

// GetPositionsOk returns a tuple with the Positions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccountHoldings) GetPositionsOk() ([]Position, bool) {
	if o == nil || isNil(o.Positions) {
    return nil, false
	}
	return o.Positions, true
}

// HasPositions returns a boolean if a field has been set.
func (o *AccountHoldings) HasPositions() bool {
	if o != nil && isNil(o.Positions) {
		return true
	}

	return false
}

// SetPositions gets a reference to the given []Position and assigns it to the Positions field.
func (o *AccountHoldings) SetPositions(v []Position) {
	o.Positions = v
}

// GetTotalValue returns the TotalValue field value if set, zero value otherwise.
// Deprecated
func (o *AccountHoldings) GetTotalValue() SnapTradeHoldingsTotalValue {
	if o == nil || isNil(o.TotalValue) {
		var ret SnapTradeHoldingsTotalValue
		return ret
	}
	return *o.TotalValue
}

// GetTotalValueOk returns a tuple with the TotalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *AccountHoldings) GetTotalValueOk() (*SnapTradeHoldingsTotalValue, bool) {
	if o == nil || isNil(o.TotalValue) {
    return nil, false
	}
	return o.TotalValue, true
}

// HasTotalValue returns a boolean if a field has been set.
func (o *AccountHoldings) HasTotalValue() bool {
	if o != nil && !isNil(o.TotalValue) {
		return true
	}

	return false
}

// SetTotalValue gets a reference to the given SnapTradeHoldingsTotalValue and assigns it to the TotalValue field.
// Deprecated
func (o *AccountHoldings) SetTotalValue(v SnapTradeHoldingsTotalValue) {
	o.TotalValue = &v
}

func (o AccountHoldings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if o.Balances != nil {
		toSerialize["balances"] = o.Balances
	}
	if o.Positions != nil {
		toSerialize["positions"] = o.Positions
	}
	if !isNil(o.TotalValue) {
		toSerialize["total_value"] = o.TotalValue
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *AccountHoldings) UnmarshalJSON(bytes []byte) (err error) {
	varAccountHoldings := _AccountHoldings{}

	if err = json.Unmarshal(bytes, &varAccountHoldings); err == nil {
		*o = AccountHoldings(varAccountHoldings)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "account")
		delete(additionalProperties, "balances")
		delete(additionalProperties, "positions")
		delete(additionalProperties, "total_value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAccountHoldings struct {
	value *AccountHoldings
	isSet bool
}

func (v NullableAccountHoldings) Get() *AccountHoldings {
	return v.value
}

func (v *NullableAccountHoldings) Set(val *AccountHoldings) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountHoldings) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountHoldings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountHoldings(val *AccountHoldings) *NullableAccountHoldings {
	return &NullableAccountHoldings{value: val, isSet: true}
}

func (v NullableAccountHoldings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountHoldings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


