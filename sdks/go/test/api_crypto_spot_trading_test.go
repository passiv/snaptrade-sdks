/*
SnapTrade

Testing CryptoSpotTradingApiService

*/

// Code generated by Konfig (https://konfigthis.com);

package snaptrade

import (
    "testing"
    // "github.com/stretchr/testify/assert"
    // "github.com/stretchr/testify/require"
    // snaptrade "github.com/passiv/snaptrade-sdks/sdks/go"
)

func Test_snaptrade_CryptoSpotTradingApiService(t *testing.T) {

    // configuration := snaptrade.NewConfiguration()
    // configuration.SetHost("http://127.0.0.1:4010")
    /* 
    configuration.SetPartnerClientId(os.Getenv("SNAPTRADE_CLIENT_ID"))
    configuration.SetConsumerKey(os.Getenv("SNAPTRADE_CONSUMER_KEY"))
    client := snaptrade.NewAPIClient(configuration)
    */

    t.Run("Test CryptoSpotTradingApiService CryptoSpotCancelOrder", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        
        tradingCryptoSpotCancelOrderRequest := *snaptrade.NewTradingCryptoSpotCancelOrderRequest(
            "66a033fa-da74-4fcf-b527-feefdec9257e",
        )
        
        request := client.CryptoSpotTradingApi.CryptoSpotCancelOrder(
            "userId_example",
            "userSecret_example",
            ""38400000-8cf0-11bd-b23e-10b96e4ef00d"",
            tradingCryptoSpotCancelOrderRequest,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test CryptoSpotTradingApiService CryptoSpotPlaceOrder", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        symbol := *snaptrade.NewCryptocurrencyPair()
        amount := *snaptrade.Newfloat64()
        limitPrice := *snaptrade.Newfloat64()
        stopPrice := *snaptrade.Newfloat64()
        
        tradingCryptoSpotPlaceOrderRequest := *snaptrade.NewTradingCryptoSpotPlaceOrderRequest(
            symbol,
            null,
            "null",
            "null",
            amount,
        )
        tradingCryptoSpotPlaceOrderRequest.SetLimitPrice(limitPrice)
        tradingCryptoSpotPlaceOrderRequest.SetStopPrice(stopPrice)
        tradingCryptoSpotPlaceOrderRequest.SetPostOnly(false)
        tradingCryptoSpotPlaceOrderRequest.SetExpirationDate(2024-01-01T00:00Z)
        
        request := client.CryptoSpotTradingApi.CryptoSpotPlaceOrder(
            "userId_example",
            "userSecret_example",
            ""38400000-8cf0-11bd-b23e-10b96e4ef00d"",
            tradingCryptoSpotPlaceOrderRequest,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test CryptoSpotTradingApiService CryptoSpotPreviewOrder", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        symbol := *snaptrade.NewCryptocurrencyPair()
        amount := *snaptrade.Newfloat64()
        limitPrice := *snaptrade.Newfloat64()
        stopPrice := *snaptrade.Newfloat64()
        
        tradingCryptoSpotPlaceOrderRequest := *snaptrade.NewTradingCryptoSpotPlaceOrderRequest(
            symbol,
            null,
            "null",
            "null",
            amount,
        )
        tradingCryptoSpotPlaceOrderRequest.SetLimitPrice(limitPrice)
        tradingCryptoSpotPlaceOrderRequest.SetStopPrice(stopPrice)
        tradingCryptoSpotPlaceOrderRequest.SetPostOnly(false)
        tradingCryptoSpotPlaceOrderRequest.SetExpirationDate(2024-01-01T00:00Z)
        
        request := client.CryptoSpotTradingApi.CryptoSpotPreviewOrder(
            "userId_example",
            "userSecret_example",
            ""38400000-8cf0-11bd-b23e-10b96e4ef00d"",
            tradingCryptoSpotPlaceOrderRequest,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test CryptoSpotTradingApiService CryptoSpotQuote", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        request := client.CryptoSpotTradingApi.CryptoSpotQuote(
            "userId_example",
            "userSecret_example",
            ""38400000-8cf0-11bd-b23e-10b96e4ef00d"",
            "base_example",
            "quote_example",
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test CryptoSpotTradingApiService CryptoSpotSymbols", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        request := client.CryptoSpotTradingApi.CryptoSpotSymbols(
            "userId_example",
            "userSecret_example",
            ""38400000-8cf0-11bd-b23e-10b96e4ef00d"",
            "base_example",
        )
        request.Quote("quote_example")
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

}