/*
SnapTrade

Testing AuthenticationApiService

*/

// Code generated by Konfig (https://konfigthis.com);

package snaptrade

import (
    "testing"
    // "github.com/stretchr/testify/assert"
    // "github.com/stretchr/testify/require"
    // snaptrade "github.com/passiv/snaptrade-sdks/sdks/go"
)

func Test_snaptrade_AuthenticationApiService(t *testing.T) {

    // configuration := snaptrade.NewConfiguration()
    // configuration.SetHost("http://127.0.0.1:4010")
    /* 
    configuration.SetPartnerClientId(os.Getenv("SNAPTRADE_CLIENT_ID"))
    configuration.SetConsumerKey(os.Getenv("SNAPTRADE_CONSUMER_KEY"))
    client := snaptrade.NewAPIClient(configuration)
    */

    t.Run("Test AuthenticationApiService DeleteSnapTradeUser", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        request := client.AuthenticationApi.DeleteSnapTradeUser(
            "userId_example",
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test AuthenticationApiService ListSnapTradeUsers", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        request := client.AuthenticationApi.ListSnapTradeUsers(
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test AuthenticationApiService LoginSnapTradeUser", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        
        snapTradeLoginUserRequestBody := *snaptrade.NewSnapTradeLoginUserRequestBody()
        snapTradeLoginUserRequestBody.SetBroker("ALPACA")
        snapTradeLoginUserRequestBody.SetImmediateRedirect(true)
        snapTradeLoginUserRequestBody.SetCustomRedirect("https://snaptrade.com")
        snapTradeLoginUserRequestBody.SetReconnect("8b5f262d-4bb9-365d-888a-202bd3b15fa1")
        snapTradeLoginUserRequestBody.SetConnectionType("READ")
        snapTradeLoginUserRequestBody.SetShowCloseButton(true)
        snapTradeLoginUserRequestBody.SetConnectionPortalVersion("V4")
        
        request := client.AuthenticationApi.LoginSnapTradeUser(
            "userId_example",
            "userSecret_example",
        )
        request.SnapTradeLoginUserRequestBody(snapTradeLoginUserRequestBody)
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test AuthenticationApiService RegisterSnapTradeUser", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        
        snapTradeRegisterUserRequestBody := *snaptrade.NewSnapTradeRegisterUserRequestBody(
            "snaptrade-user-123",
        )
        
        request := client.AuthenticationApi.RegisterSnapTradeUser(
            snapTradeRegisterUserRequestBody,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

    t.Run("Test AuthenticationApiService ResetSnapTradeUserSecret", func(t *testing.T) {
        /* TODO: ENG-1367 Fix parameter values for Go SDK generated tests
        
        userIDandSecret := *snaptrade.NewUserIDandSecret()
        userIDandSecret.SetUserId("snaptrade-user-123")
        userIDandSecret.SetUserSecret("adf2aa34-8219-40f7-a6b3-60156985cc61")
        
        request := client.AuthenticationApi.ResetSnapTradeUserSecret(
            userIDandSecret,
        )
        
        resp, httpRes, err := request.Execute()

        require.Nil(t, err)
        require.NotNil(t, resp)
        assert.Equal(t, 200, httpRes.StatusCode)
        */
    })

}