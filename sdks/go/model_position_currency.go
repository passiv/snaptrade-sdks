/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// PositionCurrency The 'position currency' (`price` and `average_purchase_price`). This currency can potentially be different from the 'listing currency' of the security. The 'listing currency' is what's quoted on the listing exchange, while the 'position currency' is what the brokerage uses to hold and value your position. 
type PositionCurrency struct {
	// Unique identifier for the currency. This is the UUID used to reference the currency in SnapTrade.
	Id *string `json:"id,omitempty"`
	// The ISO-4217 currency code for the currency.
	Code *string `json:"code,omitempty"`
	// A human-friendly name of the currency.
	Name *string `json:"name,omitempty"`
}

// NewPositionCurrency instantiates a new PositionCurrency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPositionCurrency() *PositionCurrency {
	this := PositionCurrency{}
	return &this
}

// NewPositionCurrencyWithDefaults instantiates a new PositionCurrency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPositionCurrencyWithDefaults() *PositionCurrency {
	this := PositionCurrency{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PositionCurrency) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionCurrency) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PositionCurrency) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PositionCurrency) SetId(v string) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *PositionCurrency) GetCode() string {
	if o == nil || isNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionCurrency) GetCodeOk() (*string, bool) {
	if o == nil || isNil(o.Code) {
    return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *PositionCurrency) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *PositionCurrency) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PositionCurrency) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionCurrency) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PositionCurrency) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PositionCurrency) SetName(v string) {
	o.Name = &v
}

func (o PositionCurrency) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullablePositionCurrency struct {
	value *PositionCurrency
	isSet bool
}

func (v NullablePositionCurrency) Get() *PositionCurrency {
	return v.value
}

func (v *NullablePositionCurrency) Set(val *PositionCurrency) {
	v.value = val
	v.isSet = true
}

func (v NullablePositionCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullablePositionCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePositionCurrency(val *PositionCurrency) *NullablePositionCurrency {
	return &NullablePositionCurrency{value: val, isSet: true}
}

func (v NullablePositionCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePositionCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


