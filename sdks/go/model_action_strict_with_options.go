/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
	"fmt"
)

// ActionStrictWithOptions The action describes the intent or side of a trade. This is either `BUY` or `SELL` for Equity symbols or `BUY_TO_OPEN`, `BUY_TO_CLOSE`, `SELL_TO_OPEN` or `SELL_TO_CLOSE` for Options.
type ActionStrictWithOptions string

// List of ActionStrictWithOptions
const (
	ACTIONSTRICTWITHOPTIONS_BUY ActionStrictWithOptions = "BUY"
	ACTIONSTRICTWITHOPTIONS_SELL ActionStrictWithOptions = "SELL"
	ACTIONSTRICTWITHOPTIONS_BUY_TO_OPEN ActionStrictWithOptions = "BUY_TO_OPEN"
	ACTIONSTRICTWITHOPTIONS_BUY_TO_CLOSE ActionStrictWithOptions = "BUY_TO_CLOSE"
	ACTIONSTRICTWITHOPTIONS_SELL_TO_OPEN ActionStrictWithOptions = "SELL_TO_OPEN"
	ACTIONSTRICTWITHOPTIONS_SELL_TO_CLOSE ActionStrictWithOptions = "SELL_TO_CLOSE"
)

// All allowed values of ActionStrictWithOptions enum
var AllowedActionStrictWithOptionsEnumValues = []ActionStrictWithOptions{
	"BUY",
	"SELL",
	"BUY_TO_OPEN",
	"BUY_TO_CLOSE",
	"SELL_TO_OPEN",
	"SELL_TO_CLOSE",
}

func (v *ActionStrictWithOptions) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ActionStrictWithOptions(value)
	for _, existing := range AllowedActionStrictWithOptionsEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ActionStrictWithOptions", value)
}

// NewActionStrictWithOptionsFromValue returns a pointer to a valid ActionStrictWithOptions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewActionStrictWithOptionsFromValue(v string) (*ActionStrictWithOptions, error) {
	ev := ActionStrictWithOptions(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ActionStrictWithOptions: valid values are %v", v, AllowedActionStrictWithOptionsEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ActionStrictWithOptions) IsValid() bool {
	for _, existing := range AllowedActionStrictWithOptionsEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ActionStrictWithOptions value
func (v ActionStrictWithOptions) Ptr() *ActionStrictWithOptions {
	return &v
}

type NullableActionStrictWithOptions struct {
	value *ActionStrictWithOptions
	isSet bool
}

func (v NullableActionStrictWithOptions) Get() *ActionStrictWithOptions {
	return v.value
}

func (v *NullableActionStrictWithOptions) Set(val *ActionStrictWithOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableActionStrictWithOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableActionStrictWithOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActionStrictWithOptions(val *ActionStrictWithOptions) *NullableActionStrictWithOptions {
	return &NullableActionStrictWithOptions{value: val, isSet: true}
}

func (v NullableActionStrictWithOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActionStrictWithOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

