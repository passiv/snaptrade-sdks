/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// CryptoOrderPreview Preview of an order.
type CryptoOrderPreview struct {
	EstimatedFee *CryptoOrderPreviewEstimatedFee `json:"estimated_fee,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CryptoOrderPreview CryptoOrderPreview

// NewCryptoOrderPreview instantiates a new CryptoOrderPreview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoOrderPreview() *CryptoOrderPreview {
	this := CryptoOrderPreview{}
	return &this
}

// NewCryptoOrderPreviewWithDefaults instantiates a new CryptoOrderPreview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoOrderPreviewWithDefaults() *CryptoOrderPreview {
	this := CryptoOrderPreview{}
	return &this
}

// GetEstimatedFee returns the EstimatedFee field value if set, zero value otherwise.
func (o *CryptoOrderPreview) GetEstimatedFee() CryptoOrderPreviewEstimatedFee {
	if o == nil || isNil(o.EstimatedFee) {
		var ret CryptoOrderPreviewEstimatedFee
		return ret
	}
	return *o.EstimatedFee
}

// GetEstimatedFeeOk returns a tuple with the EstimatedFee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CryptoOrderPreview) GetEstimatedFeeOk() (*CryptoOrderPreviewEstimatedFee, bool) {
	if o == nil || isNil(o.EstimatedFee) {
    return nil, false
	}
	return o.EstimatedFee, true
}

// HasEstimatedFee returns a boolean if a field has been set.
func (o *CryptoOrderPreview) HasEstimatedFee() bool {
	if o != nil && !isNil(o.EstimatedFee) {
		return true
	}

	return false
}

// SetEstimatedFee gets a reference to the given CryptoOrderPreviewEstimatedFee and assigns it to the EstimatedFee field.
func (o *CryptoOrderPreview) SetEstimatedFee(v CryptoOrderPreviewEstimatedFee) {
	o.EstimatedFee = &v
}

func (o CryptoOrderPreview) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EstimatedFee) {
		toSerialize["estimated_fee"] = o.EstimatedFee
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CryptoOrderPreview) UnmarshalJSON(bytes []byte) (err error) {
	varCryptoOrderPreview := _CryptoOrderPreview{}

	if err = json.Unmarshal(bytes, &varCryptoOrderPreview); err == nil {
		*o = CryptoOrderPreview(varCryptoOrderPreview)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "estimated_fee")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCryptoOrderPreview struct {
	value *CryptoOrderPreview
	isSet bool
}

func (v NullableCryptoOrderPreview) Get() *CryptoOrderPreview {
	return v.value
}

func (v *NullableCryptoOrderPreview) Set(val *CryptoOrderPreview) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoOrderPreview) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoOrderPreview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoOrderPreview(val *CryptoOrderPreview) *NullableCryptoOrderPreview {
	return &NullableCryptoOrderPreview{value: val, isSet: true}
}

func (v NullableCryptoOrderPreview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoOrderPreview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


