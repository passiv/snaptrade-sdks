/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// ManualTradeReplaceForm Inputs for placing an order with the brokerage.
type ManualTradeReplaceForm struct {
	Action ActionStrict `json:"action"`
	OrderType OrderTypeStrict `json:"order_type"`
	TimeInForce TimeInForceStrict `json:"time_in_force"`
	// The limit price for `Limit` and `StopLimit` orders.
	Price NullableFloat32 `json:"price,omitempty"`
	// The price at which a stop order is triggered for `Stop` and `StopLimit` orders.
	Stop NullableFloat32 `json:"stop,omitempty"`
	Units NullableFloat32 `json:"units,omitempty"`
}

// NewManualTradeReplaceForm instantiates a new ManualTradeReplaceForm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewManualTradeReplaceForm(action ActionStrict, orderType OrderTypeStrict, timeInForce TimeInForceStrict) *ManualTradeReplaceForm {
	this := ManualTradeReplaceForm{}
	this.Action = action
	this.OrderType = orderType
	this.TimeInForce = timeInForce
	return &this
}

// NewManualTradeReplaceFormWithDefaults instantiates a new ManualTradeReplaceForm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewManualTradeReplaceFormWithDefaults() *ManualTradeReplaceForm {
	this := ManualTradeReplaceForm{}
	return &this
}

// GetAction returns the Action field value
func (o *ManualTradeReplaceForm) GetAction() ActionStrict {
	if o == nil {
		var ret ActionStrict
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *ManualTradeReplaceForm) GetActionOk() (*ActionStrict, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *ManualTradeReplaceForm) SetAction(v ActionStrict) {
	o.Action = v
}

// GetOrderType returns the OrderType field value
func (o *ManualTradeReplaceForm) GetOrderType() OrderTypeStrict {
	if o == nil {
		var ret OrderTypeStrict
		return ret
	}

	return o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value
// and a boolean to check if the value has been set.
func (o *ManualTradeReplaceForm) GetOrderTypeOk() (*OrderTypeStrict, bool) {
	if o == nil {
    return nil, false
	}
	return &o.OrderType, true
}

// SetOrderType sets field value
func (o *ManualTradeReplaceForm) SetOrderType(v OrderTypeStrict) {
	o.OrderType = v
}

// GetTimeInForce returns the TimeInForce field value
func (o *ManualTradeReplaceForm) GetTimeInForce() TimeInForceStrict {
	if o == nil {
		var ret TimeInForceStrict
		return ret
	}

	return o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value
// and a boolean to check if the value has been set.
func (o *ManualTradeReplaceForm) GetTimeInForceOk() (*TimeInForceStrict, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TimeInForce, true
}

// SetTimeInForce sets field value
func (o *ManualTradeReplaceForm) SetTimeInForce(v TimeInForceStrict) {
	o.TimeInForce = v
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualTradeReplaceForm) GetPrice() float32 {
	if o == nil || isNil(o.Price.Get()) {
		var ret float32
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualTradeReplaceForm) GetPriceOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *ManualTradeReplaceForm) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat32 and assigns it to the Price field.
func (o *ManualTradeReplaceForm) SetPrice(v float32) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *ManualTradeReplaceForm) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *ManualTradeReplaceForm) UnsetPrice() {
	o.Price.Unset()
}

// GetStop returns the Stop field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualTradeReplaceForm) GetStop() float32 {
	if o == nil || isNil(o.Stop.Get()) {
		var ret float32
		return ret
	}
	return *o.Stop.Get()
}

// GetStopOk returns a tuple with the Stop field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualTradeReplaceForm) GetStopOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Stop.Get(), o.Stop.IsSet()
}

// HasStop returns a boolean if a field has been set.
func (o *ManualTradeReplaceForm) HasStop() bool {
	if o != nil && o.Stop.IsSet() {
		return true
	}

	return false
}

// SetStop gets a reference to the given NullableFloat32 and assigns it to the Stop field.
func (o *ManualTradeReplaceForm) SetStop(v float32) {
	o.Stop.Set(&v)
}
// SetStopNil sets the value for Stop to be an explicit nil
func (o *ManualTradeReplaceForm) SetStopNil() {
	o.Stop.Set(nil)
}

// UnsetStop ensures that no value is present for Stop, not even an explicit nil
func (o *ManualTradeReplaceForm) UnsetStop() {
	o.Stop.Unset()
}

// GetUnits returns the Units field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ManualTradeReplaceForm) GetUnits() float32 {
	if o == nil || isNil(o.Units.Get()) {
		var ret float32
		return ret
	}
	return *o.Units.Get()
}

// GetUnitsOk returns a tuple with the Units field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ManualTradeReplaceForm) GetUnitsOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Units.Get(), o.Units.IsSet()
}

// HasUnits returns a boolean if a field has been set.
func (o *ManualTradeReplaceForm) HasUnits() bool {
	if o != nil && o.Units.IsSet() {
		return true
	}

	return false
}

// SetUnits gets a reference to the given NullableFloat32 and assigns it to the Units field.
func (o *ManualTradeReplaceForm) SetUnits(v float32) {
	o.Units.Set(&v)
}
// SetUnitsNil sets the value for Units to be an explicit nil
func (o *ManualTradeReplaceForm) SetUnitsNil() {
	o.Units.Set(nil)
}

// UnsetUnits ensures that no value is present for Units, not even an explicit nil
func (o *ManualTradeReplaceForm) UnsetUnits() {
	o.Units.Unset()
}

func (o ManualTradeReplaceForm) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["action"] = o.Action
	}
	if true {
		toSerialize["order_type"] = o.OrderType
	}
	if true {
		toSerialize["time_in_force"] = o.TimeInForce
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if o.Stop.IsSet() {
		toSerialize["stop"] = o.Stop.Get()
	}
	if o.Units.IsSet() {
		toSerialize["units"] = o.Units.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableManualTradeReplaceForm struct {
	value *ManualTradeReplaceForm
	isSet bool
}

func (v NullableManualTradeReplaceForm) Get() *ManualTradeReplaceForm {
	return v.value
}

func (v *NullableManualTradeReplaceForm) Set(val *ManualTradeReplaceForm) {
	v.value = val
	v.isSet = true
}

func (v NullableManualTradeReplaceForm) IsSet() bool {
	return v.isSet
}

func (v *NullableManualTradeReplaceForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableManualTradeReplaceForm(val *ManualTradeReplaceForm) *NullableManualTradeReplaceForm {
	return &NullableManualTradeReplaceForm{value: val, isSet: true}
}

func (v NullableManualTradeReplaceForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableManualTradeReplaceForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


