/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
	"fmt"
)

// TimeInForceStrict The Time in Force type for the order. This field indicates how long the order will remain active before it is executed or expires. Here are the supported values:   - `Day` - Day. The order is valid only for the trading day on which it is placed.   - `GTC` - Good Til Canceled. The order is valid until it is executed or canceled.   - `FOK` - Fill Or Kill. The order must be executed in its entirety immediately or be canceled completely.   - `IOC` - Immediate Or Cancel. The order must be executed immediately. Any portion of the order that cannot be filled immediately will be canceled. 
type TimeInForceStrict string

// List of TimeInForceStrict
const (
	TIMEINFORCESTRICT_FOK TimeInForceStrict = "FOK"
	TIMEINFORCESTRICT_DAY TimeInForceStrict = "Day"
	TIMEINFORCESTRICT_GTC TimeInForceStrict = "GTC"
	TIMEINFORCESTRICT_IOC TimeInForceStrict = "IOC"
)

// All allowed values of TimeInForceStrict enum
var AllowedTimeInForceStrictEnumValues = []TimeInForceStrict{
	"FOK",
	"Day",
	"GTC",
	"IOC",
}

func (v *TimeInForceStrict) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TimeInForceStrict(value)
	for _, existing := range AllowedTimeInForceStrictEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TimeInForceStrict", value)
}

// NewTimeInForceStrictFromValue returns a pointer to a valid TimeInForceStrict
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTimeInForceStrictFromValue(v string) (*TimeInForceStrict, error) {
	ev := TimeInForceStrict(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TimeInForceStrict: valid values are %v", v, AllowedTimeInForceStrictEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TimeInForceStrict) IsValid() bool {
	for _, existing := range AllowedTimeInForceStrictEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TimeInForceStrict value
func (v TimeInForceStrict) Ptr() *TimeInForceStrict {
	return &v
}

type NullableTimeInForceStrict struct {
	value *TimeInForceStrict
	isSet bool
}

func (v NullableTimeInForceStrict) Get() *TimeInForceStrict {
	return v.value
}

func (v *NullableTimeInForceStrict) Set(val *TimeInForceStrict) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeInForceStrict) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeInForceStrict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeInForceStrict(val *TimeInForceStrict) *NullableTimeInForceStrict {
	return &NullableTimeInForceStrict{value: val, isSet: true}
}

func (v NullableTimeInForceStrict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeInForceStrict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

