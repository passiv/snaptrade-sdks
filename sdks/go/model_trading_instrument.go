/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// TradingInstrument struct for TradingInstrument
type TradingInstrument struct {
	// The instrument's trading ticker symbol
	Symbol string `json:"symbol"`
	// The type of the instrument
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _TradingInstrument TradingInstrument

// NewTradingInstrument instantiates a new TradingInstrument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTradingInstrument(symbol string, type_ string) *TradingInstrument {
	this := TradingInstrument{}
	this.Symbol = symbol
	this.Type = type_
	return &this
}

// NewTradingInstrumentWithDefaults instantiates a new TradingInstrument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradingInstrumentWithDefaults() *TradingInstrument {
	this := TradingInstrument{}
	return &this
}

// GetSymbol returns the Symbol field value
func (o *TradingInstrument) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *TradingInstrument) GetSymbolOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *TradingInstrument) SetSymbol(v string) {
	o.Symbol = v
}

// GetType returns the Type field value
func (o *TradingInstrument) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TradingInstrument) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TradingInstrument) SetType(v string) {
	o.Type = v
}

func (o TradingInstrument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if true {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TradingInstrument) UnmarshalJSON(bytes []byte) (err error) {
	varTradingInstrument := _TradingInstrument{}

	if err = json.Unmarshal(bytes, &varTradingInstrument); err == nil {
		*o = TradingInstrument(varTradingInstrument)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTradingInstrument struct {
	value *TradingInstrument
	isSet bool
}

func (v NullableTradingInstrument) Get() *TradingInstrument {
	return v.value
}

func (v *NullableTradingInstrument) Set(val *TradingInstrument) {
	v.value = val
	v.isSet = true
}

func (v NullableTradingInstrument) IsSet() bool {
	return v.isSet
}

func (v *NullableTradingInstrument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTradingInstrument(val *TradingInstrument) *NullableTradingInstrument {
	return &NullableTradingInstrument{value: val, isSet: true}
}

func (v NullableTradingInstrument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTradingInstrument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


