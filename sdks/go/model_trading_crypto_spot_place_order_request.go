/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
	"time"
)

// TradingCryptoSpotPlaceOrderRequest struct for TradingCryptoSpotPlaceOrderRequest
type TradingCryptoSpotPlaceOrderRequest struct {
	Symbol CryptocurrencyPair `json:"symbol"`
	Side ActionStrict `json:"side"`
	// The type of order to place.
	Type string `json:"type"`
	// The Time in Force type for the order. This field indicates how long the order will remain active before it is executed or expires.   - `GTC` - Good Til Canceled. The order is valid until it is executed or canceled.   - `FOK` - Fill Or Kill. The order must be executed in its entirety immediately or be canceled completely.   - `IOC` - Immediate Or Cancel. The order must be executed immediately. Any portion of the order that cannot be filled immediately will be canceled.   - `GTD` - Good Til Date. The order is valid until the specified date. 
	TimeInForce string `json:"time_in_force"`
	// The amount of the base currency to buy or sell.
	Amount float64 `json:"amount"`
	// The limit price. Required if the order type is LIMIT, STOP_LOSS_LIMIT or TAKE_PROFIT_LIMIT.
	LimitPrice *float64 `json:"limit_price,omitempty"`
	// The stop price. Required if the order type is STOP_LOSS_MARKET, STOP_LOSS_LIMIT, TAKE_PROFIT_MARKET or TAKE_PROFIT_LIMIT.
	StopPrice *float64 `json:"stop_price,omitempty"`
	// Required for order type LIMIT. If true orders that would be filled immediately are rejected to avoid incurring TAKER fees.
	PostOnly *bool `json:"post_only,omitempty"`
	// The expiration date of the order. Required if the time_in_force is GTD.
	ExpirationDate *time.Time `json:"expiration_date,omitempty"`
}

// NewTradingCryptoSpotPlaceOrderRequest instantiates a new TradingCryptoSpotPlaceOrderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTradingCryptoSpotPlaceOrderRequest(symbol CryptocurrencyPair, side ActionStrict, type_ string, timeInForce string, amount float64) *TradingCryptoSpotPlaceOrderRequest {
	this := TradingCryptoSpotPlaceOrderRequest{}
	this.Symbol = symbol
	this.Side = side
	this.Type = type_
	this.TimeInForce = timeInForce
	this.Amount = amount
	return &this
}

// NewTradingCryptoSpotPlaceOrderRequestWithDefaults instantiates a new TradingCryptoSpotPlaceOrderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradingCryptoSpotPlaceOrderRequestWithDefaults() *TradingCryptoSpotPlaceOrderRequest {
	this := TradingCryptoSpotPlaceOrderRequest{}
	return &this
}

// GetSymbol returns the Symbol field value
func (o *TradingCryptoSpotPlaceOrderRequest) GetSymbol() CryptocurrencyPair {
	if o == nil {
		var ret CryptocurrencyPair
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *TradingCryptoSpotPlaceOrderRequest) GetSymbolOk() (*CryptocurrencyPair, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *TradingCryptoSpotPlaceOrderRequest) SetSymbol(v CryptocurrencyPair) {
	o.Symbol = v
}

// GetSide returns the Side field value
func (o *TradingCryptoSpotPlaceOrderRequest) GetSide() ActionStrict {
	if o == nil {
		var ret ActionStrict
		return ret
	}

	return o.Side
}

// GetSideOk returns a tuple with the Side field value
// and a boolean to check if the value has been set.
func (o *TradingCryptoSpotPlaceOrderRequest) GetSideOk() (*ActionStrict, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Side, true
}

// SetSide sets field value
func (o *TradingCryptoSpotPlaceOrderRequest) SetSide(v ActionStrict) {
	o.Side = v
}

// GetType returns the Type field value
func (o *TradingCryptoSpotPlaceOrderRequest) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TradingCryptoSpotPlaceOrderRequest) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TradingCryptoSpotPlaceOrderRequest) SetType(v string) {
	o.Type = v
}

// GetTimeInForce returns the TimeInForce field value
func (o *TradingCryptoSpotPlaceOrderRequest) GetTimeInForce() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value
// and a boolean to check if the value has been set.
func (o *TradingCryptoSpotPlaceOrderRequest) GetTimeInForceOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TimeInForce, true
}

// SetTimeInForce sets field value
func (o *TradingCryptoSpotPlaceOrderRequest) SetTimeInForce(v string) {
	o.TimeInForce = v
}

// GetAmount returns the Amount field value
func (o *TradingCryptoSpotPlaceOrderRequest) GetAmount() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Amount
}

// GetAmountOk returns a tuple with the Amount field value
// and a boolean to check if the value has been set.
func (o *TradingCryptoSpotPlaceOrderRequest) GetAmountOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Amount, true
}

// SetAmount sets field value
func (o *TradingCryptoSpotPlaceOrderRequest) SetAmount(v float64) {
	o.Amount = v
}

// GetLimitPrice returns the LimitPrice field value if set, zero value otherwise.
func (o *TradingCryptoSpotPlaceOrderRequest) GetLimitPrice() float64 {
	if o == nil || isNil(o.LimitPrice) {
		var ret float64
		return ret
	}
	return *o.LimitPrice
}

// GetLimitPriceOk returns a tuple with the LimitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradingCryptoSpotPlaceOrderRequest) GetLimitPriceOk() (*float64, bool) {
	if o == nil || isNil(o.LimitPrice) {
    return nil, false
	}
	return o.LimitPrice, true
}

// HasLimitPrice returns a boolean if a field has been set.
func (o *TradingCryptoSpotPlaceOrderRequest) HasLimitPrice() bool {
	if o != nil && !isNil(o.LimitPrice) {
		return true
	}

	return false
}

// SetLimitPrice gets a reference to the given float64 and assigns it to the LimitPrice field.
func (o *TradingCryptoSpotPlaceOrderRequest) SetLimitPrice(v float64) {
	o.LimitPrice = &v
}

// GetStopPrice returns the StopPrice field value if set, zero value otherwise.
func (o *TradingCryptoSpotPlaceOrderRequest) GetStopPrice() float64 {
	if o == nil || isNil(o.StopPrice) {
		var ret float64
		return ret
	}
	return *o.StopPrice
}

// GetStopPriceOk returns a tuple with the StopPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradingCryptoSpotPlaceOrderRequest) GetStopPriceOk() (*float64, bool) {
	if o == nil || isNil(o.StopPrice) {
    return nil, false
	}
	return o.StopPrice, true
}

// HasStopPrice returns a boolean if a field has been set.
func (o *TradingCryptoSpotPlaceOrderRequest) HasStopPrice() bool {
	if o != nil && !isNil(o.StopPrice) {
		return true
	}

	return false
}

// SetStopPrice gets a reference to the given float64 and assigns it to the StopPrice field.
func (o *TradingCryptoSpotPlaceOrderRequest) SetStopPrice(v float64) {
	o.StopPrice = &v
}

// GetPostOnly returns the PostOnly field value if set, zero value otherwise.
func (o *TradingCryptoSpotPlaceOrderRequest) GetPostOnly() bool {
	if o == nil || isNil(o.PostOnly) {
		var ret bool
		return ret
	}
	return *o.PostOnly
}

// GetPostOnlyOk returns a tuple with the PostOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradingCryptoSpotPlaceOrderRequest) GetPostOnlyOk() (*bool, bool) {
	if o == nil || isNil(o.PostOnly) {
    return nil, false
	}
	return o.PostOnly, true
}

// HasPostOnly returns a boolean if a field has been set.
func (o *TradingCryptoSpotPlaceOrderRequest) HasPostOnly() bool {
	if o != nil && !isNil(o.PostOnly) {
		return true
	}

	return false
}

// SetPostOnly gets a reference to the given bool and assigns it to the PostOnly field.
func (o *TradingCryptoSpotPlaceOrderRequest) SetPostOnly(v bool) {
	o.PostOnly = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *TradingCryptoSpotPlaceOrderRequest) GetExpirationDate() time.Time {
	if o == nil || isNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradingCryptoSpotPlaceOrderRequest) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || isNil(o.ExpirationDate) {
    return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *TradingCryptoSpotPlaceOrderRequest) HasExpirationDate() bool {
	if o != nil && !isNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *TradingCryptoSpotPlaceOrderRequest) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

func (o TradingCryptoSpotPlaceOrderRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if true {
		toSerialize["side"] = o.Side
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["time_in_force"] = o.TimeInForce
	}
	if true {
		toSerialize["amount"] = o.Amount
	}
	if !isNil(o.LimitPrice) {
		toSerialize["limit_price"] = o.LimitPrice
	}
	if !isNil(o.StopPrice) {
		toSerialize["stop_price"] = o.StopPrice
	}
	if !isNil(o.PostOnly) {
		toSerialize["post_only"] = o.PostOnly
	}
	if !isNil(o.ExpirationDate) {
		toSerialize["expiration_date"] = o.ExpirationDate
	}
	return json.Marshal(toSerialize)
}

type NullableTradingCryptoSpotPlaceOrderRequest struct {
	value *TradingCryptoSpotPlaceOrderRequest
	isSet bool
}

func (v NullableTradingCryptoSpotPlaceOrderRequest) Get() *TradingCryptoSpotPlaceOrderRequest {
	return v.value
}

func (v *NullableTradingCryptoSpotPlaceOrderRequest) Set(val *TradingCryptoSpotPlaceOrderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTradingCryptoSpotPlaceOrderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTradingCryptoSpotPlaceOrderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTradingCryptoSpotPlaceOrderRequest(val *TradingCryptoSpotPlaceOrderRequest) *NullableTradingCryptoSpotPlaceOrderRequest {
	return &NullableTradingCryptoSpotPlaceOrderRequest{value: val, isSet: true}
}

func (v NullableTradingCryptoSpotPlaceOrderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTradingCryptoSpotPlaceOrderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


