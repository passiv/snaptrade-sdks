/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// CryptoTradingInstrument struct for CryptoTradingInstrument
type CryptoTradingInstrument struct {
	// The instrument's trading ticker symbol
	Symbol string `json:"symbol"`
	// The instrument's type
	Type string `json:"type"`
	AdditionalProperties map[string]interface{}
}

type _CryptoTradingInstrument CryptoTradingInstrument

// NewCryptoTradingInstrument instantiates a new CryptoTradingInstrument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptoTradingInstrument(symbol string, type_ string) *CryptoTradingInstrument {
	this := CryptoTradingInstrument{}
	this.Symbol = symbol
	this.Type = type_
	return &this
}

// NewCryptoTradingInstrumentWithDefaults instantiates a new CryptoTradingInstrument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptoTradingInstrumentWithDefaults() *CryptoTradingInstrument {
	this := CryptoTradingInstrument{}
	return &this
}

// GetSymbol returns the Symbol field value
func (o *CryptoTradingInstrument) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *CryptoTradingInstrument) GetSymbolOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *CryptoTradingInstrument) SetSymbol(v string) {
	o.Symbol = v
}

// GetType returns the Type field value
func (o *CryptoTradingInstrument) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CryptoTradingInstrument) GetTypeOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CryptoTradingInstrument) SetType(v string) {
	o.Type = v
}

func (o CryptoTradingInstrument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if true {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CryptoTradingInstrument) UnmarshalJSON(bytes []byte) (err error) {
	varCryptoTradingInstrument := _CryptoTradingInstrument{}

	if err = json.Unmarshal(bytes, &varCryptoTradingInstrument); err == nil {
		*o = CryptoTradingInstrument(varCryptoTradingInstrument)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCryptoTradingInstrument struct {
	value *CryptoTradingInstrument
	isSet bool
}

func (v NullableCryptoTradingInstrument) Get() *CryptoTradingInstrument {
	return v.value
}

func (v *NullableCryptoTradingInstrument) Set(val *CryptoTradingInstrument) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptoTradingInstrument) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptoTradingInstrument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptoTradingInstrument(val *CryptoTradingInstrument) *NullableCryptoTradingInstrument {
	return &NullableCryptoTradingInstrument{value: val, isSet: true}
}

func (v NullableCryptoTradingInstrument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptoTradingInstrument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


