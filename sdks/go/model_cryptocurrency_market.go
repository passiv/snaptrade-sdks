/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// CryptocurrencyMarket Details of a cryptocurrency market
type CryptocurrencyMarket struct {
	Symbol CryptocurrencyPair `json:"symbol"`
	// True if the account can trade on this market.
	TradingAllowed bool `json:"trading_allowed"`
	AdditionalProperties map[string]interface{}
}

type _CryptocurrencyMarket CryptocurrencyMarket

// NewCryptocurrencyMarket instantiates a new CryptocurrencyMarket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCryptocurrencyMarket(symbol CryptocurrencyPair, tradingAllowed bool) *CryptocurrencyMarket {
	this := CryptocurrencyMarket{}
	this.Symbol = symbol
	this.TradingAllowed = tradingAllowed
	return &this
}

// NewCryptocurrencyMarketWithDefaults instantiates a new CryptocurrencyMarket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCryptocurrencyMarketWithDefaults() *CryptocurrencyMarket {
	this := CryptocurrencyMarket{}
	return &this
}

// GetSymbol returns the Symbol field value
func (o *CryptocurrencyMarket) GetSymbol() CryptocurrencyPair {
	if o == nil {
		var ret CryptocurrencyPair
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *CryptocurrencyMarket) GetSymbolOk() (*CryptocurrencyPair, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *CryptocurrencyMarket) SetSymbol(v CryptocurrencyPair) {
	o.Symbol = v
}

// GetTradingAllowed returns the TradingAllowed field value
func (o *CryptocurrencyMarket) GetTradingAllowed() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.TradingAllowed
}

// GetTradingAllowedOk returns a tuple with the TradingAllowed field value
// and a boolean to check if the value has been set.
func (o *CryptocurrencyMarket) GetTradingAllowedOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TradingAllowed, true
}

// SetTradingAllowed sets field value
func (o *CryptocurrencyMarket) SetTradingAllowed(v bool) {
	o.TradingAllowed = v
}

func (o CryptocurrencyMarket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if true {
		toSerialize["trading_allowed"] = o.TradingAllowed
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *CryptocurrencyMarket) UnmarshalJSON(bytes []byte) (err error) {
	varCryptocurrencyMarket := _CryptocurrencyMarket{}

	if err = json.Unmarshal(bytes, &varCryptocurrencyMarket); err == nil {
		*o = CryptocurrencyMarket(varCryptocurrencyMarket)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "trading_allowed")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCryptocurrencyMarket struct {
	value *CryptocurrencyMarket
	isSet bool
}

func (v NullableCryptocurrencyMarket) Get() *CryptocurrencyMarket {
	return v.value
}

func (v *NullableCryptocurrencyMarket) Set(val *CryptocurrencyMarket) {
	v.value = val
	v.isSet = true
}

func (v NullableCryptocurrencyMarket) IsSet() bool {
	return v.isSet
}

func (v *NullableCryptocurrencyMarket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCryptocurrencyMarket(val *CryptocurrencyMarket) *NullableCryptocurrencyMarket {
	return &NullableCryptocurrencyMarket{value: val, isSet: true}
}

func (v NullableCryptocurrencyMarket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCryptocurrencyMarket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


