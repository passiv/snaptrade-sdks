/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// AccountUniversalActivityCurrency The currency in which the transaction `price` and `amount` is denominated.
type AccountUniversalActivityCurrency struct {
	// Unique identifier for the currency. This is the UUID used to reference the currency in SnapTrade.
	Id *string `json:"id,omitempty"`
	// The ISO-4217 currency code for the currency.
	Code *string `json:"code,omitempty"`
	// A human-friendly name of the currency.
	Name *string `json:"name,omitempty"`
}

// NewAccountUniversalActivityCurrency instantiates a new AccountUniversalActivityCurrency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountUniversalActivityCurrency() *AccountUniversalActivityCurrency {
	this := AccountUniversalActivityCurrency{}
	return &this
}

// NewAccountUniversalActivityCurrencyWithDefaults instantiates a new AccountUniversalActivityCurrency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountUniversalActivityCurrencyWithDefaults() *AccountUniversalActivityCurrency {
	this := AccountUniversalActivityCurrency{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AccountUniversalActivityCurrency) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUniversalActivityCurrency) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AccountUniversalActivityCurrency) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AccountUniversalActivityCurrency) SetId(v string) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *AccountUniversalActivityCurrency) GetCode() string {
	if o == nil || isNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUniversalActivityCurrency) GetCodeOk() (*string, bool) {
	if o == nil || isNil(o.Code) {
    return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *AccountUniversalActivityCurrency) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *AccountUniversalActivityCurrency) SetCode(v string) {
	o.Code = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AccountUniversalActivityCurrency) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountUniversalActivityCurrency) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
    return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AccountUniversalActivityCurrency) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AccountUniversalActivityCurrency) SetName(v string) {
	o.Name = &v
}

func (o AccountUniversalActivityCurrency) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableAccountUniversalActivityCurrency struct {
	value *AccountUniversalActivityCurrency
	isSet bool
}

func (v NullableAccountUniversalActivityCurrency) Get() *AccountUniversalActivityCurrency {
	return v.value
}

func (v *NullableAccountUniversalActivityCurrency) Set(val *AccountUniversalActivityCurrency) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountUniversalActivityCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountUniversalActivityCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountUniversalActivityCurrency(val *AccountUniversalActivityCurrency) *NullableAccountUniversalActivityCurrency {
	return &NullableAccountUniversalActivityCurrency{value: val, isSet: true}
}

func (v NullableAccountUniversalActivityCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountUniversalActivityCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


