/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// OrderUpdatedResponse struct for OrderUpdatedResponse
type OrderUpdatedResponse struct {
	// Order ID returned by brokerage. This is the unique identifier for the order in the brokerage system.
	BrokerageOrderId string `json:"brokerage_order_id"`
	Order *AccountOrderRecord `json:"order,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrderUpdatedResponse OrderUpdatedResponse

// NewOrderUpdatedResponse instantiates a new OrderUpdatedResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderUpdatedResponse(brokerageOrderId string) *OrderUpdatedResponse {
	this := OrderUpdatedResponse{}
	this.BrokerageOrderId = brokerageOrderId
	return &this
}

// NewOrderUpdatedResponseWithDefaults instantiates a new OrderUpdatedResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderUpdatedResponseWithDefaults() *OrderUpdatedResponse {
	this := OrderUpdatedResponse{}
	return &this
}

// GetBrokerageOrderId returns the BrokerageOrderId field value
func (o *OrderUpdatedResponse) GetBrokerageOrderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BrokerageOrderId
}

// GetBrokerageOrderIdOk returns a tuple with the BrokerageOrderId field value
// and a boolean to check if the value has been set.
func (o *OrderUpdatedResponse) GetBrokerageOrderIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.BrokerageOrderId, true
}

// SetBrokerageOrderId sets field value
func (o *OrderUpdatedResponse) SetBrokerageOrderId(v string) {
	o.BrokerageOrderId = v
}

// GetOrder returns the Order field value if set, zero value otherwise.
func (o *OrderUpdatedResponse) GetOrder() AccountOrderRecord {
	if o == nil || isNil(o.Order) {
		var ret AccountOrderRecord
		return ret
	}
	return *o.Order
}

// GetOrderOk returns a tuple with the Order field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderUpdatedResponse) GetOrderOk() (*AccountOrderRecord, bool) {
	if o == nil || isNil(o.Order) {
    return nil, false
	}
	return o.Order, true
}

// HasOrder returns a boolean if a field has been set.
func (o *OrderUpdatedResponse) HasOrder() bool {
	if o != nil && !isNil(o.Order) {
		return true
	}

	return false
}

// SetOrder gets a reference to the given AccountOrderRecord and assigns it to the Order field.
func (o *OrderUpdatedResponse) SetOrder(v AccountOrderRecord) {
	o.Order = &v
}

func (o OrderUpdatedResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["brokerage_order_id"] = o.BrokerageOrderId
	}
	if !isNil(o.Order) {
		toSerialize["order"] = o.Order
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *OrderUpdatedResponse) UnmarshalJSON(bytes []byte) (err error) {
	varOrderUpdatedResponse := _OrderUpdatedResponse{}

	if err = json.Unmarshal(bytes, &varOrderUpdatedResponse); err == nil {
		*o = OrderUpdatedResponse(varOrderUpdatedResponse)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "brokerage_order_id")
		delete(additionalProperties, "order")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrderUpdatedResponse struct {
	value *OrderUpdatedResponse
	isSet bool
}

func (v NullableOrderUpdatedResponse) Get() *OrderUpdatedResponse {
	return v.value
}

func (v *NullableOrderUpdatedResponse) Set(val *OrderUpdatedResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderUpdatedResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderUpdatedResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderUpdatedResponse(val *OrderUpdatedResponse) *NullableOrderUpdatedResponse {
	return &NullableOrderUpdatedResponse{value: val, isSet: true}
}

func (v NullableOrderUpdatedResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderUpdatedResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


