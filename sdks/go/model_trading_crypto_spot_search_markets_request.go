/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// TradingCryptoSpotSearchMarketsRequest struct for TradingCryptoSpotSearchMarketsRequest
type TradingCryptoSpotSearchMarketsRequest struct {
	// Unique identifier for the connected brokerage account. This is the UUID used to reference the account in SnapTrade.
	AccountId string `json:"account_id"`
	// The base currency (e.g., \"BTC\" in BTC/USD). Can be a fiat or crypto code.
	Base string `json:"base"`
	// The quote currency (e.g., \"USD\" in BTC/USD). Can be a fiat or crypto code.
	Quote *string `json:"quote,omitempty"`
}

// NewTradingCryptoSpotSearchMarketsRequest instantiates a new TradingCryptoSpotSearchMarketsRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTradingCryptoSpotSearchMarketsRequest(accountId string, base string) *TradingCryptoSpotSearchMarketsRequest {
	this := TradingCryptoSpotSearchMarketsRequest{}
	this.AccountId = accountId
	this.Base = base
	return &this
}

// NewTradingCryptoSpotSearchMarketsRequestWithDefaults instantiates a new TradingCryptoSpotSearchMarketsRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradingCryptoSpotSearchMarketsRequestWithDefaults() *TradingCryptoSpotSearchMarketsRequest {
	this := TradingCryptoSpotSearchMarketsRequest{}
	return &this
}

// GetAccountId returns the AccountId field value
func (o *TradingCryptoSpotSearchMarketsRequest) GetAccountId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value
// and a boolean to check if the value has been set.
func (o *TradingCryptoSpotSearchMarketsRequest) GetAccountIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.AccountId, true
}

// SetAccountId sets field value
func (o *TradingCryptoSpotSearchMarketsRequest) SetAccountId(v string) {
	o.AccountId = v
}

// GetBase returns the Base field value
func (o *TradingCryptoSpotSearchMarketsRequest) GetBase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Base
}

// GetBaseOk returns a tuple with the Base field value
// and a boolean to check if the value has been set.
func (o *TradingCryptoSpotSearchMarketsRequest) GetBaseOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Base, true
}

// SetBase sets field value
func (o *TradingCryptoSpotSearchMarketsRequest) SetBase(v string) {
	o.Base = v
}

// GetQuote returns the Quote field value if set, zero value otherwise.
func (o *TradingCryptoSpotSearchMarketsRequest) GetQuote() string {
	if o == nil || isNil(o.Quote) {
		var ret string
		return ret
	}
	return *o.Quote
}

// GetQuoteOk returns a tuple with the Quote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TradingCryptoSpotSearchMarketsRequest) GetQuoteOk() (*string, bool) {
	if o == nil || isNil(o.Quote) {
    return nil, false
	}
	return o.Quote, true
}

// HasQuote returns a boolean if a field has been set.
func (o *TradingCryptoSpotSearchMarketsRequest) HasQuote() bool {
	if o != nil && !isNil(o.Quote) {
		return true
	}

	return false
}

// SetQuote gets a reference to the given string and assigns it to the Quote field.
func (o *TradingCryptoSpotSearchMarketsRequest) SetQuote(v string) {
	o.Quote = &v
}

func (o TradingCryptoSpotSearchMarketsRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["account_id"] = o.AccountId
	}
	if true {
		toSerialize["base"] = o.Base
	}
	if !isNil(o.Quote) {
		toSerialize["quote"] = o.Quote
	}
	return json.Marshal(toSerialize)
}

type NullableTradingCryptoSpotSearchMarketsRequest struct {
	value *TradingCryptoSpotSearchMarketsRequest
	isSet bool
}

func (v NullableTradingCryptoSpotSearchMarketsRequest) Get() *TradingCryptoSpotSearchMarketsRequest {
	return v.value
}

func (v *NullableTradingCryptoSpotSearchMarketsRequest) Set(val *TradingCryptoSpotSearchMarketsRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTradingCryptoSpotSearchMarketsRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTradingCryptoSpotSearchMarketsRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTradingCryptoSpotSearchMarketsRequest(val *TradingCryptoSpotSearchMarketsRequest) *NullableTradingCryptoSpotSearchMarketsRequest {
	return &NullableTradingCryptoSpotSearchMarketsRequest{value: val, isSet: true}
}

func (v NullableTradingCryptoSpotSearchMarketsRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTradingCryptoSpotSearchMarketsRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


