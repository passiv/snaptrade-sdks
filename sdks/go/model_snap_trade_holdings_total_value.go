/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// SnapTradeHoldingsTotalValue This field is deprecated. To get the brokerage reported total market value of the account, please refer to `account.balance.total`.  The total market value of the account. Note that this field is calculated based on the sum of the values of account positions and cash balances known to SnapTrade. It may not be accurate if the brokerage account has holdings that SnapTrade is not aware of. For example, if the brokerage account holds assets that SnapTrade does not support, the total value may be underreported. In certain cases, this value may also be double-counting cash-equivalent assets if those assets are represented as both cash and positions in the account. 
type SnapTradeHoldingsTotalValue struct {
	// Total value denominated in the currency of the `currency` field.
	Value NullableFloat32 `json:"value,omitempty"`
	// The ISO-4217 currency code for the amount.
	Currency NullableString `json:"currency,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SnapTradeHoldingsTotalValue SnapTradeHoldingsTotalValue

// NewSnapTradeHoldingsTotalValue instantiates a new SnapTradeHoldingsTotalValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapTradeHoldingsTotalValue() *SnapTradeHoldingsTotalValue {
	this := SnapTradeHoldingsTotalValue{}
	return &this
}

// NewSnapTradeHoldingsTotalValueWithDefaults instantiates a new SnapTradeHoldingsTotalValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapTradeHoldingsTotalValueWithDefaults() *SnapTradeHoldingsTotalValue {
	this := SnapTradeHoldingsTotalValue{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapTradeHoldingsTotalValue) GetValue() float32 {
	if o == nil || isNil(o.Value.Get()) {
		var ret float32
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapTradeHoldingsTotalValue) GetValueOk() (*float32, bool) {
	if o == nil {
    return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *SnapTradeHoldingsTotalValue) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableFloat32 and assigns it to the Value field.
func (o *SnapTradeHoldingsTotalValue) SetValue(v float32) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *SnapTradeHoldingsTotalValue) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *SnapTradeHoldingsTotalValue) UnsetValue() {
	o.Value.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapTradeHoldingsTotalValue) GetCurrency() string {
	if o == nil || isNil(o.Currency.Get()) {
		var ret string
		return ret
	}
	return *o.Currency.Get()
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapTradeHoldingsTotalValue) GetCurrencyOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.Currency.Get(), o.Currency.IsSet()
}

// HasCurrency returns a boolean if a field has been set.
func (o *SnapTradeHoldingsTotalValue) HasCurrency() bool {
	if o != nil && o.Currency.IsSet() {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given NullableString and assigns it to the Currency field.
func (o *SnapTradeHoldingsTotalValue) SetCurrency(v string) {
	o.Currency.Set(&v)
}
// SetCurrencyNil sets the value for Currency to be an explicit nil
func (o *SnapTradeHoldingsTotalValue) SetCurrencyNil() {
	o.Currency.Set(nil)
}

// UnsetCurrency ensures that no value is present for Currency, not even an explicit nil
func (o *SnapTradeHoldingsTotalValue) UnsetCurrency() {
	o.Currency.Unset()
}

func (o SnapTradeHoldingsTotalValue) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if o.Currency.IsSet() {
		toSerialize["currency"] = o.Currency.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *SnapTradeHoldingsTotalValue) UnmarshalJSON(bytes []byte) (err error) {
	varSnapTradeHoldingsTotalValue := _SnapTradeHoldingsTotalValue{}

	if err = json.Unmarshal(bytes, &varSnapTradeHoldingsTotalValue); err == nil {
		*o = SnapTradeHoldingsTotalValue(varSnapTradeHoldingsTotalValue)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "value")
		delete(additionalProperties, "currency")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSnapTradeHoldingsTotalValue struct {
	value *SnapTradeHoldingsTotalValue
	isSet bool
}

func (v NullableSnapTradeHoldingsTotalValue) Get() *SnapTradeHoldingsTotalValue {
	return v.value
}

func (v *NullableSnapTradeHoldingsTotalValue) Set(val *SnapTradeHoldingsTotalValue) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapTradeHoldingsTotalValue) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapTradeHoldingsTotalValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapTradeHoldingsTotalValue(val *SnapTradeHoldingsTotalValue) *NullableSnapTradeHoldingsTotalValue {
	return &NullableSnapTradeHoldingsTotalValue{value: val, isSet: true}
}

func (v NullableSnapTradeHoldingsTotalValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapTradeHoldingsTotalValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


