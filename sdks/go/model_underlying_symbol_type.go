/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// UnderlyingSymbolType The type of security. For example, \"Common Stock\" or \"ETF\".
type UnderlyingSymbolType struct {
	// Unique identifier for the security type within SnapTrade. This is the ID used to reference the security type in SnapTrade API calls.
	Id *string `json:"id,omitempty"`
	// A short code representing the security type. For example, \"cs\" for Common Stock. Here are some common values:   - `ad` - ADR   - `bnd` - Bond   - `cs` - Common Stock   - `cef` - Closed End Fund   - `crypto` - Cryptocurrency   - `et` - ETF   - `oef` - Open Ended Fund   - `ps` - Preferred Stock   - `rt` - Right   - `struct` - Structured Product   - `ut` - Unit   - `wi` - When Issued   - `wt` - Warrant 
	Code *string `json:"code,omitempty"`
	// A human-readable description of the security type. For example, \"Common Stock\" or \"ETF\".
	Description *string `json:"description,omitempty"`
	// This field is deprecated and should not be used. Please reach out to SnapTrade support if you have a valid usecase for this.
	// Deprecated
	IsSupported *bool `json:"is_supported,omitempty"`
}

// NewUnderlyingSymbolType instantiates a new UnderlyingSymbolType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnderlyingSymbolType() *UnderlyingSymbolType {
	this := UnderlyingSymbolType{}
	return &this
}

// NewUnderlyingSymbolTypeWithDefaults instantiates a new UnderlyingSymbolType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnderlyingSymbolTypeWithDefaults() *UnderlyingSymbolType {
	this := UnderlyingSymbolType{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UnderlyingSymbolType) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnderlyingSymbolType) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UnderlyingSymbolType) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UnderlyingSymbolType) SetId(v string) {
	o.Id = &v
}

// GetCode returns the Code field value if set, zero value otherwise.
func (o *UnderlyingSymbolType) GetCode() string {
	if o == nil || isNil(o.Code) {
		var ret string
		return ret
	}
	return *o.Code
}

// GetCodeOk returns a tuple with the Code field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnderlyingSymbolType) GetCodeOk() (*string, bool) {
	if o == nil || isNil(o.Code) {
    return nil, false
	}
	return o.Code, true
}

// HasCode returns a boolean if a field has been set.
func (o *UnderlyingSymbolType) HasCode() bool {
	if o != nil && !isNil(o.Code) {
		return true
	}

	return false
}

// SetCode gets a reference to the given string and assigns it to the Code field.
func (o *UnderlyingSymbolType) SetCode(v string) {
	o.Code = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UnderlyingSymbolType) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnderlyingSymbolType) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UnderlyingSymbolType) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UnderlyingSymbolType) SetDescription(v string) {
	o.Description = &v
}

// GetIsSupported returns the IsSupported field value if set, zero value otherwise.
// Deprecated
func (o *UnderlyingSymbolType) GetIsSupported() bool {
	if o == nil || isNil(o.IsSupported) {
		var ret bool
		return ret
	}
	return *o.IsSupported
}

// GetIsSupportedOk returns a tuple with the IsSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *UnderlyingSymbolType) GetIsSupportedOk() (*bool, bool) {
	if o == nil || isNil(o.IsSupported) {
    return nil, false
	}
	return o.IsSupported, true
}

// HasIsSupported returns a boolean if a field has been set.
func (o *UnderlyingSymbolType) HasIsSupported() bool {
	if o != nil && !isNil(o.IsSupported) {
		return true
	}

	return false
}

// SetIsSupported gets a reference to the given bool and assigns it to the IsSupported field.
// Deprecated
func (o *UnderlyingSymbolType) SetIsSupported(v bool) {
	o.IsSupported = &v
}

func (o UnderlyingSymbolType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Code) {
		toSerialize["code"] = o.Code
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !isNil(o.IsSupported) {
		toSerialize["is_supported"] = o.IsSupported
	}
	return json.Marshal(toSerialize)
}

type NullableUnderlyingSymbolType struct {
	value *UnderlyingSymbolType
	isSet bool
}

func (v NullableUnderlyingSymbolType) Get() *UnderlyingSymbolType {
	return v.value
}

func (v *NullableUnderlyingSymbolType) Set(val *UnderlyingSymbolType) {
	v.value = val
	v.isSet = true
}

func (v NullableUnderlyingSymbolType) IsSet() bool {
	return v.isSet
}

func (v *NullableUnderlyingSymbolType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnderlyingSymbolType(val *UnderlyingSymbolType) *NullableUnderlyingSymbolType {
	return &NullableUnderlyingSymbolType{value: val, isSet: true}
}

func (v NullableUnderlyingSymbolType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnderlyingSymbolType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


