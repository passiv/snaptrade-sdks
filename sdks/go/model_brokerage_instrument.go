/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// BrokerageInstrument struct for BrokerageInstrument
type BrokerageInstrument struct {
	// The instrument's trading symbol / ticker.
	Symbol *string `json:"symbol,omitempty"`
	// The MIC code of the exchange where the instrument is traded.
	ExchangeMic NullableString `json:"exchange_mic,omitempty"`
	// Whether the instrument is tradeable through the brokerage. `null` if the tradeability is unknown.
	Tradeable NullableBool `json:"tradeable,omitempty"`
	// Whether the instrument allows fractional units. `null` if the fractionability is unknown.
	Fractionable NullableBool `json:"fractionable,omitempty"`
	// The universal symbol ID of the instrument. This is the ID used to reference the instrument in SnapTrade API calls.
	UniversalSymbolId NullableString `json:"universal_symbol_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BrokerageInstrument BrokerageInstrument

// NewBrokerageInstrument instantiates a new BrokerageInstrument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBrokerageInstrument() *BrokerageInstrument {
	this := BrokerageInstrument{}
	return &this
}

// NewBrokerageInstrumentWithDefaults instantiates a new BrokerageInstrument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBrokerageInstrumentWithDefaults() *BrokerageInstrument {
	this := BrokerageInstrument{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *BrokerageInstrument) GetSymbol() string {
	if o == nil || isNil(o.Symbol) {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BrokerageInstrument) GetSymbolOk() (*string, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *BrokerageInstrument) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *BrokerageInstrument) SetSymbol(v string) {
	o.Symbol = &v
}

// GetExchangeMic returns the ExchangeMic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrokerageInstrument) GetExchangeMic() string {
	if o == nil || isNil(o.ExchangeMic.Get()) {
		var ret string
		return ret
	}
	return *o.ExchangeMic.Get()
}

// GetExchangeMicOk returns a tuple with the ExchangeMic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrokerageInstrument) GetExchangeMicOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.ExchangeMic.Get(), o.ExchangeMic.IsSet()
}

// HasExchangeMic returns a boolean if a field has been set.
func (o *BrokerageInstrument) HasExchangeMic() bool {
	if o != nil && o.ExchangeMic.IsSet() {
		return true
	}

	return false
}

// SetExchangeMic gets a reference to the given NullableString and assigns it to the ExchangeMic field.
func (o *BrokerageInstrument) SetExchangeMic(v string) {
	o.ExchangeMic.Set(&v)
}
// SetExchangeMicNil sets the value for ExchangeMic to be an explicit nil
func (o *BrokerageInstrument) SetExchangeMicNil() {
	o.ExchangeMic.Set(nil)
}

// UnsetExchangeMic ensures that no value is present for ExchangeMic, not even an explicit nil
func (o *BrokerageInstrument) UnsetExchangeMic() {
	o.ExchangeMic.Unset()
}

// GetTradeable returns the Tradeable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrokerageInstrument) GetTradeable() bool {
	if o == nil || isNil(o.Tradeable.Get()) {
		var ret bool
		return ret
	}
	return *o.Tradeable.Get()
}

// GetTradeableOk returns a tuple with the Tradeable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrokerageInstrument) GetTradeableOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.Tradeable.Get(), o.Tradeable.IsSet()
}

// HasTradeable returns a boolean if a field has been set.
func (o *BrokerageInstrument) HasTradeable() bool {
	if o != nil && o.Tradeable.IsSet() {
		return true
	}

	return false
}

// SetTradeable gets a reference to the given NullableBool and assigns it to the Tradeable field.
func (o *BrokerageInstrument) SetTradeable(v bool) {
	o.Tradeable.Set(&v)
}
// SetTradeableNil sets the value for Tradeable to be an explicit nil
func (o *BrokerageInstrument) SetTradeableNil() {
	o.Tradeable.Set(nil)
}

// UnsetTradeable ensures that no value is present for Tradeable, not even an explicit nil
func (o *BrokerageInstrument) UnsetTradeable() {
	o.Tradeable.Unset()
}

// GetFractionable returns the Fractionable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrokerageInstrument) GetFractionable() bool {
	if o == nil || isNil(o.Fractionable.Get()) {
		var ret bool
		return ret
	}
	return *o.Fractionable.Get()
}

// GetFractionableOk returns a tuple with the Fractionable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrokerageInstrument) GetFractionableOk() (*bool, bool) {
	if o == nil {
    return nil, false
	}
	return o.Fractionable.Get(), o.Fractionable.IsSet()
}

// HasFractionable returns a boolean if a field has been set.
func (o *BrokerageInstrument) HasFractionable() bool {
	if o != nil && o.Fractionable.IsSet() {
		return true
	}

	return false
}

// SetFractionable gets a reference to the given NullableBool and assigns it to the Fractionable field.
func (o *BrokerageInstrument) SetFractionable(v bool) {
	o.Fractionable.Set(&v)
}
// SetFractionableNil sets the value for Fractionable to be an explicit nil
func (o *BrokerageInstrument) SetFractionableNil() {
	o.Fractionable.Set(nil)
}

// UnsetFractionable ensures that no value is present for Fractionable, not even an explicit nil
func (o *BrokerageInstrument) UnsetFractionable() {
	o.Fractionable.Unset()
}

// GetUniversalSymbolId returns the UniversalSymbolId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BrokerageInstrument) GetUniversalSymbolId() string {
	if o == nil || isNil(o.UniversalSymbolId.Get()) {
		var ret string
		return ret
	}
	return *o.UniversalSymbolId.Get()
}

// GetUniversalSymbolIdOk returns a tuple with the UniversalSymbolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BrokerageInstrument) GetUniversalSymbolIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.UniversalSymbolId.Get(), o.UniversalSymbolId.IsSet()
}

// HasUniversalSymbolId returns a boolean if a field has been set.
func (o *BrokerageInstrument) HasUniversalSymbolId() bool {
	if o != nil && o.UniversalSymbolId.IsSet() {
		return true
	}

	return false
}

// SetUniversalSymbolId gets a reference to the given NullableString and assigns it to the UniversalSymbolId field.
func (o *BrokerageInstrument) SetUniversalSymbolId(v string) {
	o.UniversalSymbolId.Set(&v)
}
// SetUniversalSymbolIdNil sets the value for UniversalSymbolId to be an explicit nil
func (o *BrokerageInstrument) SetUniversalSymbolIdNil() {
	o.UniversalSymbolId.Set(nil)
}

// UnsetUniversalSymbolId ensures that no value is present for UniversalSymbolId, not even an explicit nil
func (o *BrokerageInstrument) UnsetUniversalSymbolId() {
	o.UniversalSymbolId.Unset()
}

func (o BrokerageInstrument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if o.ExchangeMic.IsSet() {
		toSerialize["exchange_mic"] = o.ExchangeMic.Get()
	}
	if o.Tradeable.IsSet() {
		toSerialize["tradeable"] = o.Tradeable.Get()
	}
	if o.Fractionable.IsSet() {
		toSerialize["fractionable"] = o.Fractionable.Get()
	}
	if o.UniversalSymbolId.IsSet() {
		toSerialize["universal_symbol_id"] = o.UniversalSymbolId.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *BrokerageInstrument) UnmarshalJSON(bytes []byte) (err error) {
	varBrokerageInstrument := _BrokerageInstrument{}

	if err = json.Unmarshal(bytes, &varBrokerageInstrument); err == nil {
		*o = BrokerageInstrument(varBrokerageInstrument)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "exchange_mic")
		delete(additionalProperties, "tradeable")
		delete(additionalProperties, "fractionable")
		delete(additionalProperties, "universal_symbol_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBrokerageInstrument struct {
	value *BrokerageInstrument
	isSet bool
}

func (v NullableBrokerageInstrument) Get() *BrokerageInstrument {
	return v.value
}

func (v *NullableBrokerageInstrument) Set(val *BrokerageInstrument) {
	v.value = val
	v.isSet = true
}

func (v NullableBrokerageInstrument) IsSet() bool {
	return v.isSet
}

func (v *NullableBrokerageInstrument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBrokerageInstrument(val *BrokerageInstrument) *NullableBrokerageInstrument {
	return &NullableBrokerageInstrument{value: val, isSet: true}
}

func (v NullableBrokerageInstrument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBrokerageInstrument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


