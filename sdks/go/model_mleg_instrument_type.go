/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
	"fmt"
)

// MlegInstrumentType The instrument's type
type MlegInstrumentType string

// List of MlegInstrumentType
const (
	MLEGINSTRUMENTTYPE_OPTION MlegInstrumentType = "OPTION"
	MLEGINSTRUMENTTYPE_EQUITY MlegInstrumentType = "EQUITY"
)

// All allowed values of MlegInstrumentType enum
var AllowedMlegInstrumentTypeEnumValues = []MlegInstrumentType{
	"OPTION",
	"EQUITY",
}

func (v *MlegInstrumentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MlegInstrumentType(value)
	for _, existing := range AllowedMlegInstrumentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MlegInstrumentType", value)
}

// NewMlegInstrumentTypeFromValue returns a pointer to a valid MlegInstrumentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMlegInstrumentTypeFromValue(v string) (*MlegInstrumentType, error) {
	ev := MlegInstrumentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MlegInstrumentType: valid values are %v", v, AllowedMlegInstrumentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MlegInstrumentType) IsValid() bool {
	for _, existing := range AllowedMlegInstrumentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MlegInstrumentType value
func (v MlegInstrumentType) Ptr() *MlegInstrumentType {
	return &v
}

type NullableMlegInstrumentType struct {
	value *MlegInstrumentType
	isSet bool
}

func (v NullableMlegInstrumentType) Get() *MlegInstrumentType {
	return v.value
}

func (v *NullableMlegInstrumentType) Set(val *MlegInstrumentType) {
	v.value = val
	v.isSet = true
}

func (v NullableMlegInstrumentType) IsSet() bool {
	return v.isSet
}

func (v *NullableMlegInstrumentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMlegInstrumentType(val *MlegInstrumentType) *NullableMlegInstrumentType {
	return &NullableMlegInstrumentType{value: val, isSet: true}
}

func (v NullableMlegInstrumentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMlegInstrumentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

