/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// TradingCryptoSpotSymbols200Response The symbols
type TradingCryptoSpotSymbols200Response struct {
	Items []CryptocurrencyPair `json:"items"`
	AdditionalProperties map[string]interface{}
}

type _TradingCryptoSpotSymbols200Response TradingCryptoSpotSymbols200Response

// NewTradingCryptoSpotSymbols200Response instantiates a new TradingCryptoSpotSymbols200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTradingCryptoSpotSymbols200Response(items []CryptocurrencyPair) *TradingCryptoSpotSymbols200Response {
	this := TradingCryptoSpotSymbols200Response{}
	this.Items = items
	return &this
}

// NewTradingCryptoSpotSymbols200ResponseWithDefaults instantiates a new TradingCryptoSpotSymbols200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradingCryptoSpotSymbols200ResponseWithDefaults() *TradingCryptoSpotSymbols200Response {
	this := TradingCryptoSpotSymbols200Response{}
	return &this
}

// GetItems returns the Items field value
func (o *TradingCryptoSpotSymbols200Response) GetItems() []CryptocurrencyPair {
	if o == nil {
		var ret []CryptocurrencyPair
		return ret
	}

	return o.Items
}

// GetItemsOk returns a tuple with the Items field value
// and a boolean to check if the value has been set.
func (o *TradingCryptoSpotSymbols200Response) GetItemsOk() ([]CryptocurrencyPair, bool) {
	if o == nil {
    return nil, false
	}
	return o.Items, true
}

// SetItems sets field value
func (o *TradingCryptoSpotSymbols200Response) SetItems(v []CryptocurrencyPair) {
	o.Items = v
}

func (o TradingCryptoSpotSymbols200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["items"] = o.Items
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TradingCryptoSpotSymbols200Response) UnmarshalJSON(bytes []byte) (err error) {
	varTradingCryptoSpotSymbols200Response := _TradingCryptoSpotSymbols200Response{}

	if err = json.Unmarshal(bytes, &varTradingCryptoSpotSymbols200Response); err == nil {
		*o = TradingCryptoSpotSymbols200Response(varTradingCryptoSpotSymbols200Response)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "items")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTradingCryptoSpotSymbols200Response struct {
	value *TradingCryptoSpotSymbols200Response
	isSet bool
}

func (v NullableTradingCryptoSpotSymbols200Response) Get() *TradingCryptoSpotSymbols200Response {
	return v.value
}

func (v *NullableTradingCryptoSpotSymbols200Response) Set(val *TradingCryptoSpotSymbols200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableTradingCryptoSpotSymbols200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableTradingCryptoSpotSymbols200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTradingCryptoSpotSymbols200Response(val *TradingCryptoSpotSymbols200Response) *NullableTradingCryptoSpotSymbols200Response {
	return &NullableTradingCryptoSpotSymbols200Response{value: val, isSet: true}
}

func (v NullableTradingCryptoSpotSymbols200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTradingCryptoSpotSymbols200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


