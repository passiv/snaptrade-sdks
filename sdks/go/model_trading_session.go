/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
	"fmt"
)

// TradingSession The trading session for the order. This field indicates which market session the order will be placed in. This is only available for certain brokerages. Defaults to REGULAR. Here are the supported values:   - `REGULAR` - Regular trading hours.   - `EXTENDED` - Extended trading hours. 
type TradingSession string

// List of TradingSession
const (
	TRADINGSESSION_REGULAR TradingSession = "REGULAR"
	TRADINGSESSION_EXTENDED TradingSession = "EXTENDED"
)

// All allowed values of TradingSession enum
var AllowedTradingSessionEnumValues = []TradingSession{
	"REGULAR",
	"EXTENDED",
}

func (v *TradingSession) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TradingSession(value)
	for _, existing := range AllowedTradingSessionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TradingSession", value)
}

// NewTradingSessionFromValue returns a pointer to a valid TradingSession
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTradingSessionFromValue(v string) (*TradingSession, error) {
	ev := TradingSession(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TradingSession: valid values are %v", v, AllowedTradingSessionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TradingSession) IsValid() bool {
	for _, existing := range AllowedTradingSessionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TradingSession value
func (v TradingSession) Ptr() *TradingSession {
	return &v
}

type NullableTradingSession struct {
	value *TradingSession
	isSet bool
}

func (v NullableTradingSession) Get() *TradingSession {
	return v.value
}

func (v *NullableTradingSession) Set(val *TradingSession) {
	v.value = val
	v.isSet = true
}

func (v NullableTradingSession) IsSet() bool {
	return v.isSet
}

func (v *NullableTradingSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTradingSession(val *TradingSession) *NullableTradingSession {
	return &NullableTradingSession{value: val, isSet: true}
}

func (v NullableTradingSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTradingSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

