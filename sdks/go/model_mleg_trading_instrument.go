/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// MlegTradingInstrument struct for MlegTradingInstrument
type MlegTradingInstrument struct {
	// The security's trading ticker symbol. This currently supports stock symbols and Options symbols in the 21 character OCC format. For example \"AAPL  131124C00240000\" represents a call option on AAPL expiring on 2024-11-13 with a strike price of $240. For more information on the OCC format, see [here](https://en.wikipedia.org/wiki/Option_symbol#OCC_format)
	Symbol string `json:"symbol"`
	InstrumentType MlegInstrumentType `json:"instrument_type"`
	AdditionalProperties map[string]interface{}
}

type _MlegTradingInstrument MlegTradingInstrument

// NewMlegTradingInstrument instantiates a new MlegTradingInstrument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMlegTradingInstrument(symbol string, instrumentType MlegInstrumentType) *MlegTradingInstrument {
	this := MlegTradingInstrument{}
	this.Symbol = symbol
	this.InstrumentType = instrumentType
	return &this
}

// NewMlegTradingInstrumentWithDefaults instantiates a new MlegTradingInstrument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMlegTradingInstrumentWithDefaults() *MlegTradingInstrument {
	this := MlegTradingInstrument{}
	return &this
}

// GetSymbol returns the Symbol field value
func (o *MlegTradingInstrument) GetSymbol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value
// and a boolean to check if the value has been set.
func (o *MlegTradingInstrument) GetSymbolOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Symbol, true
}

// SetSymbol sets field value
func (o *MlegTradingInstrument) SetSymbol(v string) {
	o.Symbol = v
}

// GetInstrumentType returns the InstrumentType field value
func (o *MlegTradingInstrument) GetInstrumentType() MlegInstrumentType {
	if o == nil {
		var ret MlegInstrumentType
		return ret
	}

	return o.InstrumentType
}

// GetInstrumentTypeOk returns a tuple with the InstrumentType field value
// and a boolean to check if the value has been set.
func (o *MlegTradingInstrument) GetInstrumentTypeOk() (*MlegInstrumentType, bool) {
	if o == nil {
    return nil, false
	}
	return &o.InstrumentType, true
}

// SetInstrumentType sets field value
func (o *MlegTradingInstrument) SetInstrumentType(v MlegInstrumentType) {
	o.InstrumentType = v
}

func (o MlegTradingInstrument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["symbol"] = o.Symbol
	}
	if true {
		toSerialize["instrument_type"] = o.InstrumentType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *MlegTradingInstrument) UnmarshalJSON(bytes []byte) (err error) {
	varMlegTradingInstrument := _MlegTradingInstrument{}

	if err = json.Unmarshal(bytes, &varMlegTradingInstrument); err == nil {
		*o = MlegTradingInstrument(varMlegTradingInstrument)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "instrument_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMlegTradingInstrument struct {
	value *MlegTradingInstrument
	isSet bool
}

func (v NullableMlegTradingInstrument) Get() *MlegTradingInstrument {
	return v.value
}

func (v *NullableMlegTradingInstrument) Set(val *MlegTradingInstrument) {
	v.value = val
	v.isSet = true
}

func (v NullableMlegTradingInstrument) IsSet() bool {
	return v.isSet
}

func (v *NullableMlegTradingInstrument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMlegTradingInstrument(val *MlegTradingInstrument) *NullableMlegTradingInstrument {
	return &NullableMlegTradingInstrument{value: val, isSet: true}
}

func (v NullableMlegTradingInstrument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMlegTradingInstrument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


