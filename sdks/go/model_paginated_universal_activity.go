/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// PaginatedUniversalActivity A paginated list of UniversalActivity objects.
type PaginatedUniversalActivity struct {
	Data []AccountUniversalActivity `json:"data,omitempty"`
	Pagination *PaginationDetails `json:"pagination,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PaginatedUniversalActivity PaginatedUniversalActivity

// NewPaginatedUniversalActivity instantiates a new PaginatedUniversalActivity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginatedUniversalActivity() *PaginatedUniversalActivity {
	this := PaginatedUniversalActivity{}
	return &this
}

// NewPaginatedUniversalActivityWithDefaults instantiates a new PaginatedUniversalActivity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginatedUniversalActivityWithDefaults() *PaginatedUniversalActivity {
	this := PaginatedUniversalActivity{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *PaginatedUniversalActivity) GetData() []AccountUniversalActivity {
	if o == nil || isNil(o.Data) {
		var ret []AccountUniversalActivity
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedUniversalActivity) GetDataOk() ([]AccountUniversalActivity, bool) {
	if o == nil || isNil(o.Data) {
    return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *PaginatedUniversalActivity) HasData() bool {
	if o != nil && !isNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given []AccountUniversalActivity and assigns it to the Data field.
func (o *PaginatedUniversalActivity) SetData(v []AccountUniversalActivity) {
	o.Data = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *PaginatedUniversalActivity) GetPagination() PaginationDetails {
	if o == nil || isNil(o.Pagination) {
		var ret PaginationDetails
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginatedUniversalActivity) GetPaginationOk() (*PaginationDetails, bool) {
	if o == nil || isNil(o.Pagination) {
    return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *PaginatedUniversalActivity) HasPagination() bool {
	if o != nil && !isNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given PaginationDetails and assigns it to the Pagination field.
func (o *PaginatedUniversalActivity) SetPagination(v PaginationDetails) {
	o.Pagination = &v
}

func (o PaginatedUniversalActivity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !isNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PaginatedUniversalActivity) UnmarshalJSON(bytes []byte) (err error) {
	varPaginatedUniversalActivity := _PaginatedUniversalActivity{}

	if err = json.Unmarshal(bytes, &varPaginatedUniversalActivity); err == nil {
		*o = PaginatedUniversalActivity(varPaginatedUniversalActivity)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "data")
		delete(additionalProperties, "pagination")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePaginatedUniversalActivity struct {
	value *PaginatedUniversalActivity
	isSet bool
}

func (v NullablePaginatedUniversalActivity) Get() *PaginatedUniversalActivity {
	return v.value
}

func (v *NullablePaginatedUniversalActivity) Set(val *PaginatedUniversalActivity) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginatedUniversalActivity) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginatedUniversalActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginatedUniversalActivity(val *PaginatedUniversalActivity) *NullablePaginatedUniversalActivity {
	return &NullablePaginatedUniversalActivity{value: val, isSet: true}
}

func (v NullablePaginatedUniversalActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginatedUniversalActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


