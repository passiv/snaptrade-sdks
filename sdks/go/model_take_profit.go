/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// TakeProfit Details of the take profit order. Only to be used when order_class = BRACKET.
type TakeProfit struct {
	LimitPrice *string `json:"limit_price,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TakeProfit TakeProfit

// NewTakeProfit instantiates a new TakeProfit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTakeProfit() *TakeProfit {
	this := TakeProfit{}
	return &this
}

// NewTakeProfitWithDefaults instantiates a new TakeProfit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTakeProfitWithDefaults() *TakeProfit {
	this := TakeProfit{}
	return &this
}

// GetLimitPrice returns the LimitPrice field value if set, zero value otherwise.
func (o *TakeProfit) GetLimitPrice() string {
	if o == nil || isNil(o.LimitPrice) {
		var ret string
		return ret
	}
	return *o.LimitPrice
}

// GetLimitPriceOk returns a tuple with the LimitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TakeProfit) GetLimitPriceOk() (*string, bool) {
	if o == nil || isNil(o.LimitPrice) {
    return nil, false
	}
	return o.LimitPrice, true
}

// HasLimitPrice returns a boolean if a field has been set.
func (o *TakeProfit) HasLimitPrice() bool {
	if o != nil && !isNil(o.LimitPrice) {
		return true
	}

	return false
}

// SetLimitPrice gets a reference to the given string and assigns it to the LimitPrice field.
func (o *TakeProfit) SetLimitPrice(v string) {
	o.LimitPrice = &v
}

func (o TakeProfit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.LimitPrice) {
		toSerialize["limit_price"] = o.LimitPrice
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *TakeProfit) UnmarshalJSON(bytes []byte) (err error) {
	varTakeProfit := _TakeProfit{}

	if err = json.Unmarshal(bytes, &varTakeProfit); err == nil {
		*o = TakeProfit(varTakeProfit)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "limit_price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTakeProfit struct {
	value *TakeProfit
	isSet bool
}

func (v NullableTakeProfit) Get() *TakeProfit {
	return v.value
}

func (v *NullableTakeProfit) Set(val *TakeProfit) {
	v.value = val
	v.isSet = true
}

func (v NullableTakeProfit) IsSet() bool {
	return v.isSet
}

func (v *NullableTakeProfit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTakeProfit(val *TakeProfit) *NullableTakeProfit {
	return &NullableTakeProfit{value: val, isSet: true}
}

func (v NullableTakeProfit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTakeProfit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


