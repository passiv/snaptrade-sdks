/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
	"fmt"
)

// MlegOrderTypeStrict The type of order to place.
type MlegOrderTypeStrict string

// List of MlegOrderTypeStrict
const (
	MLEGORDERTYPESTRICT_MARKET MlegOrderTypeStrict = "MARKET"
	MLEGORDERTYPESTRICT_LIMIT MlegOrderTypeStrict = "LIMIT"
	MLEGORDERTYPESTRICT_STOP_LOSS_MARKET MlegOrderTypeStrict = "STOP_LOSS_MARKET"
	MLEGORDERTYPESTRICT_STOP_LOSS_LIMIT MlegOrderTypeStrict = "STOP_LOSS_LIMIT"
)

// All allowed values of MlegOrderTypeStrict enum
var AllowedMlegOrderTypeStrictEnumValues = []MlegOrderTypeStrict{
	"MARKET",
	"LIMIT",
	"STOP_LOSS_MARKET",
	"STOP_LOSS_LIMIT",
}

func (v *MlegOrderTypeStrict) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MlegOrderTypeStrict(value)
	for _, existing := range AllowedMlegOrderTypeStrictEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MlegOrderTypeStrict", value)
}

// NewMlegOrderTypeStrictFromValue returns a pointer to a valid MlegOrderTypeStrict
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMlegOrderTypeStrictFromValue(v string) (*MlegOrderTypeStrict, error) {
	ev := MlegOrderTypeStrict(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MlegOrderTypeStrict: valid values are %v", v, AllowedMlegOrderTypeStrictEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MlegOrderTypeStrict) IsValid() bool {
	for _, existing := range AllowedMlegOrderTypeStrictEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MlegOrderTypeStrict value
func (v MlegOrderTypeStrict) Ptr() *MlegOrderTypeStrict {
	return &v
}

type NullableMlegOrderTypeStrict struct {
	value *MlegOrderTypeStrict
	isSet bool
}

func (v NullableMlegOrderTypeStrict) Get() *MlegOrderTypeStrict {
	return v.value
}

func (v *NullableMlegOrderTypeStrict) Set(val *MlegOrderTypeStrict) {
	v.value = val
	v.isSet = true
}

func (v NullableMlegOrderTypeStrict) IsSet() bool {
	return v.isSet
}

func (v *NullableMlegOrderTypeStrict) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMlegOrderTypeStrict(val *MlegOrderTypeStrict) *NullableMlegOrderTypeStrict {
	return &NullableMlegOrderTypeStrict{value: val, isSet: true}
}

func (v NullableMlegOrderTypeStrict) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMlegOrderTypeStrict) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

