/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// TradingPlaceMlegOrderRequest struct for TradingPlaceMlegOrderRequest
type TradingPlaceMlegOrderRequest struct {
	Type MlegOrderTypeStrict `json:"type"`
	TimeInForce TimeInForceStrict `json:"time_in_force"`
	// The limit price. Required if the order type is LIMIT, STOP_LOSS_LIMIT.
	LimitPrice NullableFloat64 `json:"limit_price,omitempty"`
	// The stop price. Required if the order type is STOP_LOSS_MARKET, STOP_LOSS_LIMIT.
	StopPrice NullableFloat64 `json:"stop_price,omitempty"`
	Legs []MlegLeg `json:"legs"`
}

// NewTradingPlaceMlegOrderRequest instantiates a new TradingPlaceMlegOrderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTradingPlaceMlegOrderRequest(type_ MlegOrderTypeStrict, timeInForce TimeInForceStrict, legs []MlegLeg) *TradingPlaceMlegOrderRequest {
	this := TradingPlaceMlegOrderRequest{}
	this.Type = type_
	this.TimeInForce = timeInForce
	this.Legs = legs
	return &this
}

// NewTradingPlaceMlegOrderRequestWithDefaults instantiates a new TradingPlaceMlegOrderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTradingPlaceMlegOrderRequestWithDefaults() *TradingPlaceMlegOrderRequest {
	this := TradingPlaceMlegOrderRequest{}
	return &this
}

// GetType returns the Type field value
func (o *TradingPlaceMlegOrderRequest) GetType() MlegOrderTypeStrict {
	if o == nil {
		var ret MlegOrderTypeStrict
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TradingPlaceMlegOrderRequest) GetTypeOk() (*MlegOrderTypeStrict, bool) {
	if o == nil {
    return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TradingPlaceMlegOrderRequest) SetType(v MlegOrderTypeStrict) {
	o.Type = v
}

// GetTimeInForce returns the TimeInForce field value
func (o *TradingPlaceMlegOrderRequest) GetTimeInForce() TimeInForceStrict {
	if o == nil {
		var ret TimeInForceStrict
		return ret
	}

	return o.TimeInForce
}

// GetTimeInForceOk returns a tuple with the TimeInForce field value
// and a boolean to check if the value has been set.
func (o *TradingPlaceMlegOrderRequest) GetTimeInForceOk() (*TimeInForceStrict, bool) {
	if o == nil {
    return nil, false
	}
	return &o.TimeInForce, true
}

// SetTimeInForce sets field value
func (o *TradingPlaceMlegOrderRequest) SetTimeInForce(v TimeInForceStrict) {
	o.TimeInForce = v
}

// GetLimitPrice returns the LimitPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TradingPlaceMlegOrderRequest) GetLimitPrice() float64 {
	if o == nil || isNil(o.LimitPrice.Get()) {
		var ret float64
		return ret
	}
	return *o.LimitPrice.Get()
}

// GetLimitPriceOk returns a tuple with the LimitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TradingPlaceMlegOrderRequest) GetLimitPriceOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return o.LimitPrice.Get(), o.LimitPrice.IsSet()
}

// HasLimitPrice returns a boolean if a field has been set.
func (o *TradingPlaceMlegOrderRequest) HasLimitPrice() bool {
	if o != nil && o.LimitPrice.IsSet() {
		return true
	}

	return false
}

// SetLimitPrice gets a reference to the given NullableFloat64 and assigns it to the LimitPrice field.
func (o *TradingPlaceMlegOrderRequest) SetLimitPrice(v float64) {
	o.LimitPrice.Set(&v)
}
// SetLimitPriceNil sets the value for LimitPrice to be an explicit nil
func (o *TradingPlaceMlegOrderRequest) SetLimitPriceNil() {
	o.LimitPrice.Set(nil)
}

// UnsetLimitPrice ensures that no value is present for LimitPrice, not even an explicit nil
func (o *TradingPlaceMlegOrderRequest) UnsetLimitPrice() {
	o.LimitPrice.Unset()
}

// GetStopPrice returns the StopPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TradingPlaceMlegOrderRequest) GetStopPrice() float64 {
	if o == nil || isNil(o.StopPrice.Get()) {
		var ret float64
		return ret
	}
	return *o.StopPrice.Get()
}

// GetStopPriceOk returns a tuple with the StopPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TradingPlaceMlegOrderRequest) GetStopPriceOk() (*float64, bool) {
	if o == nil {
    return nil, false
	}
	return o.StopPrice.Get(), o.StopPrice.IsSet()
}

// HasStopPrice returns a boolean if a field has been set.
func (o *TradingPlaceMlegOrderRequest) HasStopPrice() bool {
	if o != nil && o.StopPrice.IsSet() {
		return true
	}

	return false
}

// SetStopPrice gets a reference to the given NullableFloat64 and assigns it to the StopPrice field.
func (o *TradingPlaceMlegOrderRequest) SetStopPrice(v float64) {
	o.StopPrice.Set(&v)
}
// SetStopPriceNil sets the value for StopPrice to be an explicit nil
func (o *TradingPlaceMlegOrderRequest) SetStopPriceNil() {
	o.StopPrice.Set(nil)
}

// UnsetStopPrice ensures that no value is present for StopPrice, not even an explicit nil
func (o *TradingPlaceMlegOrderRequest) UnsetStopPrice() {
	o.StopPrice.Unset()
}

// GetLegs returns the Legs field value
func (o *TradingPlaceMlegOrderRequest) GetLegs() []MlegLeg {
	if o == nil {
		var ret []MlegLeg
		return ret
	}

	return o.Legs
}

// GetLegsOk returns a tuple with the Legs field value
// and a boolean to check if the value has been set.
func (o *TradingPlaceMlegOrderRequest) GetLegsOk() ([]MlegLeg, bool) {
	if o == nil {
    return nil, false
	}
	return o.Legs, true
}

// SetLegs sets field value
func (o *TradingPlaceMlegOrderRequest) SetLegs(v []MlegLeg) {
	o.Legs = v
}

func (o TradingPlaceMlegOrderRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["time_in_force"] = o.TimeInForce
	}
	if o.LimitPrice.IsSet() {
		toSerialize["limit_price"] = o.LimitPrice.Get()
	}
	if o.StopPrice.IsSet() {
		toSerialize["stop_price"] = o.StopPrice.Get()
	}
	if true {
		toSerialize["legs"] = o.Legs
	}
	return json.Marshal(toSerialize)
}

type NullableTradingPlaceMlegOrderRequest struct {
	value *TradingPlaceMlegOrderRequest
	isSet bool
}

func (v NullableTradingPlaceMlegOrderRequest) Get() *TradingPlaceMlegOrderRequest {
	return v.value
}

func (v *NullableTradingPlaceMlegOrderRequest) Set(val *TradingPlaceMlegOrderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTradingPlaceMlegOrderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTradingPlaceMlegOrderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTradingPlaceMlegOrderRequest(val *TradingPlaceMlegOrderRequest) *NullableTradingPlaceMlegOrderRequest {
	return &NullableTradingPlaceMlegOrderRequest{value: val, isSet: true}
}

func (v NullableTradingPlaceMlegOrderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTradingPlaceMlegOrderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


