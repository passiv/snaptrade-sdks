/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// PaginationDetails Details about the pagination of the results.
type PaginationDetails struct {
	// The starting point of the paginated results.
	Offset *int32 `json:"offset,omitempty"`
	// The maximum number of items to return in the response.
	Limit *int32 `json:"limit,omitempty"`
	// The total number of items available to be returned over the API.
	Total *int32 `json:"total,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PaginationDetails PaginationDetails

// NewPaginationDetails instantiates a new PaginationDetails object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginationDetails() *PaginationDetails {
	this := PaginationDetails{}
	return &this
}

// NewPaginationDetailsWithDefaults instantiates a new PaginationDetails object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginationDetailsWithDefaults() *PaginationDetails {
	this := PaginationDetails{}
	return &this
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *PaginationDetails) GetOffset() int32 {
	if o == nil || isNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationDetails) GetOffsetOk() (*int32, bool) {
	if o == nil || isNil(o.Offset) {
    return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *PaginationDetails) HasOffset() bool {
	if o != nil && !isNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *PaginationDetails) SetOffset(v int32) {
	o.Offset = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *PaginationDetails) GetLimit() int32 {
	if o == nil || isNil(o.Limit) {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationDetails) GetLimitOk() (*int32, bool) {
	if o == nil || isNil(o.Limit) {
    return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *PaginationDetails) HasLimit() bool {
	if o != nil && !isNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *PaginationDetails) SetLimit(v int32) {
	o.Limit = &v
}

// GetTotal returns the Total field value if set, zero value otherwise.
func (o *PaginationDetails) GetTotal() int32 {
	if o == nil || isNil(o.Total) {
		var ret int32
		return ret
	}
	return *o.Total
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PaginationDetails) GetTotalOk() (*int32, bool) {
	if o == nil || isNil(o.Total) {
    return nil, false
	}
	return o.Total, true
}

// HasTotal returns a boolean if a field has been set.
func (o *PaginationDetails) HasTotal() bool {
	if o != nil && !isNil(o.Total) {
		return true
	}

	return false
}

// SetTotal gets a reference to the given int32 and assigns it to the Total field.
func (o *PaginationDetails) SetTotal(v int32) {
	o.Total = &v
}

func (o PaginationDetails) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !isNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !isNil(o.Total) {
		toSerialize["total"] = o.Total
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PaginationDetails) UnmarshalJSON(bytes []byte) (err error) {
	varPaginationDetails := _PaginationDetails{}

	if err = json.Unmarshal(bytes, &varPaginationDetails); err == nil {
		*o = PaginationDetails(varPaginationDetails)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "offset")
		delete(additionalProperties, "limit")
		delete(additionalProperties, "total")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePaginationDetails struct {
	value *PaginationDetails
	isSet bool
}

func (v NullablePaginationDetails) Get() *PaginationDetails {
	return v.value
}

func (v *NullablePaginationDetails) Set(val *PaginationDetails) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginationDetails) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginationDetails) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginationDetails(val *PaginationDetails) *NullablePaginationDetails {
	return &NullablePaginationDetails{value: val, isSet: true}
}

func (v NullablePaginationDetails) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginationDetails) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


