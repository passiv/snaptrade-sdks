/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// PositionSymbol Uniquely describes a security for the position within an account. The distinction between this and the `symbol` child property is that this object is specific to a position within an account, while the `symbol` child property is universal across all brokerage accounts. The caller should rely on the `symbol` child property for most use cases.
type PositionSymbol struct {
	Symbol *UniversalSymbol `json:"symbol,omitempty"`
	// A unique ID for the security within SnapTrade, scoped to the brokerage account that the security belongs to. This is a legacy field and should not be used. Do not rely on this being a stable ID as it can change.
	// Deprecated
	Id *string `json:"id,omitempty"`
	// This field is deprecated and the caller should use the `symbol` child property's `description` instead.
	// Deprecated
	Description *string `json:"description,omitempty"`
	// This field is deprecated and should not be used. Please reach out to SnapTrade support if you have a valid usecase for this.
	// Deprecated
	LocalId NullableString `json:"local_id,omitempty"`
	// This field is deprecated and should not be used. Please reach out to SnapTrade support if you have a valid usecase for this.
	// Deprecated
	IsQuotable *bool `json:"is_quotable,omitempty"`
	// This field is deprecated and should not be used. Please reach out to SnapTrade support if you have a valid usecase for this.
	// Deprecated
	IsTradable *bool `json:"is_tradable,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PositionSymbol PositionSymbol

// NewPositionSymbol instantiates a new PositionSymbol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPositionSymbol() *PositionSymbol {
	this := PositionSymbol{}
	return &this
}

// NewPositionSymbolWithDefaults instantiates a new PositionSymbol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPositionSymbolWithDefaults() *PositionSymbol {
	this := PositionSymbol{}
	return &this
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *PositionSymbol) GetSymbol() UniversalSymbol {
	if o == nil || isNil(o.Symbol) {
		var ret UniversalSymbol
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PositionSymbol) GetSymbolOk() (*UniversalSymbol, bool) {
	if o == nil || isNil(o.Symbol) {
    return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *PositionSymbol) HasSymbol() bool {
	if o != nil && !isNil(o.Symbol) {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given UniversalSymbol and assigns it to the Symbol field.
func (o *PositionSymbol) SetSymbol(v UniversalSymbol) {
	o.Symbol = &v
}

// GetId returns the Id field value if set, zero value otherwise.
// Deprecated
func (o *PositionSymbol) GetId() string {
	if o == nil || isNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PositionSymbol) GetIdOk() (*string, bool) {
	if o == nil || isNil(o.Id) {
    return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PositionSymbol) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
// Deprecated
func (o *PositionSymbol) SetId(v string) {
	o.Id = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
// Deprecated
func (o *PositionSymbol) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PositionSymbol) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
    return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PositionSymbol) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
// Deprecated
func (o *PositionSymbol) SetDescription(v string) {
	o.Description = &v
}

// GetLocalId returns the LocalId field value if set, zero value otherwise (both if not set or set to explicit null).
// Deprecated
func (o *PositionSymbol) GetLocalId() string {
	if o == nil || isNil(o.LocalId.Get()) {
		var ret string
		return ret
	}
	return *o.LocalId.Get()
}

// GetLocalIdOk returns a tuple with the LocalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
// Deprecated
func (o *PositionSymbol) GetLocalIdOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.LocalId.Get(), o.LocalId.IsSet()
}

// HasLocalId returns a boolean if a field has been set.
func (o *PositionSymbol) HasLocalId() bool {
	if o != nil && o.LocalId.IsSet() {
		return true
	}

	return false
}

// SetLocalId gets a reference to the given NullableString and assigns it to the LocalId field.
// Deprecated
func (o *PositionSymbol) SetLocalId(v string) {
	o.LocalId.Set(&v)
}
// SetLocalIdNil sets the value for LocalId to be an explicit nil
func (o *PositionSymbol) SetLocalIdNil() {
	o.LocalId.Set(nil)
}

// UnsetLocalId ensures that no value is present for LocalId, not even an explicit nil
func (o *PositionSymbol) UnsetLocalId() {
	o.LocalId.Unset()
}

// GetIsQuotable returns the IsQuotable field value if set, zero value otherwise.
// Deprecated
func (o *PositionSymbol) GetIsQuotable() bool {
	if o == nil || isNil(o.IsQuotable) {
		var ret bool
		return ret
	}
	return *o.IsQuotable
}

// GetIsQuotableOk returns a tuple with the IsQuotable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PositionSymbol) GetIsQuotableOk() (*bool, bool) {
	if o == nil || isNil(o.IsQuotable) {
    return nil, false
	}
	return o.IsQuotable, true
}

// HasIsQuotable returns a boolean if a field has been set.
func (o *PositionSymbol) HasIsQuotable() bool {
	if o != nil && !isNil(o.IsQuotable) {
		return true
	}

	return false
}

// SetIsQuotable gets a reference to the given bool and assigns it to the IsQuotable field.
// Deprecated
func (o *PositionSymbol) SetIsQuotable(v bool) {
	o.IsQuotable = &v
}

// GetIsTradable returns the IsTradable field value if set, zero value otherwise.
// Deprecated
func (o *PositionSymbol) GetIsTradable() bool {
	if o == nil || isNil(o.IsTradable) {
		var ret bool
		return ret
	}
	return *o.IsTradable
}

// GetIsTradableOk returns a tuple with the IsTradable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *PositionSymbol) GetIsTradableOk() (*bool, bool) {
	if o == nil || isNil(o.IsTradable) {
    return nil, false
	}
	return o.IsTradable, true
}

// HasIsTradable returns a boolean if a field has been set.
func (o *PositionSymbol) HasIsTradable() bool {
	if o != nil && !isNil(o.IsTradable) {
		return true
	}

	return false
}

// SetIsTradable gets a reference to the given bool and assigns it to the IsTradable field.
// Deprecated
func (o *PositionSymbol) SetIsTradable(v bool) {
	o.IsTradable = &v
}

func (o PositionSymbol) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Symbol) {
		toSerialize["symbol"] = o.Symbol
	}
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.LocalId.IsSet() {
		toSerialize["local_id"] = o.LocalId.Get()
	}
	if !isNil(o.IsQuotable) {
		toSerialize["is_quotable"] = o.IsQuotable
	}
	if !isNil(o.IsTradable) {
		toSerialize["is_tradable"] = o.IsTradable
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *PositionSymbol) UnmarshalJSON(bytes []byte) (err error) {
	varPositionSymbol := _PositionSymbol{}

	if err = json.Unmarshal(bytes, &varPositionSymbol); err == nil {
		*o = PositionSymbol(varPositionSymbol)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "symbol")
		delete(additionalProperties, "id")
		delete(additionalProperties, "description")
		delete(additionalProperties, "local_id")
		delete(additionalProperties, "is_quotable")
		delete(additionalProperties, "is_tradable")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePositionSymbol struct {
	value *PositionSymbol
	isSet bool
}

func (v NullablePositionSymbol) Get() *PositionSymbol {
	return v.value
}

func (v *NullablePositionSymbol) Set(val *PositionSymbol) {
	v.value = val
	v.isSet = true
}

func (v NullablePositionSymbol) IsSet() bool {
	return v.isSet
}

func (v *NullablePositionSymbol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePositionSymbol(val *PositionSymbol) *NullablePositionSymbol {
	return &NullablePositionSymbol{value: val, isSet: true}
}

func (v NullablePositionSymbol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePositionSymbol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


