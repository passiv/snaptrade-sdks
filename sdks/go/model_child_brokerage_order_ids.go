/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// ChildBrokerageOrderIDs struct for ChildBrokerageOrderIDs
type ChildBrokerageOrderIDs struct {
	// The brokerage order ID for the take profit leg of the bracket order
	TakeProfitOrderId *string `json:"take_profit_order_id,omitempty"`
	// The brokerage order ID for the stop loss leg of the bracket order
	StopLossOrderId *string `json:"stop_loss_order_id,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ChildBrokerageOrderIDs ChildBrokerageOrderIDs

// NewChildBrokerageOrderIDs instantiates a new ChildBrokerageOrderIDs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChildBrokerageOrderIDs() *ChildBrokerageOrderIDs {
	this := ChildBrokerageOrderIDs{}
	return &this
}

// NewChildBrokerageOrderIDsWithDefaults instantiates a new ChildBrokerageOrderIDs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChildBrokerageOrderIDsWithDefaults() *ChildBrokerageOrderIDs {
	this := ChildBrokerageOrderIDs{}
	return &this
}

// GetTakeProfitOrderId returns the TakeProfitOrderId field value if set, zero value otherwise.
func (o *ChildBrokerageOrderIDs) GetTakeProfitOrderId() string {
	if o == nil || isNil(o.TakeProfitOrderId) {
		var ret string
		return ret
	}
	return *o.TakeProfitOrderId
}

// GetTakeProfitOrderIdOk returns a tuple with the TakeProfitOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChildBrokerageOrderIDs) GetTakeProfitOrderIdOk() (*string, bool) {
	if o == nil || isNil(o.TakeProfitOrderId) {
    return nil, false
	}
	return o.TakeProfitOrderId, true
}

// HasTakeProfitOrderId returns a boolean if a field has been set.
func (o *ChildBrokerageOrderIDs) HasTakeProfitOrderId() bool {
	if o != nil && !isNil(o.TakeProfitOrderId) {
		return true
	}

	return false
}

// SetTakeProfitOrderId gets a reference to the given string and assigns it to the TakeProfitOrderId field.
func (o *ChildBrokerageOrderIDs) SetTakeProfitOrderId(v string) {
	o.TakeProfitOrderId = &v
}

// GetStopLossOrderId returns the StopLossOrderId field value if set, zero value otherwise.
func (o *ChildBrokerageOrderIDs) GetStopLossOrderId() string {
	if o == nil || isNil(o.StopLossOrderId) {
		var ret string
		return ret
	}
	return *o.StopLossOrderId
}

// GetStopLossOrderIdOk returns a tuple with the StopLossOrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChildBrokerageOrderIDs) GetStopLossOrderIdOk() (*string, bool) {
	if o == nil || isNil(o.StopLossOrderId) {
    return nil, false
	}
	return o.StopLossOrderId, true
}

// HasStopLossOrderId returns a boolean if a field has been set.
func (o *ChildBrokerageOrderIDs) HasStopLossOrderId() bool {
	if o != nil && !isNil(o.StopLossOrderId) {
		return true
	}

	return false
}

// SetStopLossOrderId gets a reference to the given string and assigns it to the StopLossOrderId field.
func (o *ChildBrokerageOrderIDs) SetStopLossOrderId(v string) {
	o.StopLossOrderId = &v
}

func (o ChildBrokerageOrderIDs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.TakeProfitOrderId) {
		toSerialize["take_profit_order_id"] = o.TakeProfitOrderId
	}
	if !isNil(o.StopLossOrderId) {
		toSerialize["stop_loss_order_id"] = o.StopLossOrderId
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *ChildBrokerageOrderIDs) UnmarshalJSON(bytes []byte) (err error) {
	varChildBrokerageOrderIDs := _ChildBrokerageOrderIDs{}

	if err = json.Unmarshal(bytes, &varChildBrokerageOrderIDs); err == nil {
		*o = ChildBrokerageOrderIDs(varChildBrokerageOrderIDs)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "take_profit_order_id")
		delete(additionalProperties, "stop_loss_order_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChildBrokerageOrderIDs struct {
	value *ChildBrokerageOrderIDs
	isSet bool
}

func (v NullableChildBrokerageOrderIDs) Get() *ChildBrokerageOrderIDs {
	return v.value
}

func (v *NullableChildBrokerageOrderIDs) Set(val *ChildBrokerageOrderIDs) {
	v.value = val
	v.isSet = true
}

func (v NullableChildBrokerageOrderIDs) IsSet() bool {
	return v.isSet
}

func (v *NullableChildBrokerageOrderIDs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChildBrokerageOrderIDs(val *ChildBrokerageOrderIDs) *NullableChildBrokerageOrderIDs {
	return &NullableChildBrokerageOrderIDs{value: val, isSet: true}
}

func (v NullableChildBrokerageOrderIDs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChildBrokerageOrderIDs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


