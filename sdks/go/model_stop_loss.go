/*
SnapTrade

Connect brokerage accounts to your app for live positions and trading

API version: 1.0.0
Contact: api@snaptrade.com
*/

// Code generated by Konfig (https://konfigthis.com); DO NOT EDIT.

package snaptrade

import (
	"encoding/json"
)

// StopLoss Details of the stop loss order. Only to be used when order_class = BRACKET. stop_price is required, limit_price is optional
type StopLoss struct {
	StopPrice *string `json:"stop_price,omitempty"`
	LimitPrice NullableString `json:"limit_price,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _StopLoss StopLoss

// NewStopLoss instantiates a new StopLoss object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStopLoss() *StopLoss {
	this := StopLoss{}
	return &this
}

// NewStopLossWithDefaults instantiates a new StopLoss object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStopLossWithDefaults() *StopLoss {
	this := StopLoss{}
	return &this
}

// GetStopPrice returns the StopPrice field value if set, zero value otherwise.
func (o *StopLoss) GetStopPrice() string {
	if o == nil || isNil(o.StopPrice) {
		var ret string
		return ret
	}
	return *o.StopPrice
}

// GetStopPriceOk returns a tuple with the StopPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopLoss) GetStopPriceOk() (*string, bool) {
	if o == nil || isNil(o.StopPrice) {
    return nil, false
	}
	return o.StopPrice, true
}

// HasStopPrice returns a boolean if a field has been set.
func (o *StopLoss) HasStopPrice() bool {
	if o != nil && !isNil(o.StopPrice) {
		return true
	}

	return false
}

// SetStopPrice gets a reference to the given string and assigns it to the StopPrice field.
func (o *StopLoss) SetStopPrice(v string) {
	o.StopPrice = &v
}

// GetLimitPrice returns the LimitPrice field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StopLoss) GetLimitPrice() string {
	if o == nil || isNil(o.LimitPrice.Get()) {
		var ret string
		return ret
	}
	return *o.LimitPrice.Get()
}

// GetLimitPriceOk returns a tuple with the LimitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StopLoss) GetLimitPriceOk() (*string, bool) {
	if o == nil {
    return nil, false
	}
	return o.LimitPrice.Get(), o.LimitPrice.IsSet()
}

// HasLimitPrice returns a boolean if a field has been set.
func (o *StopLoss) HasLimitPrice() bool {
	if o != nil && o.LimitPrice.IsSet() {
		return true
	}

	return false
}

// SetLimitPrice gets a reference to the given NullableString and assigns it to the LimitPrice field.
func (o *StopLoss) SetLimitPrice(v string) {
	o.LimitPrice.Set(&v)
}
// SetLimitPriceNil sets the value for LimitPrice to be an explicit nil
func (o *StopLoss) SetLimitPriceNil() {
	o.LimitPrice.Set(nil)
}

// UnsetLimitPrice ensures that no value is present for LimitPrice, not even an explicit nil
func (o *StopLoss) UnsetLimitPrice() {
	o.LimitPrice.Unset()
}

func (o StopLoss) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.StopPrice) {
		toSerialize["stop_price"] = o.StopPrice
	}
	if o.LimitPrice.IsSet() {
		toSerialize["limit_price"] = o.LimitPrice.Get()
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return json.Marshal(toSerialize)
}

func (o *StopLoss) UnmarshalJSON(bytes []byte) (err error) {
	varStopLoss := _StopLoss{}

	if err = json.Unmarshal(bytes, &varStopLoss); err == nil {
		*o = StopLoss(varStopLoss)
	}

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(bytes, &additionalProperties); err == nil {
		delete(additionalProperties, "stop_price")
		delete(additionalProperties, "limit_price")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableStopLoss struct {
	value *StopLoss
	isSet bool
}

func (v NullableStopLoss) Get() *StopLoss {
	return v.value
}

func (v *NullableStopLoss) Set(val *StopLoss) {
	v.value = val
	v.isSet = true
}

func (v NullableStopLoss) IsSet() bool {
	return v.isSet
}

func (v *NullableStopLoss) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStopLoss(val *StopLoss) *NullableStopLoss {
	return &NullableStopLoss{value: val, isSet: true}
}

func (v NullableStopLoss) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStopLoss) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


