openapi: 3.0.0
info:
  description: Connect brokerage accounts to your app for live positions and trading
  version: 1.0.0
  title: SnapTrade
  termsOfService: N/A
  contact:
    email: api@snaptrade.com
  x-konfig-ignore:
    potential-incorrect-type: true
  x-readme:
    explorer-enabled: false
servers:
  - description: SnapTrade Production API
    url: https://api.snaptrade.com/api/v1
security:
  - PartnerSignature: []
    PartnerClientId: []
    PartnerTimestamp: []
tags:
  - name: API Status
    description: Check whether the API is operational and verify timestamps.
  - name: Authentication
    description: Register and authenticate users with SnapTrade.
  - name: Connections
    description: Retrieve and manage user connections.
  - name: Account Information
    description: Retrieve account information, such as positions, balances, etc.
  - name: Transactions And Reporting
    description: Retrieve information on account transactions, performance, dividends, contributions, etc.
  - name: Trading
    description: Manage orders on user accounts.
  - name: Reference Data
    description: Retrieve basic information for API use, such as supported brokerages, exchanges, currencies, etc.
  - name: Webhooks
    description: Reach out directly to SnapTrade to enable webhooks in order to be notified when certain events occur.
  - name: Options
    description: Endpoints to search for options prices and chains as well as place options trades if supported.
paths:
  /:
    get:
      tags:
        - API Status
      summary: Get API Status
      description: Check whether the API is operational and verify timestamps.
      operationId: ApiStatus_check
      security: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Status"
        default:
          description: Unexpected Error
  /snapTrade/listUsers:
    get:
      tags:
        - Authentication
      summary: List all users
      operationId: Authentication_listSnapTradeUsers
      description: Returns a list of all registered user IDs. Please note that the response is not currently paginated.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404FailedRequestResponse"
        "500":
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500UnexpectedExceptionResponse"
  /snapTrade/registerUser:
    post:
      tags:
        - Authentication
      summary: Register user
      description: |
        Registers a new SnapTrade user under your Client ID. A user secret will be automatically generated for you and must be properly stored in your system.
        Most SnapTrade operations require a user ID and user secret to be passed in as parameters.
      operationId: Authentication_registerSnapTradeUser
      requestBody:
        $ref: "#/components/requestBodies/RegisterUserRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserIDandSecret"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404FailedRequestResponse"
        "500":
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500UnexpectedExceptionResponse"
  /snapTrade/deleteUser:
    delete:
      tags:
        - Authentication
      summary: Delete user
      operationId: Authentication_deleteSnapTradeUser
      description: Deletes a registered user and all associated data. This action is irreversible. This API is asynchronous and will return a 200 status code if the request is accepted. The user and all associated data will be queued for deletion. Once deleted, a `USER_DELETED` webhook will be sent.
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeleteUserResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403FailedRequestResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404FailedRequestResponse"
        "500":
          description: Unexpected Error
  /snapTrade/login:
    post:
      tags:
        - Authentication
      summary: Generate Connection Portal URL
      operationId: Authentication_loginSnapTradeUser
      description: |
        Authenticates a SnapTrade user and returns the Connection Portal URL used for connecting brokerage accounts. Please check [this guide](/docs/implement-connection-portal) for how to integrate the Connection Portal into your app.

        Please note that the returned URL expires in 5 minutes.
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
      requestBody:
        $ref: "#/components/requestBodies/SnapTradeLoginUserRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/LoginRedirectURI"
                  - $ref: "#/components/schemas/encryptedResponse"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403FailedRequestResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404FailedRequestResponse"
        "500":
          description: Unexpected Error
  /snapTrade/resetUserSecret:
    post:
      tags:
        - Authentication
      summary: Rotate user secret
      description: |
        Rotates the secret for a SnapTrade user. You might use this if `userSecret` is compromised. Please note that if you call this endpoint and fail to save the new secret, you'll no longer be able to access any data for this user, and your only option will be to delete and recreate the user, then ask them to reconnect.
      operationId: Authentication_resetSnapTradeUserSecret
      requestBody:
        $ref: "#/components/requestBodies/ResetUserSecretRequestBody"
      responses:
        "200":
          description: New user secret is generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserIDandSecret"
        "400":
          description:
            Bad Request. Could be caused by various reasons. Error message is
            provided in response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "401":
          description: Failed authentication. Wrong clientId, userId or userSecret provided
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401FailedRequestResponse"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500UnexpectedExceptionResponse"
  /snapTrade/partners:
    get:
      tags:
        - Reference Data
      summary: Get Client Info
      description: Returns configurations for your SnapTrade Client ID, including allowed brokerages and data access.
      operationId: ReferenceData_getPartnerInfo
      parameters: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PartnerData"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401FailedRequestResponse"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404FailedRequestResponse"
        "500":
          description: Unexpected Error
  /holdings:
    get:
      deprecated: true
      tags:
        - Account Information
      summary:
        List all accounts for the user, plus balances, positions, and orders for each
        account.
      description: |
        **Deprecated, please use the account-specific holdings endpoint instead.**

        List all accounts for the user, plus balances, positions, and orders for each
        account.
      operationId: AccountInformation_getAllUserHoldings
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: query
          required: false
          name: brokerage_authorizations
          description:
            Optional. Comma separated list of authorization IDs (only use if
            filtering is needed on one or more authorizations).
          schema:
            type: string
            format: uuid
            example: 917c8734-8470-4a3e-a18f-57c3f2ee6631
      responses:
        "200":
          description: Returns list of accounts and holdings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountHoldings"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403FailedRequestResponse"
        "425":
          description: Too Early
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/425FailedRequestResponse"
        "500":
          description: Unexpected Error
  /accounts/{accountId}/holdings:
    get:
      tags:
        - Account Information
      summary: List account holdings
      description: |
        Returns a list of balances, positions, and recent orders for the specified account. The data returned is similar to the data returned over the more fine-grained [balances](/reference/Account%20Information/AccountInformation_getUserAccountBalance), [positions](/reference/Account%20Information/AccountInformation_getUserAccountPositions) and [orders](/reference/Account%20Information/AccountInformation_getUserAccountOrders) endpoints. __The finer-grained APIs are preferred. They are easier to work with, faster, and have better error handling than this coarse-grained API.__

        The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=d16c4c97b8d5438bbb2d8581ac53b11e) and look for "Cache Expiry Time" to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.
      operationId: AccountInformation_getUserHoldings
      parameters:
        - in: path
          required: true
          name: accountId
          schema:
            $ref: "#/components/schemas/AccountID"
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountHoldingsAccount"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403FailedRequestResponse"
        "425":
          description: Too Early
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/425FailedRequestResponse"
        "500":
          description: Unexpected Error
  /accounts:
    get:
      tags:
        - Account Information
      summary: List accounts
      description: |
        Returns all brokerage accounts across all connections known to SnapTrade for the authenticated user.

        The data returned here is always cached and refreshed once a day. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.
      operationId: AccountInformation_listUserAccounts
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: List of brokerage accounts across all connections.
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        default:
          description: Unexpected error.
  "/accounts/{accountId}":
    get:
      tags:
        - Account Information
      summary: Get account detail
      description: |
        Returns account detail known to SnapTrade for the specified account.

        The data returned here is always cached and refreshed once a day. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.
      operationId: AccountInformation_getUserAccountDetails
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: path
          required: true
          name: accountId
          schema:
            $ref: "#/components/schemas/AccountID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        default:
          description: Unexpected error
    put:
      tags:
        - Account Information
      summary: Update details of an investment account
      description: Updates various properties of a specified account.
      operationId: AccountInformation_updateUserAccount
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: path
          name: accountId
          required: true
          description: The ID of the account to update.
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Successfully updated details of an investment account
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Account"
        default:
          description: Unexpected error
  /accounts/{accountId}/balances:
    get:
      tags:
        - Account Information
      summary: List account balances
      operationId: AccountInformation_getUserAccountBalance
      description: |
        Returns a list of balances for the account. Each element of the list has a distinct currency. Some brokerages like Questrade [allows holding multiple currencies in the same account](https://www.questrade.com/learning/questrade-basics/balances-and-reports/understanding-your-account-balances).

        The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=d16c4c97b8d5438bbb2d8581ac53b11e) and look for "Cache Expiry Time" to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Balance"
        default:
          description: Unexpected error
  /accounts/{accountId}/positions:
    get:
      tags:
        - Account Information
      summary: List account positions
      description: |
        Returns a list of stock/ETF/crypto/mutual fund positions in the specified account. For option positions, please use the [options endpoint](/reference/Options/Options_listOptionHoldings).

        The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=d16c4c97b8d5438bbb2d8581ac53b11e) and look for "Cache Expiry Time" to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.
      operationId: AccountInformation_getUserAccountPositions
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Position"
        default:
          description: Unexpected error
  /accounts/{accountId}/orders:
    get:
      tags:
        - Account Information
      summary: List account recent orders
      operationId: AccountInformation_getUserAccountOrders
      description: |
        Returns a list of recent orders in the specified account.

        The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=d16c4c97b8d5438bbb2d8581ac53b11e) and look for "Cache Expiry Time" to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: query
          name: state
          description: defaults value is set to "all"
          schema:
            type: string
            enum:
              - all
              - open
              - executed
        - in: query
          name: days
          description: Number of days in the past to fetch the most recent orders. Defaults to the last 30 days if no value is passed in.
          schema:
            type: integer
            format: int32
            minimum: 1
            example: 30
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/AccountOrderRecord"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500UnexpectedExceptionResponse"
  /accounts/{accountId}/recentOrders:
    get:
      tags:
        - Account Information
      summary: List account recent orders (last 24 hours only)
      operationId: AccountInformation_getUserAccountRecentOrders
      description: |
        A lightweight endpoint that returns a list of orders executed in the last 24 hours in the specified account.
        This endpoint is realtime and can be used to quickly check if account state has recently changed due to an execution, or check status of recently placed orders
        Differs from /orders in that it is realtime, and only checks the last 24 hours as opposed to the last 30 days
        By default only returns executed orders, but that can be changed by setting *only_executed* to false
        **Please contact support for access as this endpoint is not enabled by default.**
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: query
          name: only_executed
          description: Defaults to true. Indicates if request should fetch only executed orders. Set to false to retrieve non executed orders as well
          schema:
            type: boolean
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecentOrdersResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403FeatureNotEnabledResponse"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500UnexpectedExceptionResponse"
  /accounts/{accountId}/returnRates:
    get:
      tags:
        - Account Information
      summary: List account rate of returns
      operationId: AccountInformation_getUserAccountReturnRates
      description: |
        Returns a list of rate of return percents for a given account. Will include timeframes available from the brokerage, for example "ALL", "1Y", "6M", "3M", "1M"
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateOfReturnResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403FeatureNotEnabledResponse"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500UnexpectedExceptionResponse"
  /accounts/{accountId}/activities:
    get:
      tags:
        - Account Information
      summary: List account activities
      operationId: AccountInformation_getAccountActivities
      description: |
        Returns all historical transactions for the specified account.

        This endpoint is paginated with a default page size of 1000. The endpoint will return a maximum of 1000 transactions per request. See the query parameters for pagination options.

        Transaction are returned in reverse chronological order, using the `trade_date` field.

        The data returned here is always cached and refreshed once a day.
      parameters:
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountID"
        - in: query
          required: false
          name: startDate
          description: The start date (inclusive) of the transaction history to retrieve. If not provided, the default is the first transaction known to SnapTrade based on `trade_date`.
          schema:
            $ref: "#/components/schemas/ReportingDate"
        - in: query
          required: false
          name: endDate
          description: The end date (inclusive) of the transaction history to retrieve. If not provided, the default is the last transaction known to SnapTrade based on `trade_date`.
          schema:
            $ref: "#/components/schemas/ReportingDate"
        - in: query
          required: false
          name: offset
          description: An integer that specifies the starting point of the paginated results. Default is 0.
          schema:
            type: integer
            format: int32
            minimum: 0
        - in: query
          required: false
          name: limit
          description: An integer that specifies the maximum number of transactions to return. Default of 1000.
          schema:
            type: integer
            format: int32
            minimum: 1
        - in: query
          required: false
          name: type
          description: |
            Optional comma separated list of transaction types to filter by. SnapTrade does a best effort to categorize brokerage transaction types into a common set of values. Here are some of the most popular values:
              - `BUY` - Asset bought.
              - `SELL` - Asset sold.
              - `DIVIDEND` - Dividend payout.
              - `CONTRIBUTION` - Cash contribution.
              - `WITHDRAWAL` - Cash withdrawal.
              - `REI` - Dividend reinvestment.
              - `STOCK_DIVIDEND` - A type of dividend where a company distributes shares instead of cash
              - `INTEREST` - Interest deposited into the account.
              - `FEE` - Fee withdrawn from the account.
              - `OPTIONEXPIRATION` - Option expiration event.
              - `OPTIONASSIGNMENT` - Option assignment event.
              - `OPTIONEXERCISE` - Option exercise event.
              - `TRANSFER` - Transfer of assets from one account to another
          schema:
            type: string
            example: BUY,SELL,DIVIDEND
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedUniversalActivity"
        default:
          description: Unexpected error
  /authorizations/{authorizationId}/returnRates:
    get:
      tags:
        - Connections
      summary: List connection rate of returns
      operationId: Connections_returnRates
      description: |
        Returns a list of rate of return percents for a given connection. Will include timeframes available from the brokerage, for example "ALL", "1Y", "6M", "3M", "1M"
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: path
          name: authorizationId
          required: true
          schema:
            $ref: "#/components/schemas/BrokerageAuthID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RateOfReturnResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403FeatureNotEnabledResponse"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500UnexpectedExceptionResponse"
  "/accounts/{accountId}/quotes":
    get:
      tags:
        - Trading
      summary: Get symbol quotes
      description: Returns quotes from the brokerage for the specified symbols and account. The quotes returned can be delayed depending on the brokerage the account belongs to. It is highly recommended that you use your own market data provider for real-time quotes instead of relying on this endpoint. This endpoint does not work for options quotes.
      operationId: Trading_getUserAccountQuotes
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: query
          name: symbols
          required: true
          description: List of Universal Symbol IDs or tickers to get quotes for. When providing multiple values, use a comma as separator
          schema:
            type: string
        - in: query
          name: use_ticker
          description: Should be set to `True` if `symbols` are comprised of tickers. Defaults to `False` if not provided.
          schema:
            type: boolean
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SymbolsQuotes"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500UnexpectedExceptionResponse"
  "/accounts/{accountId}/orders/cancel":
    post:
      tags:
        - Trading
      summary: Cancel order
      description: |
        Attempts to cancel an open order with the brokerage. If the order is no longer cancellable, the request will be rejected.
      operationId: Trading_cancelUserAccountOrder
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountID"
      requestBody:
        $ref: "#/components/requestBodies/CancelOrderRequestBody"
      responses:
        "200":
          description: Order Record of canceled order
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountOrderRecord"
        "400":
          description:
            Unable to cancel open order. Please verify status in brokerage
            account
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500UnexpectedExceptionResponse"
  "/accounts/{accountId}/symbols":
    post:
      tags:
        - Reference Data
      summary: Search account symbols
      description: |
        Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.

        The search results are further limited to the symbols supported by the brokerage for which the account is under.
      operationId: ReferenceData_symbolSearchUserAccount
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountID"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SymbolQuery"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: A list of Universal Symbol objects that match the given query.
                items:
                  $ref: "#/components/schemas/UniversalSymbol"
        default:
          description: Unexpected Error
  "/accounts/{accountId}/options":
    get:
      tags:
        - Options
      summary: List account option positions
      description: |
        Returns a list of option positions in the specified account. For stock/ETF/crypto/mutual fund positions, please use the [positions endpoint](/reference/Account%20Information/AccountInformation_getUserAccountPositions).

        The data returned here is cached. How long the data is cached for varies by brokerage. Check the [brokerage integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=d16c4c97b8d5438bbb2d8581ac53b11e) and look for "Cache Expiry Time" to see the exact value for a specific brokerage. **If you need real-time data, please use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint**.
      operationId: Options_listOptionHoldings
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: path
          name: accountId
          required: true
          schema:
            $ref: "#/components/schemas/AccountID"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OptionsPosition"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500UnexpectedExceptionResponse"
  "/accounts/{accountId}/optionsChain":
    get:
      tags:
        - Options
      summary: Get the options chain for a symbol
      description: Returns the option chain for the specified symbol in the specified account.
      operationId: Options_getOptionsChain
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: path
          name: accountId
          required: true
          description: The ID of the account to get the options chain from.
          schema:
            type: string
            format: uuid
        - in: query
          name: symbol
          required: true
          description: Universal symbol ID if symbol
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: List of all Options available for the brokerage symbol
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OptionChain"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500UnexpectedExceptionResponse"
  "/accounts/{accountId}/optionStrategy":
    post:
      tags:
        - Options
      summary: Create options strategy
      description: |
        Creates an option strategy object that will be used to place an option strategy order.
      operationId: Options_getOptionStrategy
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: path
          name: accountId
          required: true
          description: The ID of the account to create the option strategy object in.
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: "#/components/requestBodies/OptionStrategyRequestBody"

      responses:
        "200":
          description: Order Quotes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StrategyQuotes"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500UnexpectedExceptionResponse"

  /accounts/{accountId}/optionStrategy/{optionStrategyId}:
    get:
      tags:
        - Options
      summary: Get options strategy quotes
      description: |
        Returns a Strategy Quotes object which has latest market data of the specified option strategy.
      operationId: Options_getOptionsStrategyQuote
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: path
          name: accountId
          required: true
          description: The ID of the account the strategy will be placed in.
          schema:
            type: string
            format: uuid
        - in: path
          required: true
          name: optionStrategyId
          description: Option strategy id obtained from response when creating option strategy object
          schema:
            $ref: "#/components/schemas/Id"
      responses:
        "200":
          description: Order Quotes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StrategyQuotes"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500UnexpectedExceptionResponse"

  "/accounts/{accountId}/optionStrategy/{optionStrategyId}/execute":
    post:
      tags:
        - Options
      summary: Place an option strategy order
      description: Places the option strategy order and returns the order record received from the brokerage.
      operationId: Options_placeOptionStrategy
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
        - in: path
          name: accountId
          required: true
          description: The ID of the account to execute the strategy in.
          schema:
            $ref: "#/components/schemas/Id"
        - in: path
          name: optionStrategyId
          required: true
          description: Option strategy id obtained from response when creating option strategy object
          schema:
            $ref: "#/components/schemas/Id"
      requestBody:
        $ref: "#/components/requestBodies/OrderStrategyExecuteBody"

      responses:
        "200":
          description: Status of strategy order placed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StrategyOrderRecord"
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/500UnexpectedExceptionResponse"
  "/authorizations":
    get:
      tags:
        - Connections
      summary: List all connections
      description: |
        Returns a list of all connections for the specified user. Note that `Connection` and `Brokerage Authorization` are interchangeable, but the term `Connection` is preferred and used in the doc for consistency.

        A connection is usually tied to a single login at a brokerage. A single connection can contain multiple brokerage accounts.

        SnapTrade performs de-duping on connections for a given user. If the user has an existing connection with the brokerage, when connecting the brokerage with the same credentials, SnapTrade will return the existing connection instead of creating a new one.
      operationId: Connections_listBrokerageAuthorizations
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                description: A list of all connections for the specified user.
                type: array
                items:
                  $ref: "#/components/schemas/BrokerageAuthorization"
        default:
          description: Unexpected error.
  "/authorizations/{authorizationId}":
    get:
      tags:
        - Connections
      summary: Get connection detail
      description: Returns a single connection for the specified ID.
      operationId: Connections_detailBrokerageAuthorization
      parameters:
        - in: path
          name: authorizationId
          required: true
          schema:
            $ref: "#/components/schemas/BrokerageAuthID"
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrokerageAuthorization"
        default:
          description: Unexpected error.
    delete:
      tags:
        - Connections
      summary: Delete connection
      description: Deletes the connection specified by the ID. This will also delete all accounts and holdings associated with the connection. This action is irreversible. This endpoint is synchronous, a 204 response indicates that the connection has been successfully deleted.
      operationId: Connections_removeBrokerageAuthorization
      parameters:
        - in: path
          name: authorizationId
          required: true
          schema:
            $ref: "#/components/schemas/BrokerageAuthID"
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
      responses:
        "204":
          description: OK
        "400":
          description: Bad Request
        "404":
          description: Not Found
        default:
          description: Unexpected error
  "/authorizations/{authorizationId}/refresh":
    post:
      tags:
        - Connections
      summary: Refresh holdings for a connection
      description: |
        Trigger a holdings update for all accounts under this connection. Updates will be queued asynchronously. [`ACCOUNT_HOLDINGS_UPDATED` webhook](/docs/webhooks#webhooks-account_holdings_updated) will be sent once the sync completes for each account under the connection.
        This endpoint will also trigger a transaction sync for the past day if one has not yet occured.

        *Please contact support for access as this endpoint is not enabled by default.*
      operationId: Connections_refreshBrokerageAuthorization
      parameters:
        - in: path
          name: authorizationId
          required: true
          schema:
            $ref: "#/components/schemas/BrokerageAuthID"
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrokerageAuthorizationRefreshConfirmation"
        "401":
          description: Unauthorized, invalid credentials for this resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401FailedRequestResponse"
        "402":
          description: Unable to sync with brokerage account because the connection is disabled.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/402BrokerageAuthDisabledResponse"
        "403":
          description: Customer or user does not have access to this feature
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403FeatureNotEnabledResponse"
        "404":
          description: The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404FailedRequestResponse"
  "/authorizations/{authorizationId}/disable":
    post:
      tags:
        - Connections
      summary: Force disable connection
      description: |
        Manually force the specified connection to become disabled. This should only be used for testing a reconnect flow, and never used on production connections.
        Will trigger a disconnect as if it happened naturally, and send a [`CONNECTION_BROKEN` webhook](/docs/webhooks#webhooks-connection_broken) for the connection.

        *Please contact us in order to use this endpoint as it is disabled by default.*
      operationId: Connections_disableBrokerageAuthorization
      parameters:
        - in: path
          name: authorizationId
          required: true
          schema:
            $ref: "#/components/schemas/BrokerageAuthID"
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrokerageAuthorizationDisabledConfirmation"
        "401":
          description: Unauthorized, invalid credentials for this resource
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/401FailedRequestResponse"
        "402":
          description: Unable to sync with brokerage account because the connection is disabled.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/402BrokerageAuthAlreadyDisabledException"
        "403":
          description: Customer or user does not have access to this feature
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403FeatureNotEnabledResponse"
        "404":
          description: The requested resource does not exist.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404FailedRequestResponse"

  "/sessionEvents":
    get:
      tags:
        - Connections
      summary: Get all session events for a user
      description: Returns a list of session events associated with a user.
      operationId: Connections_sessionEvents
      parameters:
        - in: query
          required: true
          name: PartnerClientId
          schema:
            $ref: "#/components/schemas/ClientID"
        - in: query
          required: false
          name: userId
          description:
            Optional comma separated list of user IDs used to filter the
            request on specific users
          schema:
            $ref: "#/components/schemas/AccountIDs"
        - in: query
          required: false
          name: sessionId
          description:
            Optional comma separated list of session IDs used to filter the
            request on specific users
          schema:
            $ref: "#/components/schemas/AccountIDs"
      responses:
        "200":
          description: A list of all Session Events for the Partner.
          content:
            application/json:
              schema:
                type: array
                items:
                  anyOf:
                    - $ref: "#/components/schemas/SessionEvent"
        default:
          description: Unexpected error.
  "/brokerages":
    get:
      tags:
        - Reference Data
      summary: Get brokerages
      description: Returns a list of all defined Brokerage objects.
      operationId: ReferenceData_listAllBrokerages
      parameters: []
      responses:
        "200":
          description: A list of all defined Brokerage objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Brokerage"
        default:
          description: Unexpected error.
  "/brokerageAuthorizationTypes":
    get:
      tags:
        - Reference Data
      summary: Get all brokerage authorization types
      description: Returns a list of all defined Brokerage authorization Type objects.
      operationId: ReferenceData_listAllBrokerageAuthorizationType
      parameters:
        - in: query
          required: false
          name: brokerage
          schema:
            type: string
            example: QUESTRADE,ALPACA
          description: Comma separated value of brokerage slugs
      responses:
        "200":
          description: A list of all defined Brokerage Authorization Type objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BrokerageAuthorizationTypeReadOnly"
        default:
          description: Unexpected error.
  /currencies:
    get:
      tags:
        - Reference Data
      summary: Get currencies
      description: Returns a list of all defined Currency objects.
      operationId: ReferenceData_listAllCurrencies
      parameters: []
      responses:
        "200":
          description: A list of all currencies.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Currency"
        default:
          description: Unexpected error.
  /currencies/rates:
    get:
      tags:
        - Reference Data
      summary: Get currency exchange rates
      description: Returns a list of all Exchange Rate Pairs for all supported Currencies.
      operationId: ReferenceData_listAllCurrenciesRates
      parameters: []
      responses:
        "200":
          description: A list of all exchange rates pairs for supported currencies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExchangeRatePairs"
  /currencies/rates/{currencyPair}:
    get:
      tags:
        - Reference Data
      summary: Get exchange rate of a currency pair
      description: Returns an Exchange Rate Pair object for the specified Currency Pair.
      operationId: ReferenceData_getCurrencyExchangeRatePair
      parameters:
        - in: path
          name: currencyPair
          required: true
          description: A currency pair based on currency code for example, {CAD-USD}
          schema:
            type: string
      responses:
        "200":
          description: A list of all exchange rates pairs for supported currencies
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ExchangeRatePairs"
  /exchanges:
    get:
      tags:
        - Reference Data
      summary: Get exchanges
      description: Returns a list of all supported Exchanges.
      operationId: ReferenceData_getStockExchanges
      parameters: []
      responses:
        "200":
          description: A list of all supported stock exchanges
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Exchange"
  /securityTypes:
    get:
      tags:
        - Reference Data
      summary: List security types
      operationId: ReferenceData_getSecurityTypes
      description: Return all available security types supported by SnapTrade.
      parameters: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SecurityType"
        default:
          description: Unexpected Error
  /symbols:
    post:
      tags:
        - Reference Data
      summary: Search symbols
      description: |
        Returns a list of Universal Symbol objects that match the given query. The matching takes into consideration both the ticker and the name of the symbol. Only the first 20 results are returned.
      operationId: ReferenceData_getSymbols
      parameters: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: A list of Universal Symbol objects that match the given query.
                items:
                  $ref: "#/components/schemas/UniversalSymbol"
        default:
          description: Unexpected Error
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SymbolQuery"
  /symbols/{query}:
    get:
      tags:
        - Reference Data
      summary: Get symbol detail
      description: |
        Returns the Universal Symbol object specified by the ticker or the Universal Symbol ID. When a ticker is specified, the first matching result is returned. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on "Yahoo Finance Market Coverage and Data Delays"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a '.TO' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix. Please use the ticker with the proper suffix for the best results.
      operationId: ReferenceData_getSymbolsByTicker
      parameters:
        - in: path
          name: query
          required: true
          description: The ticker or Universal Symbol ID to look up the symbol with.
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UniversalSymbol"
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/404FailedRequestResponse"
        default:
          description: Unexpected Error
  /trade/place:
    post:
      tags:
        - Trading
      summary: Place order
      description: |
        Places a brokerage order in the specified account. The order could be rejected by the brokerage if it is invalid or if the account does not have sufficient funds.

        This endpoint does not compute the impact to the account balance from the order and any potential commissions before submitting the order to the brokerage. If that is desired, you can use the [check order impact endpoint](/reference/Trading/Trading_getOrderImpact).

        It's recommended to trigger a manual refresh of the account after placing an order to ensure the account is up to date. You can use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint for this.
      operationId: Trading_placeForceOrder
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
      requestBody:
        $ref: "#/components/requestBodies/ManualTradeFormRequestBodyWithOptions"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountOrderRecord"
        "400":
          description: Trade could not be placed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "403":
          description: User does not have permissions to place trades
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403FailedRequestResponse"
        "500":
          description: Unexpected Error
  /trade/impact:
    post:
      tags:
        - Trading
      summary: Check order impact
      description: Simulates an order and its impact on the account. This endpoint does not place the order with the brokerage. If successful, it returns a `Trade` object and the ID of the object can be used to place the order with the brokerage using the [place checked order endpoint](/reference/Trading/Trading_placeOrder). Please note that the `Trade` object returned expires after 5 minutes. Any order placed using an expired `Trade` will be rejected.
      operationId: Trading_getOrderImpact
      parameters:
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
      requestBody:
        $ref: "#/components/requestBodies/ManualTradeFormRequestBody"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ManualTradeAndImpact"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "403":
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/403FailedRequestResponse"
        "500":
          description: Unexpected Error
  /trade/{tradeId}:
    post:
      tags:
        - Trading
      summary: Place checked order
      description: |
        Places the previously checked order with the brokerage. The `tradeId` is obtained from the [check order impact endpoint](/reference/Trading/Trading_getOrderImpact). If you prefer to place the order without checking for impact first, you can use the [place order endpoint](/reference/Trading/Trading_placeForceOrder).

        It's recommended to trigger a manual refresh of the account after placing an order to ensure the account is up to date. You can use the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint for this.
      operationId: Trading_placeOrder
      parameters:
        - in: path
          name: tradeId
          required: true
          description: Obtained from calling the [check order impact endpoint](/reference/Trading/Trading_getOrderImpact)
          schema:
            $ref: "#/components/schemas/TradeID"
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
      requestBody:
        $ref: "#/components/requestBodies/ValidatedTradeRequestBody"
      responses:
        "200":
          description: Status of order placed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountOrderRecord"
        "400":
          description: Failed to submit order to broker
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/400FailedRequestResponse"
        "500":
          description: Unexpected Error
  /activities:
    get:
      deprecated: true
      tags:
        - Transactions And Reporting
      summary: Get transaction history for a user
      operationId: TransactionsAndReporting_getActivities
      description: |
        Returns all historical transactions for the specified user and filtering criteria. It's recommended to use `startDate` and `endDate` to paginate through the data, as the response may be very large for accounts with a long history and/or a lot of activity. There's a max number of 10000 transactions returned per request.

        There is no guarantee to the ordering of the transactions returned. Please sort the transactions based on the `trade_date` field if you need them in a specific order.

        The data returned here is always cached and refreshed once a day.
      parameters:
        - in: query
          required: false
          name: startDate
          description: The start date (inclusive) of the transaction history to retrieve. If not provided, the default is the first transaction known to SnapTrade based on `trade_date`.
          schema:
            $ref: "#/components/schemas/ReportingDate"
        - in: query
          required: false
          name: endDate
          description: The end date (inclusive) of the transaction history to retrieve. If not provided, the default is the last transaction known to SnapTrade based on `trade_date`.
          schema:
            $ref: "#/components/schemas/ReportingDate"
        - in: query
          required: false
          name: accounts
          description: Optional comma separated list of SnapTrade Account IDs used to filter the request to specific accounts. If not provided, the default is all known brokerage accounts for the user. The `brokerageAuthorizations` parameter takes precedence over this parameter.
          schema:
            $ref: "#/components/schemas/AccountIDs"
        - in: query
          required: false
          name: brokerageAuthorizations
          description: Optional comma separated list of SnapTrade Connection (Brokerage Authorization) IDs used to filter the request to only accounts that belong to those connections. If not provided, the default is all connections for the user. This parameter takes precedence over the `accounts` parameter.
          schema:
            $ref: "#/components/schemas/BrokerageAuthIDs"
        - in: query
          required: false
          name: type
          description: |
            Optional comma separated list of transaction types to filter by. SnapTrade does a best effort to categorize brokerage transaction types into a common set of values. Here are some of the most popular values:
              - `BUY` - Asset bought.
              - `SELL` - Asset sold.
              - `DIVIDEND` - Dividend payout.
              - `CONTRIBUTION` - Cash contribution.
              - `WITHDRAWAL` - Cash withdrawal.
              - `REI` - Dividend reinvestment.
              - `INTEREST` - Interest deposited into the account.
              - `FEE` - Fee withdrawn from the account.
              - `OPTIONEXPIRATION` - Option expiration event.
              - `OPTIONASSIGNMENT` - Option assignment event.
              - `OPTIONEXERCISE` - Option exercise event.
              - `TRANSFER` - Transfer of assets from one account to another
          schema:
            type: string
            example: BUY,SELL,DIVIDEND
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UniversalActivity"
        default:
          description: Unexpected error
  /performance/custom:
    get:
      deprecated: true
      tags:
        - Transactions And Reporting
      summary: Get performance information for a specific timeframe
      operationId: TransactionsAndReporting_getReportingCustomRange
      description:
        Returns performance information (contributions, dividends, rate of
        return, etc) for a specific timeframe. Please note that Total Equity Timeframe and Rate of Returns are experimental features. Please contact support@snaptrade.com if you notice any inconsistencies.
      parameters:
        - in: query
          required: true
          name: startDate
          schema:
            $ref: "#/components/schemas/ReportingDate"
        - in: query
          required: true
          name: endDate
          schema:
            $ref: "#/components/schemas/ReportingDate"
        - in: query
          required: false
          name: accounts
          description:
            Optional comma separated list of account IDs used to filter the
            request on specific accounts
          schema:
            $ref: "#/components/schemas/AccountIDs"
        - in: query
          required: false
          name: detailed
          description:
            Optional, increases frequency of data points for the total value
            and contribution charts if set to true
          schema:
            type: boolean
            example: true
        - in: query
          required: false
          name: frequency
          description:
            Optional frequency for the rate of return chart (defaults to
            monthly). Possible values are daily, weekly, monthly, quarterly,
            yearly.
          schema:
            $ref: "#/components/schemas/ReportingFrequency"
        - in: query
          required: true
          name: userId
          schema:
            $ref: "#/components/schemas/UserID"
        - in: query
          required: true
          name: userSecret
          schema:
            $ref: "#/components/schemas/UserSecret"
      responses:
        "200":
          description: Successfully retrieved performance data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PerformanceCustom"
        default:
          description: Unexpected error
  /connectionAdded:
    post:
      tags:
        - Webhooks
      operationId: Webhooks_connectionAdded
      description: A webhook that is sent whenever a new connection is added.
      requestBody:
        description: Information about a new connection in the system
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookBase"
      responses:
        "200":
          description: Return a 200 status to indicate that the connection was successful
        "201":
          description: Return a 201 status to indicate that the connection was successful
  /connectionDeleted:
    post:
      tags:
        - Webhooks
      operationId: Webhooks_connectionDeleted
      description: A webhook that is sent whenever an existing connection is deleted.
      requestBody:
        description: Information about the deleted connection
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookBase"
      responses:
        "200":
          description:
            Return a 200 status to indicate that the connection was deleted
            successfully
        "201":
          description: Return a 201 status to indicate that the connection was deleted
  /userRegistered:
    post:
      tags:
        - Webhooks
      operationId: Webhooks_userRegistered
      description: A webhook that is sent whenever a user is newly registered.
      requestBody:
        description: Information about the newly registered user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookBase"
      responses:
        "200":
          description:
            Return a 200 status to indicate that the user was registered
            successfully
        "201":
          description: Return a 201 status to indicate that user was registered
            successfully
  /userDeleted:
    post:
      tags:
        - Webhooks
      operationId: Webhooks_userDeleted
      description: A webhook that is sent whenever an existing user is deleted.
      requestBody:
        description: Information about the deleted user
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookBase"
      responses:
        "200":
          description: Return a 200 status to indicate that the user was deleted
            successfully
        "201":
          description: Return a 201 status to indicate that the connection was successful
  /accountAdded:
    post:
      tags:
        - Webhooks
      operationId: Webhooks_accountAdded
      description: A webhook that is sent whenever a new account is added to an existing brokerage authorization.
      requestBody:
        description: Information about the newly added account
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookBase"
      responses:
        "200":
          description:
            Return a 200 status to indicate that the account was added
            successfully
        "201":
          description:
            Return a 201 status to indicate that the account was added
            successfully
  /accountDeleted:
    post:
      tags:
        - Webhooks
      operationId: Webhooks_accountDeleted
      description: A webhook that is sent whenever an existing account under a brokerage authorization is deleted.
      requestBody:
        description: Information about the deleted account
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookBase"
      responses:
        "200":
          description:
            Return a 200 status to indicate that the account was deleted
            successfully
        "201":
          description:
            Return a 201 status to indicate that the account was deleted
            successfully
  /transactionsUpdated:
    post:
      tags:
        - Webhooks
      operationId: Webhooks_updatedTransactions
      description: A webhook that is sent whenever transactions have been updated for an account.
      requestBody:
        description: Information about the account for which transactions have been updated
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebhookBase"
      responses:
        "200":
          description: Return a 200 status to indicate that the update was successful
        "201":
          description: Return a 201 status to indicate the update was successful
components:
  securitySchemes:
    PartnerSignature:
      type: apiKey
      in: header
      name: Signature
    PartnerClientId:
      type: apiKey
      in: query
      name: clientId
    PartnerTimestamp:
      type: apiKey
      in: query
      name: timestamp
  requestBodies:
    RegisterUserRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SnapTradeRegisterUserRequestBody"
    ResetUserSecretRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserIDandSecret"
    SnapTradeLoginUserRequestBody:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SnapTradeLoginUserRequestBody"
    ManualTradeFormRequestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ManualTradeForm"
    ManualTradeFormRequestBodyWithOptions:
      required: true
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ManualTradeFormWithOptions"
    ValidatedTradeRequestBody:
      required: false
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ValidatedTradeBody"
    CancelOrderRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              brokerage_order_id:
                $ref: "#/components/schemas/BrokerageOrderID"
    OptionStrategyRequestBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: ["underlying_symbol_id", "legs", "strategy_type"]
            properties:
              underlying_symbol_id:
                $ref: "#/components/schemas/Id"
              legs:
                type: array
                items:
                  $ref: "#/components/schemas/OptionLeg"
              strategy_type:
                type: string
                enum:
                  - CUSTOM

    OrderStrategyExecuteBody:
      required: true
      content:
        application/json:
          schema:
            type: object
            required: ["order_type", "time_in_force"]
            properties:
              order_type:
                $ref: "#/components/schemas/OrderTypeStrict"
              time_in_force:
                $ref: "#/components/schemas/TimeInForceStrict"
              price:
                $ref: "#/components/schemas/Price"

  schemas:
    400FailedRequestResponse:
      description: Example for failed request response
      type: object
      properties:
        default_detail:
          example: Unable to verify data sent
        default_code:
          example: 1076
    401FailedRequestResponse:
      description: Example for failed request response
      type: object
      properties:
        default_detail:
          example: Unable to verify signature sent
        default_code:
          example: 1076
    402BrokerageAuthDisabledResponse:
      description: Cannot perform action because connection is disabled
      type: object
      properties:
        detail:
          example: Unable to sync with brokerage account because the connection is disabled.
        code:
          example: 3003
    402BrokerageAuthAlreadyDisabledException:
      description: This connection is already disabled.
      type: object
      properties:
        detail:
          example: This connection is already disabled.
        code:
          example: 3011
    403FailedRequestResponse:
      description: Example for failed request response
      type: object
      properties:
        default_detail:
          example: User does not have permission to access this resource
        default_code:
          example: 1066
    403FeatureNotEnabledResponse:
      description: Example for failed request response
      type: object
      properties:
        detail:
          example: Feature is not enabled for this customer or this connection
        default_code:
          example: 1141
    404FailedRequestResponse:
      description: Example for failed request response
      type: object
      properties:
        default_detail:
          example: The requested resource does not exist.
        default_code:
          example: 1011
    425FailedRequestResponse:
      description: Example for failed request response
      type: object
      properties:
        detail:
          example: The resource is currently being populated. Please try again later.
        code:
          example: 3012
    500UnexpectedExceptionResponse:
      description: Example for a response that failed for unexpected reasons
      type: object
      properties:
        detail:
          example: Encountered an unexpected exception.
        status_code:
          example: 500
        code:
          example: 1000
    AccountSyncStatus:
      description: Contains status update for the account sync process between SnapTrade and the brokerage.
      properties:
        transactions:
          $ref: "#/components/schemas/TransactionsStatus"
        holdings:
          $ref: "#/components/schemas/HoldingsStatus"
    TransactionsStatus:
      description: |
        Status of account transaction sync. SnapTrade syncs transactions from the brokerage under the following conditions:
        1. Initial connection - SnapTrade syncs all transactions from the brokerage account as far back as the brokerage allows. Check [our integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=6fab8012ade6441fa0c6d9af9c55ce3a) for details on how far back we sync for each brokerage.
        2. Daily sync - Once a day SnapTrade syncs new transactions from the brokerage.
        3. Manual sync - You can retrigger an incremental sync of transactions with the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint.
      properties:
        initial_sync_completed:
          description: Indicates if the initial sync of transactions has been completed. For accounts with a large number of transactions, the initial sync may take a while to complete.
          type: boolean
          example: true
        last_successful_sync:
          description: All transactions up to this date have been successfully synced. Please note that this is not the date of the last transaction, nor the last time SnapTrade attempted to sync transactions.
          nullable: true
          allOf:
            - $ref: "#/components/schemas/SyncStatusDate"
        first_transaction_date:
          description: The date of the first transaction in the account known to SnapTrade. It's possible that the account has transactions before this date, but they are not known to SnapTrade.
          nullable: true
          allOf:
            - $ref: "#/components/schemas/SyncStatusDate"
    HoldingsStatus:
      description: |
        Status of account holdings sync. SnapTrade syncs holdings from the brokerage under the following conditions:
        1. Initial connection - SnapTrade syncs all holdings (positions, balances, recent orders, and transactions) immediately after the connection is established.
        2. Daily sync - Once a day SnapTrade refreshes all holdings from the brokerage.
        3. Manual sync - You can trigger a refresh of holdings with the [manual refresh](/reference/Connections/Connections_refreshBrokerageAuthorization) endpoint.
      properties:
        initial_sync_completed:
          description: Indicates if the initial sync of holdings has been completed. For accounts with a large number of positions/orders/transactions, the initial sync may take a while to complete.
          type: boolean
          example: true
        last_successful_sync:
          description: The last time holdings were successfully synced by SnapTrade.
          nullable: true
          allOf:
            - $ref: "#/components/schemas/HoldingsSyncStatusDate"
    AccountBalance:
      description: Contains balance related information for the account.
      properties:
        total:
          description: Total market value of this account (includes cash, equity, fixed income, etc). This value is directly obtained from the brokerage and should reflect the most accurate value of the account.
          nullable: true
          properties:
            amount:
              type: number
              description: Total value denominated in the currency of the `currency` field.
              example: 15363.23
            currency:
              type: string
              description: The ISO-4217 currency code for the amount.
              example: USD
    Account:
      description: A single account at a brokerage.
      type: object
      required:
        - id
        - brokerage_authorization
        - name
        - number
        - institution_name
        - created_date
        - sync_status
        - balance
      properties:
        id:
          description: Unique identifier for the connected brokerage account. This is the UUID used to reference the account in SnapTrade. This ID should not change for as long as the connection stays active. If the connection is deleted and re-added, a new account ID will be generated.
          allOf:
            - $ref: "#/components/schemas/AccountID"
        brokerage_authorization:
          $ref: "#/components/schemas/BrokerageAuthID"
        name:
          type: string
          description: A display name for the account. Either assigned by the user or by the brokerage itself. For certain brokerages, SnapTrade appends the brokerage name to the account name for clarity.
          example: Robinhood Individual
          nullable: true
        number:
          type: string
          example: Q6542138443
          description: The account number assigned by the brokerage. For some brokerages, this field may be masked for security reasons.
        institution_name:
          type: string
          description: The name of the brokerage that holds the account.
          example: Robinhood
        created_date:
          description: Timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format indicating when the account was created in SnapTrade. This is _not_ the account opening date at the brokerage.
          type: string
          format: date-time
          example: 2024-07-23T22:50:22.761390Z
        sync_status:
          $ref: "#/components/schemas/AccountSyncStatus"
        balance:
          $ref: "#/components/schemas/AccountBalance"
        meta:
          type: object
          deprecated: true
          description: Additional information about the account, such as account type, status, etc. This information is specific to the brokerage and there's no standard format for this data. This field is deprecated and subject to removal in a future version.
          example:
            type: Margin
            status: ACTIVE
            institution_name: Robinhood
        portfolio_group:
          $ref: "#/components/schemas/PortfolioGroupID"
        cash_restrictions:
          deprecated: true
          description: This field is deprecated.
          type: array
          items:
            type: string
          example: []
        raw_type:
          type: string
          description: The account type as provided by the brokerage
          example: Margin
          nullable: true
    AccountSimple:
      description: A single account at a brokerage.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/AccountID"
        name:
          type: string
          description: A display name for the account. Either assigned by the user or by the brokerage itself. For certain brokerages, SnapTrade appends the brokerage name to the account name for clarity.
          example: Robinhood Individual
        number:
          type: string
          example: Q6542138443
          description: The account number assigned by the brokerage. For some brokerages, this field may be masked for security reasons.
        sync_status:
          $ref: "#/components/schemas/AccountSyncStatus"
    AccountID:
      description: Unique identifier for the connected brokerage account. This is the UUID used to reference the account in SnapTrade.
      type: string
      format: uuid
      example: 917c8734-8470-4a3e-a18f-57c3f2ee6631
    AccountIDs:
      description: Comma separated list of account IDs
      type: string
      example: 917c8734-8470-4a3e-a18f-57c3f2ee6631,65e839a3-9103-4cfb-9b72-2071ef80c5f2
    BrokerageAuthID:
      description: Unique identifier for the connection. This is the UUID used to reference the connection in SnapTrade.
      type: string
      format: uuid
      example: 87b24961-b51e-4db8-9226-f198f6518a89
    BrokerageAuthIDs:
      description: Comma separated list of brokerage authorization IDs
      type: string
      example: 917c8734-8470-4a3e-a18f-57c3f2ee6631,65e839a3-9103-4cfb-9b72-2071ef80c5f2
    AccountHoldings:
      description: Account Holdings
      type: object
      properties:
        account:
          $ref: "#/components/schemas/SnapTradeHoldingsAccount"
        balances:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Balance"
        positions:
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/Position"
        total_value:
          $ref: "#/components/schemas/SnapTradeHoldingsTotalValue"
    AccountHoldingsAccount:
      description: A wrapper object containing holdings information for a single account.
      type: object
      properties:
        account:
          $ref: "#/components/schemas/Account"
        balances:
          type: array
          nullable: true
          description: List of balances for the account. Each element of the list has a distinct currency. Some brokerages like Questrade [allows holding multiple currencies in the same account](https://www.questrade.com/learning/questrade-basics/balances-and-reports/understanding-your-account-balances).
          items:
            $ref: "#/components/schemas/Balance"
        positions:
          type: array
          nullable: true
          description: List of stock/ETF/crypto/mutual fund positions in the account.
          items:
            $ref: "#/components/schemas/Position"
        option_positions:
          type: array
          nullable: true
          description: List of option positions in the account.
          items:
            $ref: "#/components/schemas/OptionsPosition"
        orders:
          type: array
          nullable: true
          description: List of recent orders in the account, including both pending and executed orders. Note that option orders are included in this list. Option orders will have a null `universal_symbol` field and a non-null `option_symbol` field.
          items:
            $ref: "#/components/schemas/AccountOrderRecord"
        total_value:
          $ref: "#/components/schemas/SnapTradeHoldingsTotalValue"
    RecentOrdersResponse:
      description: List of orders executed within the last 24 hours
      type: object
      properties:
        orders:
          type: array
          description: List of orders executed in the last 24 hours
          items:
            $ref: "#/components/schemas/AccountOrderRecord"
    RateOfReturnResponse:
      description: List of return rates with their timeframe
      type: object
      properties:
        data:
          type: array
          description: List of return percentages
          items:
            $ref: "#/components/schemas/RateOfReturnObject"
    RateOfReturnObject:
      description: Individual rate of return object with return percent and timeframe
      type: object
      properties:
        timeframe:
          type: string
          enum:
            - ALL
            - 1Y
            - 6M
            - 3M
            - 1M
          description: The timeframe this return percent is reflecting
          example: ALL
        return_percent:
          type: number
          description: The percent return of the portfolio, directly from the brokerage. 5.97 indicates a 5.97% return over the timeframe
          example: 5.97
        created_date:
          type: string
          description: The date this was fetched
          format: date-time
          example: 2024-07-30T22:51:49.746270Z
    AccountOrderRecord:
      description: Describes a single recent order in an account. Each record here represents a single order leg. For multi-leg orders, there will be multiple records.
      type: object
      properties:
        brokerage_order_id:
          $ref: "#/components/schemas/BrokerageOrderID"
        status:
          $ref: "#/components/schemas/AccountOrderRecordStatus"
        universal_symbol:
          description: Contains information about the security that the order is for. This field is only present for stock/ETF/crypto/mutual fund orders. For option orders, this field will be null and the `option_symbol` field will be populated.
          allOf:
            - $ref: "#/components/schemas/UniversalSymbol"
        option_symbol:
          description: Contains information about the option contract that the order is for. This field is only present for option orders. For stock/ETF/crypto/mutual fund orders, this field will be null and the `universal_symbol` field will be populated.
          allOf:
            - $ref: "#/components/schemas/OptionsSymbol"
        action:
          $ref: "#/components/schemas/Action"
        total_quantity:
          description: The total number of shares or contracts of the order. This should be the sum of the filled, canceled, and open quantities. Can be a decimal number for fractional shares.
          nullable: true
          type: number
          example: 100
        open_quantity:
          description: The number of shares or contracts that are still open (waiting for execution). Can be a decimal number for fractional shares.
          nullable: true
          type: number
          example: 10
        canceled_quantity:
          description: The number of shares or contracts that have been canceled. Can be a decimal number for fractional shares.
          nullable: true
          type: number
          example: 10
        filled_quantity:
          description: The number of shares or contracts that have been filled. Can be a decimal number for fractional shares.
          nullable: true
          type: number
          example: 80
        execution_price:
          description: The price at which the order was executed.
          nullable: true
          type: number
          example: 12.34
        limit_price:
          description: The limit price is maximum price one is willing to pay for a buy order or the minimum price one is willing to accept for a sell order. Should only apply to `Limit` and `StopLimit` orders.
          nullable: true
          type: number
          example: 12.34
        stop_price:
          description: The stop price is the price at which a stop order is triggered. Should only apply to `Stop` and `StopLimit` orders.
          nullable: true
          type: number
          example: 12.50
        order_type:
          description: The type of order placed. The most common values are `Market`, `Limit`, `Stop`, and `StopLimit`. We try our best to map brokerage order types to these values. When mapping fails, we will return the brokerage's order type value.
          nullable: true
          type: string
          example: Market
        time_in_force:
          description: >
            The Time in Force type for the order. This field indicates how long the order will remain active before it is executed or expires. We try our best to map brokerage time in force values to the following. When mapping fails, we will return the brokerage's time in force value.
              - `Day` - Day. The order is valid only for the trading day on which it is placed.
              - `GTC` - Good Til Canceled. The order is valid until it is executed or canceled.
              - `FOK` - Fill Or Kill. The order must be executed in its entirety immediately or be canceled completely.
              - `IOC` - Immediate Or Cancel. The order must be executed immediately. Any portion of the order that cannot be filled immediately will be canceled.
              - `GTD` - Good Til Date. The order is valid until the specified date.
              - `MOO` - Market On Open. The order is to be executed at the day's opening price.
              - `EHP` - Extended Hours P.M. The order is to be placed during extended hour trading, after markets close.
          type: string
        time_placed:
          description: The time the order was placed. This is the time the order was submitted to the brokerage.
          type: string
          format: date-time
          example: 2024-07-30T22:51:49.746270Z
        time_updated:
          description: The time the order was last updated in the brokerage system. This value is not always available from the brokerage.
          nullable: true
          type: string
          format: date-time
          example: 2024-08-05T00:05:57.409000Z
        time_executed:
          description: The time the order was executed in the brokerage system. This value is not always available from the brokerage.
          nullable: true
          type: string
          format: date-time
          example: 2024-08-05T00:05:57.409000Z
        expiry_date:
          description: The time the order expires. This value is not always available from the brokerage.
          nullable: true
          type: string
          format: date-time
          example: 2024-08-05T00:05:57.409000Z
        symbol:
          $ref: "#/components/schemas/BrokerageSymbolID"
    AccountOrderRecordStatus:
      description: Indicates the status of an order. SnapTrade does a best effort to map brokerage statuses to statuses in this enum.
      type: string
      enum:
        - NONE
        - PENDING
        - ACCEPTED
        - FAILED
        - REJECTED
        - CANCELED
        - PARTIAL_CANCELED
        - CANCEL_PENDING
        - EXECUTED
        - PARTIAL
        - REPLACE_PENDING
        - REPLACED
        - STOPPED
        - SUSPENDED
        - EXPIRED
        - QUEUED
        - TRIGGERED
        - ACTIVATED
        - PENDING_RISK_REVIEW
        - CONTINGENT_ORDER

    OptionsPosition:
      description: Describes a single option position in an account.
      type: object
      properties:
        symbol:
          $ref: "#/components/schemas/OptionBrokerageSymbol"
        price:
          type: number
          example: 38.4
          description: Last known market price _per share_ of the option contract. The freshness of this price depends on the brokerage. Some brokerages provide real-time prices, while others provide delayed prices. It is recommended that you rely on your own third-party market data provider for most up to date prices.
          nullable: true
        units:
          type: number
          description: The number of contracts for this option position. A positive number indicates a long position, while a negative number indicates a short position.
          example: -50
        average_purchase_price:
          type: number
          nullable: true
          example: 4126
          description: Cost basis _per contract_ of this option position. To get the cost basis _per share_, divide this value by the number of shares per contract (usually 100).
        currency:
          deprecated: true
          description: The currency of the price. This field is deprecated and will be removed in a future version. The currency of the price is determined by the currency of the underlying security.
          nullable: true
          allOf:
            - $ref: "#/components/schemas/Currency"
    OptionStrategy:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        underlying_symbol_id:
          $ref: "#/components/schemas/UniversalSymbol"
        strategy_type:
          type: string
          example: BUTTERFLY
        number_of_legs:
          type: number
          example: 2
        legs:
          type: array
          items:
            properties:
              option_symbol_id:
                type: string
                example: AAPLC20221111
              index:
                type: number
                example: 1
              action:
                type: string
                example: BUY_TO_OPEN
              quantity:
                type: number
                example: 10
    StrategyQuotes:
      type: object
      properties:
        strategy:
          $ref: "#/components/schemas/OptionStrategy"
        open_price:
          $ref: "#/components/schemas/Price"
        bid_price:
          $ref: "#/components/schemas/Price"
        ask_price:
          $ref: "#/components/schemas/Price"
        volatility:
          type: number
          example: 0.141
        greek:
          type: object
          properties:
            delta:
              type: number
              example: 0.1
            gamma:
              type: number
              example: 0.1
            theta:
              type: number
              example: 0.1
            vega:
              type: number
              example: 0.1
            rho:
              type: number
              example: 0.1
    StrategyOrderRecord:
      description: Strategy order record
      type: object
      properties:
        strategy:
          $ref: "#/components/schemas/OptionStrategy"
        status:
          type: string
          enum:
            - PENDING
            - ACCEPTED
            - FAILED
            - REJECTED
            - CANCELED
            - PARTIAL_CANCELED
            - CANCEL_PENDING
            - EXECUTED
            - PARTIAL
            - REPLACE_PENDING
            - REPLACED
            - STOPPED
            - SUSPENDED
            - EXPIRED
            - QUEUED
            - TRIGGERED
            - ACTIVATED
            - PENDING_RISK_REVIEW
            - CONTINGENT_ORDER
        filled_quantity:
          type: number
          example: 10
        open_quantity:
          type: number
          example: 10
        closed_quantity:
          type: number
          example: 10
        order_type:
          $ref: "#/components/schemas/OrderType"
        time_in_force:
          $ref: "#/components/schemas/TimeInForce"
        limit_price:
          $ref: "#/components/schemas/Price"
        execution_price:
          $ref: "#/components/schemas/Price"
        time_placed:
          $ref: "#/components/schemas/Time"
        time_updated:
          $ref: "#/components/schemas/Time"

    SnapTradeHoldingsAccount:
      description: SnapTradeUser Investment Account
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        brokerage_authorization:
          $ref: "#/components/schemas/BrokerageAuthorization"
        portfolio_group:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          example: Registered Retirement Savings Account
          nullable: true
        number:
          type: string
          example: Q6542138443
        institution_name:
          type: string
          example: Alpaca
        sync_status:
          $ref: "#/components/schemas/AccountSyncStatus"
        meta:
          type: object
          example:
            type: Margin
            status: ACTIVE
            institution_name: Alpaca

    SnapTradeHoldingsTotalValue:
      deprecated: true
      description: |
        This field is deprecated. To get the brokerage reported total market value of the account, please refer to `account.balance.total`.

        The total market value of the account. Note that this field is calculated based on the sum of the values of account positions and cash balances known to SnapTrade. It may not be accurate if the brokerage account has holdings that SnapTrade is not aware of. For example, if the brokerage account holds assets that SnapTrade does not support, the total value may be underreported. In certain cases, this value may also be double-counting cash-equivalent assets if those assets are represented as both cash and positions in the account.
      type: object
      properties:
        value:
          type: number
          example: 32600.71
          description: Total value denominated in the currency of the `currency` field.
          nullable: true
        currency:
          type: string
          nullable: true
          description: The ISO-4217 currency code for the amount.
          example: USD
    Balance:
      description: Holds balance information for a single currency in an account.
      type: object
      properties:
        currency:
          description: The currency of the balance. This applies to both `cash` and `buying_power`.
          allOf:
            - $ref: "#/components/schemas/Currency"
        cash:
          type: number
          description: The amount of available cash in the account denominated in the currency of the `currency` field.
          example: 300.71
          nullable: true
        buying_power:
          type: number
          description: Buying power only applies to margin accounts. For non-margin accounts, buying power should be the same as cash. Please note that this field is not always available for all brokerages.
          example: 410.71
          nullable: true
    CurrencyID:
      type: string
      format: uuid
      description: Unique identifier for the currency. This is the UUID used to reference the currency in SnapTrade.
      example: 87b24961-b51e-4db8-9226-f198f6518a89
    Currency:
      description: Describes a currency object.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/CurrencyID"
        code:
          type: string
          description: The ISO-4217 currency code for the currency.
          example: USD
        name:
          type: string
          description: A human-friendly name of the currency.
          example: US Dollar
    Exchange:
      description: Describes a single stock or crypto exchange.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/ExchangeID"
        code:
          description: A short name for the exchange. For standardized exchange code, please us the `mic_code` field.
          type: string
          example: TSX
        mic_code:
          description: The [Market Identifier Code](https://en.wikipedia.org/wiki/Market_Identifier_Code) (MIC) for the exchange.
          type: string
          example: XTSE
        name:
          description: The full name of the exchange.
          type: string
          example: Toronto Stock Exchange
        timezone:
          description: The timezone for the trading hours (`start_time` and `close_time`) of the exchange.
          type: string
          example: America/New_York
        start_time:
          description: The time when the exchange opens for trading.
          type: string
          example: 09:30:00
        close_time:
          description: The time when the exchange closes for trading.
          type: string
          example: 16:00:00
        suffix:
          description: The suffix to be appended to the symbol when trading on this exchange. For example, the suffix for the Toronto Stock Exchange is `.TO`. See `UniversalSymbol->symbol` and `UniversalSymbol->raw_symbol` for more detail.
          type: string
          example: .TO
          nullable: true
    USExchange:
      # FIXME Why did we create a separate schema for USExchange instead of using Exchange?
      description: US Stock Exchange
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        code:
          type: string
          example: ARCX
        mic_code:
          type: string
          example: ARCA
        name:
          type: string
          example: NYSE ARCA
        timezone:
          type: string
          example: America/New_York
        start_time:
          type: string
          example: 09:30:00
        close_time:
          type: string
          example: 16:00:00
        suffix:
          type: string
          example: None
          nullable: true
        allows_cryptocurrency_symbols:
          type: boolean
          example: false
    LoginRedirectURI:
      description: Redirect uri upon successful login
      type: object
      properties:
        redirectURI:
          description: Connection Portal link to redirect user to connect a brokerage account.
          type: string
          example: https://app.snaptrade.com/snapTrade/redeemToken?token=npVKchZrL0MYIHTusGfADT74r4xXpHkmbxbQDmt0RINLXbQ5cWsvGkPSgMQRxz8/cnxjzL9T2NWLuHuDyidHiCNeXXTb/tVhzC2olSyfxWW6DRrkUppArGCdmkIHyBMzog6C55P8yoqzcGer5Hml0Q%3D%3D&clientId=WEALTHLY&broker=ROBINHOOD&connectionPortalVersion=v4&sessionId=cf371bb4-a475-4f17-ab94-d0fee699960d
        sessionId:
          description: ID to identify the connection portal session.
          type: string
          example: cf371bb4-a475-4f17-ab94-d0fee699960d
    ClientID:
      description: SnapTrade Client ID (generated and provided to partner by SnapTrade)
      type: string
      example: SNAPTRADETEST
    UserID:
      description: SnapTrade User ID. This is chosen by the API partner and can be any string that is a) unique to the user, and b) immutable for the user. It is recommended to NOT use email addresses for this property because they are usually not immutable.
      type: string
      example: snaptrade-user-123
    UserSecret:
      description: SnapTrade User Secret. This is a randomly generated string and should be stored securely. If compromised, please rotate it via the [rotate user secret endpoint](/reference/Authentication/Authentication_resetSnapTradeUserSecret).
      type: string
      example: adf2aa34-8219-40f7-a6b3-60156985cc61
    PerformanceCustom:
      description: Performance Custom Response Object
      type: object
      properties:
        totalEquityTimeframe:
          type: array
          items:
            $ref: "#/components/schemas/PastValue"
        contributions:
          $ref: "#/components/schemas/NetContributions"
        contributionTimeframe:
          type: array
          items:
            $ref: "#/components/schemas/PastValue"
        contributionTimeframeCumulative:
          type: array
          items:
            $ref: "#/components/schemas/PastValue"
        withdrawalTimeframe:
          type: array
          items:
            $ref: "#/components/schemas/PastValue"
        contributionStreak:
          type: number
          example: 5
          description: Current streak of cosecutive months where contributions were made
          nullable: true
        contributionMonthsContributed:
          type: number
          example: 10
          description: Number of months in the timeframe with contributions
          nullable: true
        contributionTotalMonths:
          type: number
          example: 13
          description: Total months in timeframe
          nullable: true
        dividends:
          type: array
          items:
            $ref: "#/components/schemas/NetDividend"
        dividendIncome:
          type: number
          description: Total dividends received over the timeframe
          example: 135.97
          nullable: true
        monthlyDividends:
          type: number
          description: Average dividends received per month over the timeframe
          example: 26.37
          nullable: true
        badTickers:
          type: array
          items:
            type: string
            example: MAW105
            nullable: true
          description:
            list of tickers which may not be supported or may not have accurate
            price data
        dividendTimeline:
          type: array
          items:
            $ref: "#/components/schemas/MonthlyDividends"
        commissions:
          type: number
          example: 3.26
          description: commissions incurred during the timeframe
          nullable: true
        forexFees:
          type: number
          example: 5.26
          description: forex fees incurred during the timeframe
          nullable: true
        fees:
          type: number
          example: 2.72
          description: other fees incurred during the timeframe
          nullable: true
        rateOfReturn:
          type: number
          example: 0.082312367452
          description:
            The return rate over the timeframe. Annualized if timeframe is
            longer than 1 year
          nullable: true
        returnRateTimeframe:
          type: array
          items:
            $ref: "#/components/schemas/SubPeriodReturnRate"
        detailedMode:
          type: boolean
          description:
            Whether the user has detailed mode enabled (more frequent data
            points for totalEquity and contribution timeframes)
    SubPeriodReturnRate:
      type: object
      properties:
        periodStart:
          $ref: "#/components/schemas/ReportingDate"
        periodEnd:
          $ref: "#/components/schemas/ReportingDate"
        rateOfReturn:
          type: number
          example: 0.012312367452
          description: The return rate for the given period
          nullable: true
    DividendAtDate:
      type: object
      properties:
        symbol:
          type: string
          example: AAPL
          description: The ticker of the symbol that the dividend came from
          nullable: true
        amount:
          type: number
          example: 6.82
          description: The amount received from the dividend
          nullable: true
        currency:
          type: string
          example: CAD
          description: The currency of the amount
    PartnerData:
      description: Configurations for your SnapTrade Client ID, including allowed brokerages and data access.
      type: object
      properties:
        slug:
          type: string
          description: A short, unique identifier for your company or product.
          example: WEALTHLY
        name:
          type: string
          description: Your company or product name.
          example: Wealthly
        logo_url:
          type: string
          description: URL to your company or product logo.
          example: https://example.com/logo.png
        allowed_brokerages:
          type: array
          description: Brokerages that can be accessed by your Client ID.
          items:
            $ref: "#/components/schemas/Brokerage"
        can_access_trades:
          type: boolean
          description: Whether trading is enabled for your SnapTrade Client ID.
          example: true
        can_access_holdings:
          type: boolean
          description: Whether holdings data is enabled for your SnapTrade Client ID.
          example: true
        can_access_account_history:
          type: boolean
          description: Whether account historical transactions is enabled for your SnapTrade Client ID.
          example: true
        can_access_reference_data:
          type: boolean
          description: Whether reference data is enabled for your SnapTrade Client ID.
          example: true
        can_access_portfolio_management:
          type: boolean
          description: Whether portfolio management is enabled for your SnapTrade Client ID.
          example: true
        can_access_orders:
          type: boolean
          description: Whether recent order history is enabled for your SnapTrade Client ID.
          example: true
        redirect_uri:
          type: string
          description: URI to redirect user back to after user is done adding brokerage connections.
          example: https://example.com/oauth/snaptrade
        pin_required:
          deprecated: true
          type: boolean
          description: Shows if pin is required by users to access connection page. This field has been deprecated.
          example: false
    Position:
      description: Describes a single stock/ETF/crypto/mutual fund position in an account.
      type: object
      properties:
        symbol:
          $ref: "#/components/schemas/PositionSymbol"
        units:
          description: The number of shares of the position. This can be fractional or integer units.
          type: number
          example: 40
          nullable: true
        price:
          type: number
          example: 113.15
          description: Last known market price for the symbol. The freshness of this price depends on the brokerage. Some brokerages provide real-time prices, while others provide delayed prices. It is recommended that you rely on your own third-party market data provider for most up to date prices.
          nullable: true
        open_pnl:
          type: number
          description: The profit or loss on the position since it was opened. This is calculated as the difference between the current market value of the position and the total cost of the position. It is recommended to calculate this value using the average purchase price and the current market price yourself, instead of relying on this field.
          example: 0.44
          nullable: true
        average_purchase_price:
          type: number
          nullable: true
          example: 108.3353
          description: Cost basis _per share_ of this position.
        fractional_units:
          deprecated: true
          description:
            Deprecated, use the `units` field for both fractional and integer
            units going forward
          type: number
          nullable: true
          example: 1.44
    SnapTradeRegisterUserRequestBody:
      description: Data required to register a user via SnapTrade Partner
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/UserID"
    SnapTradeLoginUserRequestBody:
      description: Data to login a user via SnapTrade Partner
      type: object
      properties:
        broker:
          description: Slug of the brokerage to connect the user to. See [the integrations page](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=3cfea70ef4254afc89704e47275a7a9a&pvs=4) for a list of supported brokerages and their slugs.
          type: string
          example: ALPACA
        immediateRedirect:
          description: When set to `true`, user will be redirected back to the partner's site instead of the connection portal. This parameter is ignored if the connection portal is loaded inside an iframe. See the [guide on ways to integrate the connection portal](/docs/implement-connection-portal) for more information.
          type: boolean
          example: true
        customRedirect:
          description: URL to redirect the user to after the user connects their brokerage account. This parameter is ignored if the connection portal is loaded inside an iframe. See the [guide on ways to integrate the connection portal](/docs/implement-connection-portal) for more information.
          type: string
          example: https://snaptrade.com
        reconnect:
          description: The UUID of the brokerage connection to be reconnected. This parameter should be left empty unless you are reconnecting a disabled connection. See the [guide on fixing broken connections](/docs/fix-broken-connections) for more information.
          type: string
          example: 8b5f262d-4bb9-365d-888a-202bd3b15fa1
        connectionType:
          description: Sets whether the connection should be read-only or trade-enabled. Defaults to read-only if not specified.
          type: string
          enum:
            - read
            - trade
          default: read
        connectionPortalVersion:
          description: Sets the connection portal version to render. Currently only v4 is supported and is the default. All other versions are deprecated and will automatically be set to v4.
          type: string
          example: v4
          enum:
            - v4
            - v3
            - v2
          default: v4
    Symbol:
      # FIXME Merge this with UniversalSymbol
      description: Uniquely describes a single security + exchange combination across all brokerages.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UniversalSymbolID"
        symbol:
          description: The security's trading ticker symbol. For example "AAPL" for Apple Inc. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on "Yahoo Finance Market Coverage and Data Delays"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a '.TO' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix.
          type: string
          example: VAB.TO
        raw_symbol:
          description: The raw symbol is `symbol` with the exchange suffix removed. For example, if `symbol` is "VAB.TO", then `raw_symbol` is "VAB".
          type: string
          example: VAB
        description:
          description: A human-readable description of the security. This is usually the company name or ETF name.
          type: string
          example: VANGUARD CDN AGGREGATE BOND INDEX ETF
          nullable: true
        currency:
          description: The currency in which the security is traded.
          allOf:
            - $ref: "#/components/schemas/Currency"
        exchange:
          description: The exchange on which the security is listed and traded.
          allOf:
            - $ref: "#/components/schemas/Exchange"
        type:
          $ref: "#/components/schemas/SecurityType"
        figi_code:
          description: This identifier is unique per security per trading venue. See section 1.4.1 of the [FIGI Standard](https://www.openfigi.com/assets/local/figi-allocation-rules.pdf) for more information. This value should be the same as the `figi_code` in the `figi_instrument` child property.
          type: string
          example: BBG000B9XRY4
          nullable: true
        figi_instrument:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/FigiInstrument"
    UserIDandSecret:
      type: object
      properties:
        userId:
          $ref: "#/components/schemas/UserID"
        userSecret:
          $ref: "#/components/schemas/UserSecret"
    UserList:
      description: List of registered SnapTrade user IDs
      type: array
      items:
        $ref: "#/components/schemas/UserID"
      example:
        - user1
        - user2
        - user3
    DeleteUserResponse:
      type: object
      properties:
        status:
          description: This is always `deleted` when a user is queued for deletion.
          type: string
          example: deleted
        detail:
          description: Human friendly message about the deletion status.
          type: string
          example: User queued for deletion; please wait for webhook for confirmation.
        userId:
          $ref: "#/components/schemas/UserID"
    BrokerageAuthorizationTypeReadOnly:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        type:
          type: string
          enum:
            - read
            - trade
        auth_type:
          type: string
          enum:
            - OAUTH
            - SCRAPE
            - UNOFFICIAL_API
            - TOKEN
        brokerage:
          type: object
          properties:
            id:
              $ref: "#/components/schemas/Id"
            name:
              type: string
              example: Questrade
              description: Full name of the brokerage.
            slug:
              type: string
              example: QUESTRADE
              description:
                A unique identifier for that brokerage. It is usually the name of the brokerage in
                capital letters and will never change.
    Brokerage:
      description: Describes a brokerage that SnapTrade supports.
      type: object
      properties:
        id:
          description: Unique identifier for the brokerage firm. This is the UUID used to reference the brokerage in SnapTrade.
          type: string
          format: uuid
          example: ebf91a5b-0920-4266-9e36-f6cfe8c40946
        slug:
          description: A short, unique identifier for the brokerage. It is usually the name of the brokerage in capital letters and will never change.
          type: string
          example: ROBINHOOD
        name:
          description: Full name of the brokerage.
          type: string
          example: Robinhood
        display_name:
          description: A display-friendly name of the brokerage.
          type: string
          example: Robinhood
        description:
          description: A brief description of the brokerage.
          type: string
          example: Robinhood is an American multinational financial services corporation based in Menlo Park, California.
        aws_s3_logo_url:
          description: URL to the brokerage's logo.
          type: string
          format: url
          example: https://passiv-brokerage-logos.s3.ca-central-1.amazonaws.com/robinhood-logo.png
        aws_s3_square_logo_url:
          description: URL to the brokerage's logo in square format.
          type: string
          format: url
          example: https://passiv-brokerage-logos.s3.ca-central-1.amazonaws.com/robinhood-logo-square.png
          nullable: true
        url:
          description: URL to the brokerage's website.
          type: string
          format: url
          example: https://robinhood.com
        enabled:
          description: Whether the brokerage is enabled in SnapTrade. A disabled brokerage will not be available for new connections.
          type: boolean
          example: true
        maintenance_mode:
          description: Whether the brokerage is currently in maintenance mode. A brokerage in maintenance mode will not be available for new connections.
          type: boolean
          example: true
        allows_trading:
          description: Whether the brokerage allows trading through SnapTrade.
          type: boolean
          nullable: true
          example: true
        allows_fractional_units:
          deprecated: true
          description: This field is deprecated. Please contact us if you have a valid use case for it.
          type: boolean
          nullable: true
          example: true
        has_reporting:
          deprecated: true
          description: This field is deprecated. Please contact us if you have a valid use case for it.
          type: boolean
          nullable: true
          example: true
        is_real_time_connection:
          deprecated: true
          description: This field is deprecated. Please contact us if you have a valid use case for it.
          type: boolean
          example: true
        brokerage_type:
          $ref: "#/components/schemas/BrokerageType"
        exchanges:
          deprecated: true
          description: This field is deprecated. Please contact us if you have a valid use case for it.
          type: array
          items: {}
          example:
            - 2bcd7cc3-e922-4976-bce1-9858296801c3
            - 4bcd8cc3-c122-4974-dc21-1858296801f4
        open_url:
          deprecated: true
          description: This field is deprecated.
          type: string
          format: url
          nullable: true
    BrokerageAuthorization:
      description: |
        A single connection with a brokerage. Note that `Connection` and `Brokerage Authorization` are interchangeable, but the term `Connection` is preferred and used in the doc for consistency.

        A connection is usually tied to a single login at a brokerage. A single connection can contain multiple brokerage accounts.

        SnapTrade performs de-duping on connections for a given user. If the user has an existing connection with the brokerage, when connecting the brokerage with the same credentials, SnapTrade will return the existing connection instead of creating a new one.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/BrokerageAuthID"
        created_date:
          description: Timestamp of when the connection was established in SnapTrade.
          type: string
          format: date-time
          example: 2024-08-20T21:56:19.123935Z
        brokerage:
          $ref: "#/components/schemas/Brokerage"
        name:
          description: A short, human-readable name for the connection.
          type: string
          example: Connection-1
        type:
          description: Whether the connection is read-only or trade-enabled. A read-only connection can only be used to fetch data, while a trade-enabled connection can be used to place trades. Valid values are `read` and `trade`.
          type: string
          example: trade
        disabled:
          description: |
            Whether the connection is disabled. A disabled connection can no longer access the latest data from the brokerage, but will continue to return the last cached state. A connection can become disabled for many reasons and differs by brokerage. Here are some common scenarios:

            - The user has changed their username or password at the brokerage.
            - The user has explicitly removed the access grant at the brokerage.
            - The session has expired at the brokerage and now requires explicit user re-authentication.

            Please see [this guide](/docs/fix-broken-connections) on how to fix a disabled connection.
          type: boolean
          example: false
        disabled_date:
          description: Timestamp of when the connection was disabled in SnapTrade.
          type: string
          format: date-time
          nullable: true
          example: 2022-01-21T15:11:19.217000-05:00
        meta:
          deprecated: true
          description: Additional data about the connection. This information is specific to the brokerage and there's no standard format for this data. This field is deprecated and subject to removal in a future version.
          type: object
          example:
            identifier: 123456
        updated_date:
          deprecated: true
          description: Timestamp of when the connection was last updated in SnapTrade. This field is deprecated. Please let us know if you have a valid use case for this field.
          type: string
          format: date-time
          example: 2024-08-20T21:56:20.057224Z
    BrokerageAuthorizationRefreshConfirmation:
      description: Confirmation that the syncs have been scheduled.
      type: object
      properties:
        detail:
          description: Refresh confirmation details
          type: string
          example: Connection 0b3ebefb-ed47-43df-cd8f-729a4420b5cf scheduled for refresh
    BrokerageAuthorizationDisabledConfirmation:
      description: Confirmation that the connection has been disabled.
      type: object
      properties:
        detail:
          description: Connection disabled confirmation
          type: string
          example: Connection 0b3ebefb-ed47-43df-cd8f-729a4420b5cf has been disabled
    SessionEvent:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        session_event_type:
          type: string
          enum:
            - OAUTH_REDIRECT
            - DISCLAIMER_ACCEPTED
            - BROKERAGE_CONNECTION_INITIATED
            - BROKERAGE_RECONNECT_INITIATED
            - BROKERAGE_AUTHENTICATION
            - OAUTH_BROKERAGE_AUTHENTICATION
            - MFA_REQUESTED
            - MFA_SUBMITTED
            - MFA_CHOICE_REQUESTED
            - MFA_CHOICE_SUBMITTED
            - CONNECTION_SUCCESSFUL
            - CONNECTION_FAILED
            - PARTNER_REDIRECT
            - CONNECTION_ABORTED
            - SESSION_STARTED
        session_id:
          $ref: "#/components/schemas/Id"
        user_id:
          $ref: "#/components/schemas/UserID"
        created_date:
          $ref: "#/components/schemas/Time"
        brokerage_status_code:
          type: integer
          nullable: true
          example: 400
        brokerage_authorization_id:
          $ref: "#/components/schemas/Id"
    OptionBrokerageSymbol:
      description: Uniquely describes a security for the option position within an account. The distinction between this and the `option_symbol` child property is that this object is specific to a position within an account, while the `option_symbol` child property is universal across all brokerage accounts. The caller should rely on the `option_symbol` child property for most use cases.
      type: object
      properties:
        option_symbol:
          $ref: "#/components/schemas/OptionsSymbol"
        id:
          $ref: "#/components/schemas/BrokerageSymbolID"
        description:
          deprecated: true
          description: This field is deprecated and the caller should use the `option_symbol` child property's `description` instead.
          type: string
          example: SPY CALL 7/17 200
    PositionSymbol:
      description: Uniquely describes a security for the position within an account. The distinction between this and the `symbol` child property is that this object is specific to a position within an account, while the `symbol` child property is universal across all brokerage accounts. The caller should rely on the `symbol` child property for most use cases.
      type: object
      properties:
        symbol:
          $ref: "#/components/schemas/UniversalSymbol"
        id:
          $ref: "#/components/schemas/BrokerageSymbolID"
        description:
          deprecated: true
          description: This field is deprecated and the caller should use the `symbol` child property's `description` instead.
          type: string
          example: VANGUARD CDN AGGREGATE BOND INDEX ETF
        local_id:
          deprecated: true
          description: This field is deprecated and should not be used. Please reach out to SnapTrade support if you have a valid usecase for this.
          type: string
          example: "3291231"
          nullable: true
        is_quotable:
          deprecated: true
          description: This field is deprecated and should not be used. Please reach out to SnapTrade support if you have a valid usecase for this.
          type: boolean
          example: true
        is_tradable:
          deprecated: true
          description: This field is deprecated and should not be used. Please reach out to SnapTrade support if you have a valid usecase for this.
          type: boolean
          example: true
    OptionChain:
      description: chain of options
      type: array
      items:
        type: object
        properties:
          expiryDate:
            type: string
            example: 2022-07-08T00:00:00.000000-04:00
          description:
            type: string
            example: APPLE INC
          listingExchange:
            type: string
            example: OPRA
          optionExerciseType:
            type: string
            example: American
          chainPerRoot:
            type: array
            items:
              type: object
              properties:
                optionRoot:
                  type: string
                  example: AAPL
                chainPerStrikePrice:
                  type: array
                  items:
                    type: object
                    properties:
                      strikePrice:
                        type: integer
                        format: int32
                        example: 70
                        nullable: true
                      callSymbolId:
                        type: integer
                        format: int32
                        example: 42816081
                        nullable: true
                      putSymbolId:
                        type: integer
                        format: int32
                        example: 42816129
                        nullable: true
                multiplier:
                  type: integer
                  format: int32
                  example: 100
    ExchangeRatePairs:
      description: The exchange rate of a pair of currencies
      type: object
      properties:
        src:
          $ref: "#/components/schemas/Currency"
        dst:
          $ref: "#/components/schemas/Currency"
        exchange_rate:
          type: number
          example: 1.32
    Id:
      type: string
      format: uuid
      example: 2bcd7cc3-e922-4976-bce1-9858296801c3
    BrokerageSymbolID:
      deprecated: true
      description: A unique ID for the security within SnapTrade, scoped to the brokerage account that the security belongs to. This is a legacy field and should not be used. Do not rely on this being a stable ID as it can change.
      type: string
      format: uuid
      example: 2bcd7cc3-e922-4976-bce1-9858296801c3
    BrokerageOrderID:
      description: Order ID returned by brokerage. This is the unique identifier for the order in the brokerage system.
      type: string
      example: 66a033fa-da74-4fcf-b527-feefdec9257e
    TradeID:
      description: Unique identifier for the submitted order through SnapTrade.
      type: string
      format: uuid
      example: 139e307a-82f7-4402-b39e-4da7baa87758
    UniversalSymbolID:
      description: Unique identifier for the symbol within SnapTrade. This is the ID used to reference the symbol in SnapTrade API calls.
      type: string
      format: uuid
      example: 2bcd7cc3-e922-4976-bce1-9858296801c3
    OptionSymbolID:
      description: Unique identifier for the option symbol within SnapTrade. This is the ID used to reference the symbol in SnapTrade API calls.
      type: string
      format: uuid
      example: 2bcd7cc3-e922-4976-bce1-9858296801c3
    ExchangeID:
      description: Unique ID for the exchange in SnapTrade.
      type: string
      format: uuid
      example: 2bcd7cc3-e922-4976-bce1-9858296801c3
    SecurityTypeID:
      description: Unique identifier for the security type within SnapTrade. This is the ID used to reference the security type in SnapTrade API calls.
      type: string
      format: uuid
      example: 2bcd7cc3-e922-4976-bce1-9858296801c3
    MonthlyDividends:
      type: object
      properties:
        date:
          $ref: "#/components/schemas/ReportingDate"
        dividends:
          type: array
          items:
            $ref: "#/components/schemas/DividendAtDate"
    NetContributions:
      type: object
      properties:
        date:
          $ref: "#/components/schemas/ReportingDate"
        contributions:
          type: number
          example: 524.74
          nullable: true
        currency:
          type: string
          example: CAD
    NetDividend:
      description: Object representing total dividends received during a timeframe
      type: object
      properties:
        symbol:
          $ref: "#/components/schemas/UniversalSymbol"
        amount:
          type: number
          example: 165.05
          nullable: true
        currency:
          type: string
          example: USD
    PastValue:
      type: object
      properties:
        date:
          $ref: "#/components/schemas/ReportingDate"
        value:
          type: number
          example: 52.74
        currency:
          type: string
          example: CAD
    PortfolioGroupID:
      description: Portfolio Group ID. Portfolio Groups have been deprecated. Please contact support if you have a usecase for it.
      deprecated: true
      type: string
      format: uuid
      example: 2bcd7cc3-e922-4976-bce1-9858296801c3
    ReportingDate:
      description:
        Date used to specify timeframe for a reporting call (in YYYY-MM-DD
        format). These dates are inclusive.
      type: string
      example: "2022-01-24"
      format: date
    ReportingFrequency:
      description: Optional frequency for the rate of return chart (defaults to
        monthly). Possible values are weekly, monthly, quarterly, yearly.
      type: string
      example: monthly
    Status:
      description: Status of API
      type: object
      properties:
        version:
          type: integer
          example: 153
        timestamp:
          type: string
          example: 2022-11-04T01:47:00.377969Z
        online:
          type: boolean
          example: true
    SymbolQuery:
      type: object
      properties:
        substring:
          description: The search query for symbols.
          type: string
          example: AAPL
    SyncStatusDate:
      description: Date in YYYY-MM-DD format or null
      type: string
      example: "2022-01-24"
      format: date
      nullable: true
    HoldingsSyncStatusDate:
      description: Date in ISO 8601 format or null (YYYY-MM-DD HH:MM:SS.mmmmmmTZ)
      type: string
      example: "2024-06-28 18:42:46.561408+00:00"
      format: date-time
      nullable: true
    ManualTrade:
      description: Contains the details of a submitted order.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/TradeID"
        account:
          $ref: "#/components/schemas/AccountID"
        order_type:
          $ref: "#/components/schemas/OrderTypeStrict"
        time_in_force:
          $ref: "#/components/schemas/TimeInForceStrict"
        symbol:
          $ref: "#/components/schemas/ManualTradeSymbol"
        action:
          $ref: "#/components/schemas/ActionStrict"
        units:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/Units"
        price:
          $ref: "#/components/schemas/Price"
    ManualTradeImpact:
      type: object
      properties:
        account:
          $ref: "#/components/schemas/AccountID"
        currency:
          $ref: "#/components/schemas/CurrencyID"
        remaining_cash:
          description: Estimated amount of cash remaining in the account after the trade.
          type: number
          example: 1.11
          nullable: true
        estimated_commission:
          description: Estimated commission for the trade.
          type: number
          example: 3.26
          nullable: true
        forex_fees:
          description: Estimated foreign transaction fees for the trade.
          type: number
          example: 5.26
          nullable: true
    ManualTradeSymbol:
      description: Information about the security for the order.
      type: object
      properties:
        universal_symbol_id:
          $ref: "#/components/schemas/UniversalSymbolID"
        currency:
          $ref: "#/components/schemas/Currency"
        local_id:
          deprecated: true
          description: This field is deprecated and should not be used.
          type: string
          example: "1048101"
        description:
          deprecated: true
          description: This field is deprecated and should not be used.
          type: string
          example: Metaverse Global ETF
          nullable: true
        symbol:
          deprecated: true
          description: This field is deprecated and should not be used.
          type: string
          example: MVGP.U.TO
        brokerage_symbol_id:
          $ref: "#/components/schemas/BrokerageSymbolID"
    ManualTradeBalance:
      description: Estimated remaining balance of the account after the trade is executed.
      type: object
      properties:
        account:
          $ref: "#/components/schemas/AccountSimple"
        currency:
          $ref: "#/components/schemas/Currency"
        cash:
          description: Estimated amount of cash remaining in the account after the trade. At the moment this is the same as `remaining_cash` under `trade_impacts`.
          type: number
          example: 1.11
          nullable: true
    ManualTradeAndImpact:
      type: object
      properties:
        trade:
          $ref: "#/components/schemas/ManualTrade"
        trade_impacts:
          description: List of impacts of the trade on the account. The list always contains one value at the moment.
          type: array
          items:
            $ref: "#/components/schemas/ManualTradeImpact"
        combined_remaining_balance:
          $ref: "#/components/schemas/ManualTradeBalance"
    SymbolsQuotes:
      description: List of symbols with the latest quotes from the brokerage.
      type: array
      items:
        properties:
          symbol:
            $ref: "#/components/schemas/UniversalSymbol"
          last_trade_price:
            description: The most recent trade price from the brokerage.
            type: number
            example: 8.74
          bid_price:
            description: The most recent bid price from the brokerage.
            type: number
            example: 8.43
          ask_price:
            description: The most recent price from the brokerage.
            type: number
            example: 8.43
          bid_size:
            description: The most recent bid size from the brokerage.
            type: number
            example: 260
          ask_size:
            description: The most recent ask size from the brokerage.
            type: number
            example: 344
    ManualTradeForm:
      description: Inputs for placing an order with the brokerage.
      type: object
      required:
        - account_id
        - action
        - order_type
        - time_in_force
        - universal_symbol_id
      properties:
        account_id:
          $ref: "#/components/schemas/AccountID"
        action:
          $ref: "#/components/schemas/ActionStrict"
        universal_symbol_id:
          $ref: "#/components/schemas/UniversalSymbolID"
        order_type:
          $ref: "#/components/schemas/OrderTypeStrict"
        time_in_force:
          $ref: "#/components/schemas/TimeInForceStrict"
        price:
          description: The limit price for `Limit` and `StopLimit` orders.
          type: number
          example: 31.33
          nullable: true
        stop:
          description: The price at which a stop order is triggered for `Stop` and `StopLimit` orders.
          type: number
          example: 31.33
          nullable: true
        units:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/Units"
        notional_value:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/NotionalValue"
    ManualTradeFormWithOptions:
      description: Inputs for placing an order with the brokerage.
      type: object
      required:
        - account_id
        - action
        - order_type
        - time_in_force
      properties:
        account_id:
          $ref: "#/components/schemas/AccountID"
        action:
          $ref: "#/components/schemas/ActionStrictWithOptions"
        universal_symbol_id:
          description: The universal symbol ID of the security to trade. Must be 'null' if `symbol` is provided, otherwise must be provided.
          nullable: true
          allOf:
            - $ref: "#/components/schemas/UniversalSymbolID"
        symbol:
          description: The security's trading ticker symbol. This currently only support Options symbols in the 21 character OCC format. For example "AAPL  131124C00240000" represents a call option on AAPL expiring on 2024-11-13 with a strike price of $240. For more information on the OCC format, see [here](https://en.wikipedia.org/wiki/Option_symbol#OCC_format). If 'symbol' is provided, then 'universal_symbol_id' must be 'null'.
          type: string
          example: AAPL  131124C00240000
          nullable: true
        order_type:
          $ref: "#/components/schemas/OrderTypeStrict"
        time_in_force:
          $ref: "#/components/schemas/TimeInForceStrict"
        price:
          description: The limit price for `Limit` and `StopLimit` orders.
          type: number
          example: 31.33
          nullable: true
        stop:
          description: The price at which a stop order is triggered for `Stop` and `StopLimit` orders.
          type: number
          example: 31.33
          nullable: true
        units:
          description: For Equity orders, this represents the number of shares for the order. This can be a decimal for fractional orders. Must be `null` if `notional_value` is provided. If placing an Option order, this field represents the number of contracts to buy or sell. (e.g., 1 contract = 100 shares).
          nullable: true
          allOf:
            - $ref: "#/components/schemas/Units"
        notional_value:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/NotionalValue"
        order_class:
          description: The class of order intended to be placed. Defaults to SIMPLE for regular, one legged trades. Set to BRACKET if looking to place a bracket (One-triggers-a-one-cancels-the-other) order, then specify take profit and stop loss conditions. Bracket orders currently only supported on Alpaca, Tradier, and Tradestation, contact us for more details
          type: string
          example: BRACKET
          nullable: true
          enum:
            - SIMPLE
            - BRACKET
        stop_loss:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/StopLoss"
        take_profit:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/TakeProfit"
    ValidatedTradeBody:
      type: object
      properties:
        wait_to_confirm:
          nullable: true
          example: true
          type: boolean
          description: Optional, defaults to true. Determines if a wait is performed to check on order status. If false, latency will be reduced but orders returned will be more likely to be of status `PENDING` as we will not wait to check on the status before responding to the request.
    OrderTypeStrict:
      description: |
        The type of order to place.

        - For `Limit` and `StopLimit` orders, the `price` field is required.
        - For `Stop` and `StopLimit` orders, the `stop` field is required.
      example: Market
      type: string
      enum:
        - Limit
        - Market
        - StopLimit
        - Stop
    OrderType:
      type: string
      nullable: true
      description: Order Type potential values include (but are not limited to)
        - Limit
        - Market
        - StopLimit
        - Stop
    TimeInForceStrict:
      description: >
        The Time in Force type for the order. This field indicates how long the order will remain active before it is executed or expires. Here are the supported values:
          - `Day` - Day. The order is valid only for the trading day on which it is placed.
          - `GTC` - Good Til Canceled. The order is valid until it is executed or canceled.
          - `FOK` - Fill Or Kill. The order must be executed in its entirety immediately or be canceled completely.
      type: string
      enum:
        - FOK
        - Day
        - GTC
    TimeInForce:
      description: |
        Trade time in force examples:
          * FOK - Fill Or Kill
          * Day - Day
          * GTC - Good Til Canceled
          * GTD - Good Til Date
      type: string
    ActionStrict:
      description: The action describes the intent or side of a trade. This is either `BUY` or `SELL`.
      type: string
      enum:
        - BUY
        - SELL
    ActionStrictWithOptions:
      description: The action describes the intent or side of a trade. This is either `BUY` or `SELL` for Equity symbols or `BUY_TO_OPEN`, `BUY_TO_CLOSE`, `SELL_TO_OPEN` or `SELL_TO_CLOSE` for Options.
      type: string
      enum:
        - BUY
        - SELL
        - BUY_TO_OPEN
        - BUY_TO_CLOSE
        - SELL_TO_OPEN
        - SELL_TO_CLOSE
    Action:
      type: string
      description: >
        The action describes the intent or side of a trade. This is usually `BUY` or `SELL` but can include other potential values like the following depending on the specific brokerage.
          - BUY
          - SELL
          - BUY_COVER
          - SELL_SHORT
          - BUY_OPEN
          - BUY_CLOSE
          - SELL_OPEN
          - SELL_CLOSE
    Units:
      description: Number of shares for the order. This can be a decimal for fractional orders. Must be `null` if `notional_value` is provided.
      type: number
      example: 10.5
    Price:
      description: Trade Price if limit or stop limit order
      type: number
      nullable: true
      example: 31.33
    NotionalValue:
      description: Total notional amount for the order. Must be `null` if `units` is provided. Can only work with `Market` for `order_type` and `Day` for `time_in_force`. This is only available for certain brokerages. Please check the [integrations doc](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=e7bbcbf9f272441593f93decde660687) for more information.
      oneOf:
        - type: string
        - type: number
      example: 100.00
    StopLoss:
      description: Details of the stop loss order. Only to be used when order_class = BRACKET. stop_price is required, limit_price is optional
      type: object
      properties:
        stop_price:
          type: string
          example: "48.55"
        limit_price:
          type: string
          nullable: true
          example: "48.50"
    TakeProfit:
      description: Details of the take profit order. Only to be used when order_class = BRACKET.
      type: object
      properties:
        limit_price:
          type: string
          example: "49.95"
    PaginationDetails:
      description: Details about the pagination of the results.
      type: object
      properties:
        offset:
          type: integer
          example: 0
          description: The starting point of the paginated results.
        limit:
          type: integer
          example: 100
          description: The maximum number of items to return in the response.
    PaginatedUniversalActivity:
      description: A paginated list of UniversalActivity objects.
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AccountUniversalActivity"
        pagination:
          $ref: "#/components/schemas/PaginationDetails"
    AccountUniversalActivity:
      description: A transaction or activity from an institution
      type: object
      properties:
        id:
          description: |
            Unique identifier for the transaction. This is the ID used to reference the transaction in SnapTrade.

            Please note that this ID _can_ change if the transaction is deleted and re-added. Under normal circumstances, SnapTrade does not delete transactions. The only time this would happen is if SnapTrade re-fetches and reprocesses the data from the brokerage, which is rare. If you require a stable ID, please let us know and we can work with you to provide one.
          type: string
          example: 2f7dc9b3-5c33-4668-3440-2b31e056ebe6
        symbol:
          description: The security for the transaction. The field is `null` if the transaction is not related to a security (like a deposit, withdrawal, fee, etc). SnapTrade does a best effort to map the brokerage's symbol. In cases where the brokerage symbol is not recognized, the field will be set to `null`.
          nullable: true
          allOf:
            - $ref: "#/components/schemas/Symbol"
        option_symbol:
          description: The option security for the transaction. The field is `null` if the transaction is not related to an option security (like a deposit, withdrawal, fee, etc). SnapTrade does a best effort to map the brokerage's option symbol. In cases where the brokerage option symbol is not recognized, the field will be set to `null`.
          nullable: true
          allOf:
            - $ref: "#/components/schemas/OptionsSymbol"
        price:
          description: The price of the security for the transaction. This is mostly applicable to `BUY`, `SELL`, and `DIVIDEND` transactions.
          type: number
          example: 0.4
        units:
          description: The number of units of the security for the transaction. This is mostly applicable to `BUY`, `SELL`, and `DIVIDEND` transactions.
          type: number
          example: 5.2
        amount:
          description: The amount of the transaction denominated in `currency`. This can be positive or negative. In general, transactions that positively affect the account balance (like sell, deposits, dividends, etc) will have a positive amount, while transactions that negatively affect the account balance (like buy, withdrawals, fees, etc) will have a negative amount.
          type: number
          example: 263.82
          nullable: true
        currency:
          description: The currency in which the transaction `price` and `amount` is denominated.
          allOf:
            - $ref: "#/components/schemas/Currency"
        type:
          type: string
          description: |
            A string representing the type of transaction. SnapTrade does a best effort to categorize the brokerage transaction types into a common set of values. Here are some of the most popular values:
              - `BUY` - Asset bought.
              - `SELL` - Asset sold.
              - `DIVIDEND` - Dividend payout.
              - `CONTRIBUTION` - Cash contribution.
              - `WITHDRAWAL` - Cash withdrawal.
              - `REI` - Dividend reinvestment.
              - `INTEREST` - Interest deposited into the account.
              - `FEE` - Fee withdrawn from the account.
              - `OPTIONEXPIRATION` - Option expiration event. `option_symbol` contains the related option contract info.
              - `OPTIONASSIGNMENT` - Option assignment event. `option_symbol` contains the related option contract info.
              - `OPTIONEXERCISE` - Option exercise event. `option_symbol` contains the related option contract info.
          example: BUY
        option_type:
          type: string
          example: BUY_TO_OPEN
          description: |
            If an option `BUY` or `SELL` transaction, this further specifies the type of action. The possible values are:
            - BUY_TO_OPEN
            - BUY_TO_CLOSE
            - SELL_TO_OPEN
            - SELL_TO_CLOSE
        description:
          description: A human-readable description of the transaction. This is usually the brokerage's description of the transaction.
          type: string
          example: WALT DISNEY UNIT DIST ON 21 SHS REC 12/31/21 PAY 01/06/22
        trade_date:
          description: The recorded time for the transaction. The granularity of this timestamp depends on the brokerage. Some brokerages provide the exact time of the transaction, while others provide only the date. Please check the [integrations page](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=6fab8012ade6441fa0c6d9af9c55ce3a) for the specific brokerage to see the granularity of the timestamps. Note that even though the field is named `trade_date`, it can represent any type of transaction, not just trades.
          type: string
          format: date-time
          example: 2024-03-22T16:27:55Z
          nullable: true
        settlement_date:
          description: The date on which the transaction is settled.
          type: string
          format: date-time
          example: 2024-03-26T00:00:00Z
        fee:
          description: Any fee associated with the transaction if provided by the brokerage.
          type: number
          example: 0
        fx_rate:
          type: number
          example: 1.032
          nullable: true
          description: The forex conversion rate involved in the transaction if provided by the brokerage. Used in cases where securities of one currency are purchased in a different currency, and the forex conversion is automatic. In those cases, price, amount and fee will be in the top level currency (activity -> currency)
        institution:
          description: The institution that the transaction is associated with. This is usually the brokerage name.
          type: string
          example: Robinhood
        external_reference_id:
          type: string
          nullable: true
          description: Reference ID from brokerage used to identify related transactions. For example if an order comprises of several transactions (buy, fee, fx), they can be grouped if they share the same `external_reference_id`
          example: 2f7dc9b3-5c33-4668-3440-2b31e056ebe6
    UniversalActivity:
      description: A transaction or activity from an institution
      type: object
      properties:
        id:
          description: |
            Unique identifier for the transaction. This is the ID used to reference the transaction in SnapTrade.

            Please note that this ID _can_ change if the transaction is deleted and re-added. Under normal circumstances, SnapTrade does not delete transactions. The only time this would happen is if SnapTrade re-fetches and reprocesses the data from the brokerage, which is rare. If you require a stable ID, please let us know and we can work with you to provide one.
          type: string
          example: 2f7dc9b3-5c33-4668-3440-2b31e056ebe6
        account:
          $ref: "#/components/schemas/AccountSimple"
        symbol:
          description: The security for the transaction. The field is `null` if the transaction is not related to a security (like a deposit, withdrawal, fee, etc). SnapTrade does a best effort to map the brokerage's symbol. In cases where the brokerage symbol is not recognized, the field will be set to `null`.
          nullable: true
          allOf:
            - $ref: "#/components/schemas/Symbol"
        option_symbol:
          description: The option security for the transaction. The field is `null` if the transaction is not related to an option security (like a deposit, withdrawal, fee, etc). SnapTrade does a best effort to map the brokerage's option symbol. In cases where the brokerage option symbol is not recognized, the field will be set to `null`.
          nullable: true
          allOf:
            - $ref: "#/components/schemas/OptionsSymbol"
        price:
          description: The price of the security for the transaction. This is mostly applicable to `BUY`, `SELL`, and `DIVIDEND` transactions.
          type: number
          example: 0.4
        units:
          description: The number of units of the security for the transaction. This is mostly applicable to `BUY`, `SELL`, and `DIVIDEND` transactions.
          type: number
          example: 5.2
        amount:
          description: The amount of the transaction denominated in `currency`. This can be positive or negative. In general, transactions that positively affect the account balance (like sell, deposits, dividends, etc) will have a positive amount, while transactions that negatively affect the account balance (like buy, withdrawals, fees, etc) will have a negative amount.
          type: number
          example: 263.82
          nullable: true
        currency:
          description: The currency in which the transaction `price` and `amount` is denominated.
          allOf:
            - $ref: "#/components/schemas/Currency"
        type:
          type: string
          description: |
            A string representing the type of transaction. SnapTrade does a best effort to categorize the brokerage transaction types into a common set of values. Here are some of the most popular values:
              - `BUY` - Asset bought.
              - `SELL` - Asset sold.
              - `DIVIDEND` - Dividend payout.
              - `CONTRIBUTION` - Cash contribution.
              - `WITHDRAWAL` - Cash withdrawal.
              - `REI` - Dividend reinvestment.
              - `INTEREST` - Interest deposited into the account.
              - `FEE` - Fee withdrawn from the account.
              - `OPTIONEXPIRATION` - Option expiration event. `option_symbol` contains the related option contract info.
              - `OPTIONASSIGNMENT` - Option assignment event. `option_symbol` contains the related option contract info.
              - `OPTIONEXERCISE` - Option exercise event. `option_symbol` contains the related option contract info.
          example: BUY
        option_type:
          type: string
          example: BUY_TO_OPEN
          description: |
            If an option `BUY` or `SELL` transaction, this further specifies the type of action. The possible values are:
            - BUY_TO_OPEN
            - BUY_TO_CLOSE
            - SELL_TO_OPEN
            - SELL_TO_CLOSE
        description:
          description: A human-readable description of the transaction. This is usually the brokerage's description of the transaction.
          type: string
          example: WALT DISNEY UNIT DIST ON 21 SHS REC 12/31/21 PAY 01/06/22
        trade_date:
          description: The recorded time for the transaction. The granularity of this timestamp depends on the brokerage. Some brokerages provide the exact time of the transaction, while others provide only the date. Please check the [integrations page](https://snaptrade.notion.site/66793431ad0b416489eaabaf248d0afb?v=6fab8012ade6441fa0c6d9af9c55ce3a) for the specific brokerage to see the granularity of the timestamps. Note that even though the field is named `trade_date`, it can represent any type of transaction, not just trades.
          type: string
          format: date-time
          example: 2024-03-22T16:27:55Z
          nullable: true
        settlement_date:
          description: The date on which the transaction is settled.
          type: string
          format: date-time
          example: 2024-03-26T00:00:00Z
        fee:
          description: Any fee associated with the transaction if provided by the brokerage.
          type: number
          example: 0
        fx_rate:
          type: number
          example: 1.032
          nullable: true
          description: The forex conversion rate involved in the transaction if provided by the brokerage. Used in cases where securities of one currency are purchased in a different currency, and the forex conversion is automatic. In those cases, price, amount and fee will be in the top level currency (activity -> currency)
        institution:
          description: The institution that the transaction is associated with. This is usually the brokerage name.
          type: string
          example: Robinhood
        external_reference_id:
          type: string
          nullable: true
          description: Reference ID from brokerage used to identify related transactions. For example if an order comprises of several transactions (buy, fee, fx), they can be grouped if they share the same `external_reference_id`
          example: 2f7dc9b3-5c33-4668-3440-2b31e056ebe6
    FigiInstrument:
      description: Financial Instrument Global Identifier (FIGI) information for the security. See [OpenFIGI](https://www.openfigi.com/) for more information.
      type: object
      properties:
        figi_code:
          description: This identifier is unique per security per trading venue. See section 1.4.1 of the [FIGI Standard](https://www.openfigi.com/assets/local/figi-allocation-rules.pdf) for more information.
          type: string
          example: BBG000B9Y5X2
          nullable: true
        figi_share_class:
          description: This enables users to link multiple FIGIs for the same security in order to obtain an aggregated view across all countries and all exchanges. For example, `AAPL` has a different FIGI for each exchange/trading venue it is traded on. The `figi_share_class` is the same for all of these FIGIs. See section 1.4.3 of the [FIGI Standard](https://www.openfigi.com/assets/local/figi-allocation-rules.pdf) for more information.
          type: string
          example: BBG001S5N8V8
          nullable: true
    UniversalSymbol:
      description: Uniquely describes a single security + exchange combination across all brokerages.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UniversalSymbolID"
        symbol:
          description: The security's trading ticker symbol. For example "AAPL" for Apple Inc. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on "Yahoo Finance Market Coverage and Data Delays"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a '.TO' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix.
          type: string
          example: VAB.TO
        raw_symbol:
          description: The raw symbol is `symbol` with the exchange suffix removed. For example, if `symbol` is "VAB.TO", then `raw_symbol` is "VAB".
          type: string
          example: VAB
        description:
          description: A human-readable description of the security. This is usually the company name or ETF name.
          type: string
          example: VANGUARD CDN AGGREGATE BOND INDEX ETF
          nullable: true
        currency:
          description: The currency in which the security is traded.
          allOf:
            - $ref: "#/components/schemas/Currency"
        exchange:
          description: The exchange on which the security is listed and traded.
          allOf:
            - $ref: "#/components/schemas/Exchange"
        type:
          $ref: "#/components/schemas/SecurityType"
        figi_code:
          description: This identifier is unique per security per trading venue. See section 1.4.1 of the [FIGI Standard](https://www.openfigi.com/assets/local/figi-allocation-rules.pdf) for more information. This value should be the same as the `figi_code` in the `figi_instrument` child property.
          type: string
          example: BBG000B9XRY4
          nullable: true
        figi_instrument:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/FigiInstrument"
        currencies:
          deprecated: true
          description: This field is deprecated and should not be used. Please reach out to SnapTrade support if you have a valid usecase for this.
          type: array
          items:
            $ref: "#/components/schemas/Currency"
      required:
        - id
        - symbol
        - raw_symbol
        - currency
        - type
        - currencies
    UnderlyingSymbol:
      # FIXME: Why is this different from UniversalSymbol
      description: Symbol object for the underlying security of an option.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UniversalSymbolID"
        symbol:
          description: The security's trading ticker symbol. For example "AAPL" for Apple Inc. We largely follow the [Yahoo Finance ticker format](https://help.yahoo.com/kb/SLN2310.html)(click on "Yahoo Finance Market Coverage and Data Delays"). For example, for securities traded on the Toronto Stock Exchange, the symbol has a '.TO' suffix. For securities traded on NASDAQ or NYSE, the symbol does not have a suffix.
          type: string
          example: SPY
        raw_symbol:
          description: The raw symbol is `symbol` with the exchange suffix removed. For example, if `symbol` is "VAB.TO", then `raw_symbol` is "VAB".
          type: string
          example: VAB
        description:
          description: A human-readable description of the security. This is usually the company name or ETF name.
          type: string
          example: SPDR S&P 500 ETF Trust
          nullable: true
        currency:
          description: The currency in which the security is traded.
          allOf:
            - $ref: "#/components/schemas/Currency"
        exchange:
          description: The exchange on which the security is listed and traded.
          allOf:
            - $ref: "#/components/schemas/USExchange"
        type:
          description: The type of security. For example, "Common Stock" or "ETF".
          allOf:
            - $ref: "#/components/schemas/SecurityType"
        figi_code:
          description: This identifier is unique per security per trading venue. See section 1.4.1 of the [FIGI Standard](https://www.openfigi.com/assets/local/figi-allocation-rules.pdf) for more information. This value should be the same as the `figi_code` in the `figi_instrument` child property.
          type: string
          example: BBG000B9XRY4
          nullable: true
        figi_instrument:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/FigiInstrument"
        currencies:
          deprecated: true
          description: This field is deprecated and should not be used. Please reach out to SnapTrade support if you have a valid usecase for this.
          type: array
          items:
            $ref: "#/components/schemas/Currency"
    OptionsSymbol:
      description: Uniquely describes an option security + exchange combination across all brokerages.
      type: object
      required:
        - id
        - ticker
        - option_type
        - strike_price
        - expiration_date
        - underlying_symbol
      properties:
        id:
          $ref: "#/components/schemas/OptionSymbolID"
        ticker:
          description: The [OCC symbol](https://en.wikipedia.org/wiki/Option_symbol) for the option.
          type: string
          example: AAPL  261218C00240000
        option_type:
          description: The type of option. Either "CALL" or "PUT".
          type: string
          enum:
            - CALL
            - PUT
          example: CALL
        strike_price:
          description: The option strike price.
          type: number
          example: 240
        expiration_date:
          description: The option expiration date.
          type: string
          format: date
          example: "2026-12-18"
        is_mini_option:
          description: Whether the option is a mini option. Mini options have 10 underlying shares per contract instead of the standard 100.
          type: boolean
          example: false
        underlying_symbol:
          $ref: "#/components/schemas/UnderlyingSymbol"

    OptionLeg:
      description: Option Leg
      type: object
      properties:
        action:
          type: string
          enum:
            - BUY_TO_OPEN
            - BUY_TO_CLOSE
            - SELL_TO_OPEN
            - SELL_TO_CLOSE
        option_symbol_id:
          type: string
          description: Obtained from calling options chain endpoint (option_id)
          example: SPY220819P00200000
        quantity:
          type: number
          example: 1
    SecurityType:
      type: object
      description: The type of security. For example, "Common Stock" or "ETF".
      properties:
        id:
          $ref: "#/components/schemas/SecurityTypeID"
        code:
          description: |
            A short code representing the security type. For example, "cs" for Common Stock. Here are some common values:
              - `ad` - ADR
              - `bnd` - Bond
              - `cs` - Common Stock
              - `cef` - Closed End Fund
              - `crypto` - Cryptocurrency
              - `et` - ETF
              - `oef` - Open Ended Fund
              - `ps` - Preferred Stock
              - `rt` - Right
              - `struct` - Structured Product
              - `ut` - Unit
              - `wi` - When Issued
              - `wt` - Warrant
          type: string
          example: cs
        description:
          description: A human-readable description of the security type. For example, "Common Stock" or "ETF".
          type: string
          example: Common Stock
        is_supported:
          deprecated: true
          description: This field is deprecated and should not be used. Please reach out to SnapTrade support if you have a valid usecase for this.
          type: boolean
          example: true
    Time:
      description: Time
      type: string
      example: 2022-01-21T15:11:19.217000-05:00
    BrokerageType:
      description: Type of brokerage. Currently supports traditional brokerages and crypto exchanges.
      type: object
      properties:
        id:
          $ref: "#/components/schemas/Id"
        name:
          type: string
          example: Traditional Brokerage
    WebhookBase:
      description: The base webhook content
      type: object
      properties:
        webookId:
          type: string
          example: 06fe1fd7-fc50-43a7-b564-8a2c5f3bab44
        clientId:
          type: string
          example: WEALTHYCHIPMUNK
        eventTimestamp:
          type: string
          example: 2022-01-21T15:11:19.217000-05:00
        userId:
          type: string
          example: external_user@test.com
    encryptedResponse:
      description: >
        This response consists of 2 different components that must be
        decrypted to obtain the decrypted message


        * Decrypting the encryptedSharedKey

          The encrypted shared key is a shared key that was randomly generated by SnapTrade and encrypted using the users SSH public key provided when registering the user
          It is needed to decrypt the message in step 2.

          To decrypt the shared key, the user should have access to their SSH private key stored locally in their device

          An example Python code on how to decrypt the shared key is shown below

          ```
          def decrypt_rsa_message(self, encrypted_message):
              from Crypto.Cipher import PKCS1_OAEP
              from Crypto.PublicKey import RSA
              from base64 import b64decode

              f = open('private.pem', 'r')
              private_key = RSA.import_key(f.read())
              cipher = PKCS1_OAEP.new(private_key)

              return cipher.decrypt(b64decode(encrypted_message.encode())).decode()
          ```

        * Decrypting the encryptedMessageData

           The data meant to be returned by an endpoint can be obtained by decrypting the encrypted message

           An encrypted message is a message that is encrypted using AES - MODE OCB with the shared key obtained in step one

          An example code to decrypt the encrypted message is shown below

          ```
          def decrypt_aes_message(self, shared_key, encrypted_message):
              from Crypto.Cipher import AES
              from base64 import b64decode

              encrypted_msg = b64decode(encrypted_message["encryptedMessage"].encode())
              tag = b64decode(encrypted_message["tag"].encode())
              nonce = b64decode(encrypted_message["nonce"].encode())
              cipher = AES.new(shared_key.encode(), AES.MODE_OCB, nonce=nonce)

              return cipher.decrypt_and_verify(encrypted_msg, tag).decode()
          ```
      type: object
      additionalProperties: false
      properties:
        encryptedSharedKey:
          type: string
          example: 5UEaY9QGzcNTr8y2jGDUI79jY1OdfK9x
        encryptedMessageData:
          type: object
          properties:
            encryptedMessage:
              type: string
              example: 9Xy05vqZOfp0OpW5fLAaDw==
            tag:
              type: string
              example: mWZPkpQh5ktbcz6N7cTRmQ==
            nonce:
              type: string
              example: None
